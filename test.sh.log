Running test with user linux-o-phile
-- Generating ;/home/linux-o-phile/assignment-2-jainaneesh/assignment-autotest/test/assignment1/Test_hello_Runner.c;/home/linux-o-phile/assignment-2-jainaneesh/assignment-autotest/test/assignment1/Test_assignment_validate_Runner.c from test/assignment1/Test_hello.c;test/assignment1/Test_assignment_validate.c
-- Building executable including ;/home/linux-o-phile/assignment-2-jainaneesh/assignment-autotest/test/assignment1/Test_hello_Runner.c;/home/linux-o-phile/assignment-2-jainaneesh/assignment-autotest/test/assignment1/Test_assignment_validate_Runner.c test/assignment1/Test_hello.c;test/assignment1/Test_assignment_validate.c and ../examples/autotest-validate/autotest-validate.c
-- Configuring done
-- Generating done
-- Build files have been written to: /home/linux-o-phile/assignment-2-jainaneesh/build
[ 10%] Building C object assignment-autotest/Unity/src/CMakeFiles/unity.dir/unity.c.o
[ 20%] Linking C static library libunity.a
[ 20%] Built target unity
[ 30%] Generating ../../assignment-autotest/test/assignment1/Test_hello_Runner.c, ../../assignment-autotest/test/assignment1/Test_assignment_validate_Runner.c, ../../assignment-autotest/test/unity_runner.c
Test files for auto dependency generation test/assignment1/Test_hello.c test/assignment1/Test_assignment_validate.c
Autogenerating runner for test/assignment1/Test_hello.c
Autogenerating runner for test/assignment1/Test_assignment_validate.c
Autogenerating test/unity_runner.c
Scanning dependencies of target assignment-autotest
[ 40%] Building C object assignment-autotest/CMakeFiles/assignment-autotest.dir/test/assignment1/Test_hello.c.o
[ 50%] Building C object assignment-autotest/CMakeFiles/assignment-autotest.dir/test/assignment1/Test_assignment_validate.c.o
[ 60%] Building C object assignment-autotest/CMakeFiles/assignment-autotest.dir/test/assignment1/Test_hello_Runner.c.o
[ 70%] Building C object assignment-autotest/CMakeFiles/assignment-autotest.dir/test/assignment1/Test_assignment_validate_Runner.c.o
[ 80%] Building C object assignment-autotest/CMakeFiles/assignment-autotest.dir/__/examples/autotest-validate/autotest-validate.c.o
[ 90%] Building C object assignment-autotest/CMakeFiles/assignment-autotest.dir/test/unity_runner.c.o
[100%] Linking C executable assignment-autotest
[100%] Built target assignment-autotest
/home/linux-o-phile/assignment-2-jainaneesh/assignment-autotest/test/assignment1/Test_hello.c:6:test_hello:INFO: Hello!  Your unity setup is working!
/home/linux-o-phile/assignment-2-jainaneesh/assignment-autotest/test/assignment1/Test_hello.c:4:test_hello:PASS

-----------------------
1 Tests 0 Failures 0 Ignored 
OK
/home/linux-o-phile/assignment-2-jainaneesh/assignment-autotest/test/assignment1/Test_assignment_validate.c:9:test_assignment_validate:PASS

-----------------------
1 Tests 0 Failures 0 Ignored 
OK
Executing assignment test script
~/assignment-2-jainaneesh/assignment-autotest/test/assignment2 ~/assignment-2-jainaneesh
~/assignment-2-jainaneesh/finder-app ~/assignment-2-jainaneesh/assignment-autotest/test/assignment2 ~/assignment-2-jainaneesh
rm -f writer *.o
gcc   -Wall -Wextra -o writer writer.c
Using default value AELD_IS_FUN for string to write
Using default value 10 for number of files to write
Writing 10 files containing string AELD_IS_FUN to /tmp/aeld-data
/tmp/aeld-data created
Removing the old writer utility and compiling as a native application
rm -f writer *.o
gcc   -Wall -Wextra -o writer writer.c
The number of files are 10 and the number of matching lines are 10
success
Test of assignment assignment2 complete with success
Running test with user linux-o-phile
-- Generating ;/home/linux-o-phile/assignment-2-jainaneesh/assignment-autotest/test/assignment1/Test_hello_Runner.c;/home/linux-o-phile/assignment-2-jainaneesh/assignment-autotest/test/assignment1/Test_assignment_validate_Runner.c from test/assignment1/Test_hello.c;test/assignment1/Test_assignment_validate.c
-- Building executable including ;/home/linux-o-phile/assignment-2-jainaneesh/assignment-autotest/test/assignment1/Test_hello_Runner.c;/home/linux-o-phile/assignment-2-jainaneesh/assignment-autotest/test/assignment1/Test_assignment_validate_Runner.c test/assignment1/Test_hello.c;test/assignment1/Test_assignment_validate.c and ../examples/autotest-validate/autotest-validate.c
-- Configuring done
-- Generating done
-- Build files have been written to: /home/linux-o-phile/assignment-2-jainaneesh/build
[ 10%] Building C object assignment-autotest/Unity/src/CMakeFiles/unity.dir/unity.c.o
[ 20%] Linking C static library libunity.a
[ 20%] Built target unity
[ 30%] Generating ../../assignment-autotest/test/assignment1/Test_hello_Runner.c, ../../assignment-autotest/test/assignment1/Test_assignment_validate_Runner.c, ../../assignment-autotest/test/unity_runner.c
Test files for auto dependency generation test/assignment1/Test_hello.c test/assignment1/Test_assignment_validate.c
Autogenerating runner for test/assignment1/Test_hello.c
Autogenerating runner for test/assignment1/Test_assignment_validate.c
Autogenerating test/unity_runner.c
Scanning dependencies of target assignment-autotest
[ 40%] Building C object assignment-autotest/CMakeFiles/assignment-autotest.dir/test/assignment1/Test_hello.c.o
[ 50%] Building C object assignment-autotest/CMakeFiles/assignment-autotest.dir/test/assignment1/Test_assignment_validate.c.o
[ 60%] Building C object assignment-autotest/CMakeFiles/assignment-autotest.dir/test/assignment1/Test_hello_Runner.c.o
[ 70%] Building C object assignment-autotest/CMakeFiles/assignment-autotest.dir/test/assignment1/Test_assignment_validate_Runner.c.o
[ 80%] Building C object assignment-autotest/CMakeFiles/assignment-autotest.dir/__/examples/autotest-validate/autotest-validate.c.o
[ 90%] Building C object assignment-autotest/CMakeFiles/assignment-autotest.dir/test/unity_runner.c.o
[100%] Linking C executable assignment-autotest
[100%] Built target assignment-autotest
/home/linux-o-phile/assignment-2-jainaneesh/assignment-autotest/test/assignment1/Test_hello.c:6:test_hello:INFO: Hello!  Your unity setup is working!
/home/linux-o-phile/assignment-2-jainaneesh/assignment-autotest/test/assignment1/Test_hello.c:4:test_hello:PASS

-----------------------
1 Tests 0 Failures 0 Ignored 
OK
/home/linux-o-phile/assignment-2-jainaneesh/assignment-autotest/test/assignment1/Test_assignment_validate.c:9:test_assignment_validate:PASS

-----------------------
1 Tests 0 Failures 0 Ignored 
OK
Executing assignment test script
~/assignment-2-jainaneesh/assignment-autotest/test/assignment2 ~/assignment-2-jainaneesh
~/assignment-2-jainaneesh/finder-app ~/assignment-2-jainaneesh/assignment-autotest/test/assignment2 ~/assignment-2-jainaneesh
rm -f writer *.o
gcc   -Wall -Wextra -o writer writer.c
Using default value AELD_IS_FUN for string to write
Using default value 10 for number of files to write
Writing 10 files containing string AELD_IS_FUN to /tmp/aeld-data
/tmp/aeld-data created
Removing the old writer utility and compiling as a native application
rm -f writer *.o
gcc   -Wall -Wextra -o writer writer.c
The number of files are 10 and the number of matching lines are 10
success
Test of assignment assignment2 complete with success
Running test with user linux-o-phile
-- Generating ;/home/linux-o-phile/assignment-2-jainaneesh/assignment-autotest/test/assignment1/Test_hello_Runner.c;/home/linux-o-phile/assignment-2-jainaneesh/assignment-autotest/test/assignment1/Test_assignment_validate_Runner.c from test/assignment1/Test_hello.c;test/assignment1/Test_assignment_validate.c
-- Building executable including ;/home/linux-o-phile/assignment-2-jainaneesh/assignment-autotest/test/assignment1/Test_hello_Runner.c;/home/linux-o-phile/assignment-2-jainaneesh/assignment-autotest/test/assignment1/Test_assignment_validate_Runner.c test/assignment1/Test_hello.c;test/assignment1/Test_assignment_validate.c and ../examples/autotest-validate/autotest-validate.c
-- Configuring done
-- Generating done
-- Build files have been written to: /home/linux-o-phile/assignment-2-jainaneesh/build
[ 10%] Building C object assignment-autotest/Unity/src/CMakeFiles/unity.dir/unity.c.o
[ 20%] Linking C static library libunity.a
[ 20%] Built target unity
[ 30%] Generating ../../assignment-autotest/test/assignment1/Test_hello_Runner.c, ../../assignment-autotest/test/assignment1/Test_assignment_validate_Runner.c, ../../assignment-autotest/test/unity_runner.c
Test files for auto dependency generation test/assignment1/Test_hello.c test/assignment1/Test_assignment_validate.c
Autogenerating runner for test/assignment1/Test_hello.c
Autogenerating runner for test/assignment1/Test_assignment_validate.c
Autogenerating test/unity_runner.c
Scanning dependencies of target assignment-autotest
[ 40%] Building C object assignment-autotest/CMakeFiles/assignment-autotest.dir/test/assignment1/Test_hello.c.o
[ 50%] Building C object assignment-autotest/CMakeFiles/assignment-autotest.dir/test/assignment1/Test_assignment_validate.c.o
[ 60%] Building C object assignment-autotest/CMakeFiles/assignment-autotest.dir/test/assignment1/Test_hello_Runner.c.o
[ 70%] Building C object assignment-autotest/CMakeFiles/assignment-autotest.dir/test/assignment1/Test_assignment_validate_Runner.c.o
[ 80%] Building C object assignment-autotest/CMakeFiles/assignment-autotest.dir/__/examples/autotest-validate/autotest-validate.c.o
[ 90%] Building C object assignment-autotest/CMakeFiles/assignment-autotest.dir/test/unity_runner.c.o
[100%] Linking C executable assignment-autotest
[100%] Built target assignment-autotest
/home/linux-o-phile/assignment-2-jainaneesh/assignment-autotest/test/assignment1/Test_hello.c:6:test_hello:INFO: Hello!  Your unity setup is working!
/home/linux-o-phile/assignment-2-jainaneesh/assignment-autotest/test/assignment1/Test_hello.c:4:test_hello:PASS

-----------------------
1 Tests 0 Failures 0 Ignored 
OK
/home/linux-o-phile/assignment-2-jainaneesh/assignment-autotest/test/assignment1/Test_assignment_validate.c:9:test_assignment_validate:PASS

-----------------------
1 Tests 0 Failures 0 Ignored 
OK
Executing assignment test script
~/assignment-2-jainaneesh/assignment-autotest/test/assignment2 ~/assignment-2-jainaneesh
~/assignment-2-jainaneesh/finder-app ~/assignment-2-jainaneesh/assignment-autotest/test/assignment2 ~/assignment-2-jainaneesh
rm -f writer *.o
gcc   -Wall -Wextra -o writer writer.c
Using default value AELD_IS_FUN for string to write
Using default value 10 for number of files to write
Writing 10 files containing string AELD_IS_FUN to /tmp/aeld-data
/tmp/aeld-data created
Removing the old writer utility and compiling as a native application
rm -f writer *.o
gcc   -Wall -Wextra -o writer writer.c
The number of files are 10 and the number of matching lines are 10
success
Test of assignment assignment2 complete with success
Running test with user linux-o-phile
-- Generating ;/home/linux-o-phile/assignment-2-jainaneesh/assignment-autotest/test/assignment1/Test_hello_Runner.c;/home/linux-o-phile/assignment-2-jainaneesh/assignment-autotest/test/assignment1/Test_assignment_validate_Runner.c from test/assignment1/Test_hello.c;test/assignment1/Test_assignment_validate.c
-- Building executable including ;/home/linux-o-phile/assignment-2-jainaneesh/assignment-autotest/test/assignment1/Test_hello_Runner.c;/home/linux-o-phile/assignment-2-jainaneesh/assignment-autotest/test/assignment1/Test_assignment_validate_Runner.c test/assignment1/Test_hello.c;test/assignment1/Test_assignment_validate.c and ../examples/autotest-validate/autotest-validate.c
-- Configuring done
-- Generating done
-- Build files have been written to: /home/linux-o-phile/assignment-2-jainaneesh/build
[ 10%] Building C object assignment-autotest/Unity/src/CMakeFiles/unity.dir/unity.c.o
[ 20%] Linking C static library libunity.a
[ 20%] Built target unity
[ 30%] Generating ../../assignment-autotest/test/assignment1/Test_hello_Runner.c, ../../assignment-autotest/test/assignment1/Test_assignment_validate_Runner.c, ../../assignment-autotest/test/unity_runner.c
Test files for auto dependency generation test/assignment1/Test_hello.c test/assignment1/Test_assignment_validate.c
Autogenerating runner for test/assignment1/Test_hello.c
Autogenerating runner for test/assignment1/Test_assignment_validate.c
Autogenerating test/unity_runner.c
Scanning dependencies of target assignment-autotest
[ 40%] Building C object assignment-autotest/CMakeFiles/assignment-autotest.dir/test/assignment1/Test_hello.c.o
[ 50%] Building C object assignment-autotest/CMakeFiles/assignment-autotest.dir/test/assignment1/Test_assignment_validate.c.o
[ 60%] Building C object assignment-autotest/CMakeFiles/assignment-autotest.dir/test/assignment1/Test_hello_Runner.c.o
[ 70%] Building C object assignment-autotest/CMakeFiles/assignment-autotest.dir/test/assignment1/Test_assignment_validate_Runner.c.o
[ 80%] Building C object assignment-autotest/CMakeFiles/assignment-autotest.dir/__/examples/autotest-validate/autotest-validate.c.o
[ 90%] Building C object assignment-autotest/CMakeFiles/assignment-autotest.dir/test/unity_runner.c.o
[100%] Linking C executable assignment-autotest
[100%] Built target assignment-autotest
/home/linux-o-phile/assignment-2-jainaneesh/assignment-autotest/test/assignment1/Test_hello.c:6:test_hello:INFO: Hello!  Your unity setup is working!
/home/linux-o-phile/assignment-2-jainaneesh/assignment-autotest/test/assignment1/Test_hello.c:4:test_hello:PASS

-----------------------
1 Tests 0 Failures 0 Ignored 
OK
/home/linux-o-phile/assignment-2-jainaneesh/assignment-autotest/test/assignment1/Test_assignment_validate.c:9:test_assignment_validate:PASS

-----------------------
1 Tests 0 Failures 0 Ignored 
OK
Executing assignment test script
~/assignment-2-jainaneesh/assignment-autotest/test/assignment2 ~/assignment-2-jainaneesh
~/assignment-2-jainaneesh/finder-app ~/assignment-2-jainaneesh/assignment-autotest/test/assignment2 ~/assignment-2-jainaneesh
rm -f writer *.o
gcc   -Wall -Wextra -o writer writer.c
Using default value AELD_IS_FUN for string to write
Using default value 10 for number of files to write
Writing 10 files containing string AELD_IS_FUN to /tmp/aeld-data
/tmp/aeld-data created
Removing the old writer utility and compiling as a native application
rm -f writer *.o
gcc   -Wall -Wextra -o writer writer.c
Running test with user linux-o-phile
-- Generating ;/home/linux-o-phile/assignment-2-jainaneesh/assignment-autotest/test/assignment1/Test_hello_Runner.c;/home/linux-o-phile/assignment-2-jainaneesh/assignment-autotest/test/assignment1/Test_assignment_validate_Runner.c from test/assignment1/Test_hello.c;test/assignment1/Test_assignment_validate.c
-- Building executable including ;/home/linux-o-phile/assignment-2-jainaneesh/assignment-autotest/test/assignment1/Test_hello_Runner.c;/home/linux-o-phile/assignment-2-jainaneesh/assignment-autotest/test/assignment1/Test_assignment_validate_Runner.c test/assignment1/Test_hello.c;test/assignment1/Test_assignment_validate.c and ../examples/autotest-validate/autotest-validate.c
-- Configuring done
-- Generating done
-- Build files have been written to: /home/linux-o-phile/assignment-2-jainaneesh/build
[ 10%] Building C object assignment-autotest/Unity/src/CMakeFiles/unity.dir/unity.c.o
[ 20%] Linking C static library libunity.a
[ 20%] Built target unity
[ 30%] Generating ../../assignment-autotest/test/assignment1/Test_hello_Runner.c, ../../assignment-autotest/test/assignment1/Test_assignment_validate_Runner.c, ../../assignment-autotest/test/unity_runner.c
Test files for auto dependency generation test/assignment1/Test_hello.c test/assignment1/Test_assignment_validate.c
Autogenerating runner for test/assignment1/Test_hello.c
Autogenerating runner for test/assignment1/Test_assignment_validate.c
Autogenerating test/unity_runner.c
Scanning dependencies of target assignment-autotest
[ 40%] Building C object assignment-autotest/CMakeFiles/assignment-autotest.dir/test/assignment1/Test_hello.c.o
[ 50%] Building C object assignment-autotest/CMakeFiles/assignment-autotest.dir/test/assignment1/Test_assignment_validate.c.o
[ 60%] Building C object assignment-autotest/CMakeFiles/assignment-autotest.dir/test/assignment1/Test_hello_Runner.c.o
[ 70%] Building C object assignment-autotest/CMakeFiles/assignment-autotest.dir/test/assignment1/Test_assignment_validate_Runner.c.o
[ 80%] Building C object assignment-autotest/CMakeFiles/assignment-autotest.dir/__/examples/autotest-validate/autotest-validate.c.o
[ 90%] Building C object assignment-autotest/CMakeFiles/assignment-autotest.dir/test/unity_runner.c.o
[100%] Linking C executable assignment-autotest
[100%] Built target assignment-autotest
/home/linux-o-phile/assignment-2-jainaneesh/assignment-autotest/test/assignment1/Test_hello.c:6:test_hello:INFO: Hello!  Your unity setup is working!
/home/linux-o-phile/assignment-2-jainaneesh/assignment-autotest/test/assignment1/Test_hello.c:4:test_hello:PASS

-----------------------
1 Tests 0 Failures 0 Ignored 
OK
/home/linux-o-phile/assignment-2-jainaneesh/assignment-autotest/test/assignment1/Test_assignment_validate.c:9:test_assignment_validate:PASS

-----------------------
1 Tests 0 Failures 0 Ignored 
OK
Executing assignment test script
~/assignment-2-jainaneesh/assignment-autotest/test/assignment2 ~/assignment-2-jainaneesh
~/assignment-2-jainaneesh/finder-app ~/assignment-2-jainaneesh/assignment-autotest/test/assignment2 ~/assignment-2-jainaneesh
rm -f writer *.o
gcc   -Wall -Wextra -o writer writer.c
Using default value AELD_IS_FUN for string to write
Using default value 10 for number of files to write
Writing 10 files containing string AELD_IS_FUN to /tmp/aeld-data
/tmp/aeld-data created
Removing the old writer utility and compiling as a native application
rm -f writer *.o
gcc   -Wall -Wextra -o writer writer.c
Running test with user linux-o-phile
-- Generating ;/home/linux-o-phile/assignment-2-jainaneesh/assignment-autotest/test/assignment1/Test_hello_Runner.c;/home/linux-o-phile/assignment-2-jainaneesh/assignment-autotest/test/assignment1/Test_assignment_validate_Runner.c from test/assignment1/Test_hello.c;test/assignment1/Test_assignment_validate.c
-- Building executable including ;/home/linux-o-phile/assignment-2-jainaneesh/assignment-autotest/test/assignment1/Test_hello_Runner.c;/home/linux-o-phile/assignment-2-jainaneesh/assignment-autotest/test/assignment1/Test_assignment_validate_Runner.c test/assignment1/Test_hello.c;test/assignment1/Test_assignment_validate.c and ../examples/autotest-validate/autotest-validate.c
-- Configuring done
-- Generating done
-- Build files have been written to: /home/linux-o-phile/assignment-2-jainaneesh/build
[ 10%] Building C object assignment-autotest/Unity/src/CMakeFiles/unity.dir/unity.c.o
[ 20%] Linking C static library libunity.a
[ 20%] Built target unity
[ 30%] Generating ../../assignment-autotest/test/assignment1/Test_hello_Runner.c, ../../assignment-autotest/test/assignment1/Test_assignment_validate_Runner.c, ../../assignment-autotest/test/unity_runner.c
Test files for auto dependency generation test/assignment1/Test_hello.c test/assignment1/Test_assignment_validate.c
Autogenerating runner for test/assignment1/Test_hello.c
Autogenerating runner for test/assignment1/Test_assignment_validate.c
Autogenerating test/unity_runner.c
Scanning dependencies of target assignment-autotest
[ 40%] Building C object assignment-autotest/CMakeFiles/assignment-autotest.dir/test/assignment1/Test_hello.c.o
[ 50%] Building C object assignment-autotest/CMakeFiles/assignment-autotest.dir/test/assignment1/Test_assignment_validate.c.o
[ 60%] Building C object assignment-autotest/CMakeFiles/assignment-autotest.dir/test/assignment1/Test_hello_Runner.c.o
[ 70%] Building C object assignment-autotest/CMakeFiles/assignment-autotest.dir/test/assignment1/Test_assignment_validate_Runner.c.o
[ 80%] Building C object assignment-autotest/CMakeFiles/assignment-autotest.dir/__/examples/autotest-validate/autotest-validate.c.o
[ 90%] Building C object assignment-autotest/CMakeFiles/assignment-autotest.dir/test/unity_runner.c.o
[100%] Linking C executable assignment-autotest
[100%] Built target assignment-autotest
/home/linux-o-phile/assignment-2-jainaneesh/assignment-autotest/test/assignment1/Test_hello.c:6:test_hello:INFO: Hello!  Your unity setup is working!
/home/linux-o-phile/assignment-2-jainaneesh/assignment-autotest/test/assignment1/Test_hello.c:4:test_hello:PASS

-----------------------
1 Tests 0 Failures 0 Ignored 
OK
/home/linux-o-phile/assignment-2-jainaneesh/assignment-autotest/test/assignment1/Test_assignment_validate.c:9:test_assignment_validate:PASS

-----------------------
1 Tests 0 Failures 0 Ignored 
OK
Executing assignment test script
~/assignment-2-jainaneesh/assignment-autotest/test/assignment2 ~/assignment-2-jainaneesh
~/assignment-2-jainaneesh/finder-app ~/assignment-2-jainaneesh/assignment-autotest/test/assignment2 ~/assignment-2-jainaneesh
rm -f writer *.o
gcc   -Wall -Wextra -o writer writer.c
Using default value AELD_IS_FUN for string to write
Using default value 10 for number of files to write
Writing 10 files containing string AELD_IS_FUN to /tmp/aeld-data
/tmp/aeld-data created
Removing the old writer utility and compiling as a native application
rm -f writer *.o
gcc   -Wall -Wextra -o writer writer.c
Running test with user linux-o-phile
-- Generating ;/home/linux-o-phile/assignment-2-jainaneesh/assignment-autotest/test/assignment1/Test_hello_Runner.c;/home/linux-o-phile/assignment-2-jainaneesh/assignment-autotest/test/assignment1/Test_assignment_validate_Runner.c from test/assignment1/Test_hello.c;test/assignment1/Test_assignment_validate.c
-- Building executable including ;/home/linux-o-phile/assignment-2-jainaneesh/assignment-autotest/test/assignment1/Test_hello_Runner.c;/home/linux-o-phile/assignment-2-jainaneesh/assignment-autotest/test/assignment1/Test_assignment_validate_Runner.c test/assignment1/Test_hello.c;test/assignment1/Test_assignment_validate.c and ../examples/autotest-validate/autotest-validate.c
-- Configuring done
-- Generating done
-- Build files have been written to: /home/linux-o-phile/assignment-2-jainaneesh/build
[ 10%] Building C object assignment-autotest/Unity/src/CMakeFiles/unity.dir/unity.c.o
[ 20%] Linking C static library libunity.a
[ 20%] Built target unity
[ 30%] Generating ../../assignment-autotest/test/assignment1/Test_hello_Runner.c, ../../assignment-autotest/test/assignment1/Test_assignment_validate_Runner.c, ../../assignment-autotest/test/unity_runner.c
Test files for auto dependency generation test/assignment1/Test_hello.c test/assignment1/Test_assignment_validate.c
Autogenerating runner for test/assignment1/Test_hello.c
Autogenerating runner for test/assignment1/Test_assignment_validate.c
Autogenerating test/unity_runner.c
Scanning dependencies of target assignment-autotest
[ 40%] Building C object assignment-autotest/CMakeFiles/assignment-autotest.dir/test/assignment1/Test_hello.c.o
[ 50%] Building C object assignment-autotest/CMakeFiles/assignment-autotest.dir/test/assignment1/Test_assignment_validate.c.o
[ 60%] Building C object assignment-autotest/CMakeFiles/assignment-autotest.dir/test/assignment1/Test_hello_Runner.c.o
[ 70%] Building C object assignment-autotest/CMakeFiles/assignment-autotest.dir/test/assignment1/Test_assignment_validate_Runner.c.o
[ 80%] Building C object assignment-autotest/CMakeFiles/assignment-autotest.dir/__/examples/autotest-validate/autotest-validate.c.o
[ 90%] Building C object assignment-autotest/CMakeFiles/assignment-autotest.dir/test/unity_runner.c.o
[100%] Linking C executable assignment-autotest
[100%] Built target assignment-autotest
/home/linux-o-phile/assignment-2-jainaneesh/assignment-autotest/test/assignment1/Test_hello.c:6:test_hello:INFO: Hello!  Your unity setup is working!
/home/linux-o-phile/assignment-2-jainaneesh/assignment-autotest/test/assignment1/Test_hello.c:4:test_hello:PASS

-----------------------
1 Tests 0 Failures 0 Ignored 
OK
/home/linux-o-phile/assignment-2-jainaneesh/assignment-autotest/test/assignment1/Test_assignment_validate.c:9:test_assignment_validate:PASS

-----------------------
1 Tests 0 Failures 0 Ignored 
OK
Executing assignment test script
~/assignment-2-jainaneesh/assignment-autotest/test/assignment2 ~/assignment-2-jainaneesh
~/assignment-2-jainaneesh/finder-app ~/assignment-2-jainaneesh/assignment-autotest/test/assignment2 ~/assignment-2-jainaneesh
rm -f writer *.o
gcc   -Wall -Wextra -o writer writer.c
Using default value AELD_IS_FUN for string to write
Using default value 10 for number of files to write
Writing 10 files containing string AELD_IS_FUN to /tmp/aeld-data
/tmp/aeld-data created
Removing the old writer utility and compiling as a native application
rm -f writer *.o
gcc   -Wall -Wextra -o writer writer.c
The number of files are 10 and the number of matching lines are 10
success
Test of assignment assignment2 complete with success
Running test with user linux-o-phile
-- Generating ;/home/linux-o-phile/assignment-2-jainaneesh/assignment-autotest/test/assignment1/Test_hello_Runner.c;/home/linux-o-phile/assignment-2-jainaneesh/assignment-autotest/test/assignment1/Test_assignment_validate_Runner.c from test/assignment1/Test_hello.c;test/assignment1/Test_assignment_validate.c
-- Building executable including ;/home/linux-o-phile/assignment-2-jainaneesh/assignment-autotest/test/assignment1/Test_hello_Runner.c;/home/linux-o-phile/assignment-2-jainaneesh/assignment-autotest/test/assignment1/Test_assignment_validate_Runner.c test/assignment1/Test_hello.c;test/assignment1/Test_assignment_validate.c and ../examples/autotest-validate/autotest-validate.c
-- Configuring done
-- Generating done
-- Build files have been written to: /home/linux-o-phile/assignment-2-jainaneesh/build
[ 10%] Building C object assignment-autotest/Unity/src/CMakeFiles/unity.dir/unity.c.o
[ 20%] Linking C static library libunity.a
[ 20%] Built target unity
[ 30%] Generating ../../assignment-autotest/test/assignment1/Test_hello_Runner.c, ../../assignment-autotest/test/assignment1/Test_assignment_validate_Runner.c, ../../assignment-autotest/test/unity_runner.c
Test files for auto dependency generation test/assignment1/Test_hello.c test/assignment1/Test_assignment_validate.c
Autogenerating runner for test/assignment1/Test_hello.c
Autogenerating runner for test/assignment1/Test_assignment_validate.c
Autogenerating test/unity_runner.c
Scanning dependencies of target assignment-autotest
[ 40%] Building C object assignment-autotest/CMakeFiles/assignment-autotest.dir/test/assignment1/Test_hello.c.o
[ 50%] Building C object assignment-autotest/CMakeFiles/assignment-autotest.dir/test/assignment1/Test_assignment_validate.c.o
[ 60%] Building C object assignment-autotest/CMakeFiles/assignment-autotest.dir/test/assignment1/Test_hello_Runner.c.o
[ 70%] Building C object assignment-autotest/CMakeFiles/assignment-autotest.dir/test/assignment1/Test_assignment_validate_Runner.c.o
[ 80%] Building C object assignment-autotest/CMakeFiles/assignment-autotest.dir/__/examples/autotest-validate/autotest-validate.c.o
[ 90%] Building C object assignment-autotest/CMakeFiles/assignment-autotest.dir/test/unity_runner.c.o
[100%] Linking C executable assignment-autotest
[100%] Built target assignment-autotest
/home/linux-o-phile/assignment-2-jainaneesh/assignment-autotest/test/assignment1/Test_hello.c:6:test_hello:INFO: Hello!  Your unity setup is working!
/home/linux-o-phile/assignment-2-jainaneesh/assignment-autotest/test/assignment1/Test_hello.c:4:test_hello:PASS

-----------------------
1 Tests 0 Failures 0 Ignored 
OK
/home/linux-o-phile/assignment-2-jainaneesh/assignment-autotest/test/assignment1/Test_assignment_validate.c:9:test_assignment_validate:PASS

-----------------------
1 Tests 0 Failures 0 Ignored 
OK
Executing assignment test script
~/assignment-2-jainaneesh/assignment-autotest/test/assignment2 ~/assignment-2-jainaneesh
~/assignment-2-jainaneesh/finder-app ~/assignment-2-jainaneesh/assignment-autotest/test/assignment2 ~/assignment-2-jainaneesh
rm -f writer *.o
gcc   -Wall -Wextra -o writer writer.c
Using default value AELD_IS_FUN for string to write
Using default value 10 for number of files to write
Writing 10 files containing string AELD_IS_FUN to /tmp/aeld-data
/tmp/aeld-data created
Removing the old writer utility and compiling as a native application
rm -f writer *.o
gcc   -Wall -Wextra -o writer writer.c
Running test with user linux-o-phile
-- Generating ;/home/linux-o-phile/assignment-2-jainaneesh/assignment-autotest/test/assignment1/Test_hello_Runner.c;/home/linux-o-phile/assignment-2-jainaneesh/assignment-autotest/test/assignment1/Test_assignment_validate_Runner.c from test/assignment1/Test_hello.c;test/assignment1/Test_assignment_validate.c
-- Building executable including ;/home/linux-o-phile/assignment-2-jainaneesh/assignment-autotest/test/assignment1/Test_hello_Runner.c;/home/linux-o-phile/assignment-2-jainaneesh/assignment-autotest/test/assignment1/Test_assignment_validate_Runner.c test/assignment1/Test_hello.c;test/assignment1/Test_assignment_validate.c and ../examples/autotest-validate/autotest-validate.c
-- Configuring done
-- Generating done
-- Build files have been written to: /home/linux-o-phile/assignment-2-jainaneesh/build
[ 10%] Building C object assignment-autotest/Unity/src/CMakeFiles/unity.dir/unity.c.o
[ 20%] Linking C static library libunity.a
[ 20%] Built target unity
[ 30%] Generating ../../assignment-autotest/test/assignment1/Test_hello_Runner.c, ../../assignment-autotest/test/assignment1/Test_assignment_validate_Runner.c, ../../assignment-autotest/test/unity_runner.c
Test files for auto dependency generation test/assignment1/Test_hello.c test/assignment1/Test_assignment_validate.c
Autogenerating runner for test/assignment1/Test_hello.c
Autogenerating runner for test/assignment1/Test_assignment_validate.c
Autogenerating test/unity_runner.c
Scanning dependencies of target assignment-autotest
[ 40%] Building C object assignment-autotest/CMakeFiles/assignment-autotest.dir/test/assignment1/Test_hello.c.o
[ 50%] Building C object assignment-autotest/CMakeFiles/assignment-autotest.dir/test/assignment1/Test_assignment_validate.c.o
[ 60%] Building C object assignment-autotest/CMakeFiles/assignment-autotest.dir/test/assignment1/Test_hello_Runner.c.o
[ 70%] Building C object assignment-autotest/CMakeFiles/assignment-autotest.dir/test/assignment1/Test_assignment_validate_Runner.c.o
[ 80%] Building C object assignment-autotest/CMakeFiles/assignment-autotest.dir/__/examples/autotest-validate/autotest-validate.c.o
[ 90%] Building C object assignment-autotest/CMakeFiles/assignment-autotest.dir/test/unity_runner.c.o
[100%] Linking C executable assignment-autotest
[100%] Built target assignment-autotest
/home/linux-o-phile/assignment-2-jainaneesh/assignment-autotest/test/assignment1/Test_hello.c:6:test_hello:INFO: Hello!  Your unity setup is working!
/home/linux-o-phile/assignment-2-jainaneesh/assignment-autotest/test/assignment1/Test_hello.c:4:test_hello:PASS

-----------------------
1 Tests 0 Failures 0 Ignored 
OK
/home/linux-o-phile/assignment-2-jainaneesh/assignment-autotest/test/assignment1/Test_assignment_validate.c:9:test_assignment_validate:PASS

-----------------------
1 Tests 0 Failures 0 Ignored 
OK
Executing assignment test script
~/assignment-2-jainaneesh/assignment-autotest/test/assignment2 ~/assignment-2-jainaneesh
~/assignment-2-jainaneesh/finder-app ~/assignment-2-jainaneesh/assignment-autotest/test/assignment2 ~/assignment-2-jainaneesh
rm -f writer *.o
gcc   -Wall -Wextra -o writer writer.c
Using default value AELD_IS_FUN for string to write
Using default value 10 for number of files to write
Writing 10 files containing string AELD_IS_FUN to /tmp/aeld-data
/tmp/aeld-data created
Removing the old writer utility and compiling as a native application
rm -f writer *.o
gcc   -Wall -Wextra -o writer writer.c
Running test with user linux-o-phile
-- Generating ;/home/linux-o-phile/assignment-2-jainaneesh/assignment-autotest/test/assignment1/Test_hello_Runner.c;/home/linux-o-phile/assignment-2-jainaneesh/assignment-autotest/test/assignment1/Test_assignment_validate_Runner.c from test/assignment1/Test_hello.c;test/assignment1/Test_assignment_validate.c
-- Building executable including ;/home/linux-o-phile/assignment-2-jainaneesh/assignment-autotest/test/assignment1/Test_hello_Runner.c;/home/linux-o-phile/assignment-2-jainaneesh/assignment-autotest/test/assignment1/Test_assignment_validate_Runner.c test/assignment1/Test_hello.c;test/assignment1/Test_assignment_validate.c and ../examples/autotest-validate/autotest-validate.c
-- Configuring done
-- Generating done
-- Build files have been written to: /home/linux-o-phile/assignment-2-jainaneesh/build
[ 10%] Building C object assignment-autotest/Unity/src/CMakeFiles/unity.dir/unity.c.o
[ 20%] Linking C static library libunity.a
[ 20%] Built target unity
[ 30%] Generating ../../assignment-autotest/test/assignment1/Test_hello_Runner.c, ../../assignment-autotest/test/assignment1/Test_assignment_validate_Runner.c, ../../assignment-autotest/test/unity_runner.c
Test files for auto dependency generation test/assignment1/Test_hello.c test/assignment1/Test_assignment_validate.c
Autogenerating runner for test/assignment1/Test_hello.c
Autogenerating runner for test/assignment1/Test_assignment_validate.c
Autogenerating test/unity_runner.c
Scanning dependencies of target assignment-autotest
[ 40%] Building C object assignment-autotest/CMakeFiles/assignment-autotest.dir/test/assignment1/Test_hello.c.o
[ 50%] Building C object assignment-autotest/CMakeFiles/assignment-autotest.dir/test/assignment1/Test_assignment_validate.c.o
[ 60%] Building C object assignment-autotest/CMakeFiles/assignment-autotest.dir/test/assignment1/Test_hello_Runner.c.o
[ 70%] Building C object assignment-autotest/CMakeFiles/assignment-autotest.dir/test/assignment1/Test_assignment_validate_Runner.c.o
[ 80%] Building C object assignment-autotest/CMakeFiles/assignment-autotest.dir/__/examples/autotest-validate/autotest-validate.c.o
[ 90%] Building C object assignment-autotest/CMakeFiles/assignment-autotest.dir/test/unity_runner.c.o
[100%] Linking C executable assignment-autotest
[100%] Built target assignment-autotest
/home/linux-o-phile/assignment-2-jainaneesh/assignment-autotest/test/assignment1/Test_hello.c:6:test_hello:INFO: Hello!  Your unity setup is working!
/home/linux-o-phile/assignment-2-jainaneesh/assignment-autotest/test/assignment1/Test_hello.c:4:test_hello:PASS

-----------------------
1 Tests 0 Failures 0 Ignored 
OK
/home/linux-o-phile/assignment-2-jainaneesh/assignment-autotest/test/assignment1/Test_assignment_validate.c:9:test_assignment_validate:PASS

-----------------------
1 Tests 0 Failures 0 Ignored 
OK
Executing assignment test script
~/assignment-2-jainaneesh/assignment-autotest/test/assignment2 ~/assignment-2-jainaneesh
~/assignment-2-jainaneesh/finder-app ~/assignment-2-jainaneesh/assignment-autotest/test/assignment2 ~/assignment-2-jainaneesh
rm -f writer *.o
gcc   -Wall -Wextra -o writer writer.c
Using default value AELD_IS_FUN for string to write
Using default value 10 for number of files to write
Writing 10 files containing string AELD_IS_FUN to /tmp/aeld-data
/tmp/aeld-data created
Removing the old writer utility and compiling as a native application
rm -f writer *.o
gcc   -Wall -Wextra -o writer writer.c
Running test with user linux-o-phile
-- Generating ;/home/linux-o-phile/assignment-2-jainaneesh/assignment-autotest/test/assignment1/Test_hello_Runner.c;/home/linux-o-phile/assignment-2-jainaneesh/assignment-autotest/test/assignment1/Test_assignment_validate_Runner.c from test/assignment1/Test_hello.c;test/assignment1/Test_assignment_validate.c
-- Building executable including ;/home/linux-o-phile/assignment-2-jainaneesh/assignment-autotest/test/assignment1/Test_hello_Runner.c;/home/linux-o-phile/assignment-2-jainaneesh/assignment-autotest/test/assignment1/Test_assignment_validate_Runner.c test/assignment1/Test_hello.c;test/assignment1/Test_assignment_validate.c and ../examples/autotest-validate/autotest-validate.c
-- Configuring done
-- Generating done
-- Build files have been written to: /home/linux-o-phile/assignment-2-jainaneesh/build
[ 10%] Building C object assignment-autotest/Unity/src/CMakeFiles/unity.dir/unity.c.o
[ 20%] Linking C static library libunity.a
[ 20%] Built target unity
[ 30%] Generating ../../assignment-autotest/test/assignment1/Test_hello_Runner.c, ../../assignment-autotest/test/assignment1/Test_assignment_validate_Runner.c, ../../assignment-autotest/test/unity_runner.c
Test files for auto dependency generation test/assignment1/Test_hello.c test/assignment1/Test_assignment_validate.c
Autogenerating runner for test/assignment1/Test_hello.c
Autogenerating runner for test/assignment1/Test_assignment_validate.c
Autogenerating test/unity_runner.c
Scanning dependencies of target assignment-autotest
[ 40%] Building C object assignment-autotest/CMakeFiles/assignment-autotest.dir/test/assignment1/Test_hello.c.o
[ 50%] Building C object assignment-autotest/CMakeFiles/assignment-autotest.dir/test/assignment1/Test_assignment_validate.c.o
[ 60%] Building C object assignment-autotest/CMakeFiles/assignment-autotest.dir/test/assignment1/Test_hello_Runner.c.o
[ 70%] Building C object assignment-autotest/CMakeFiles/assignment-autotest.dir/test/assignment1/Test_assignment_validate_Runner.c.o
[ 80%] Building C object assignment-autotest/CMakeFiles/assignment-autotest.dir/__/examples/autotest-validate/autotest-validate.c.o
[ 90%] Building C object assignment-autotest/CMakeFiles/assignment-autotest.dir/test/unity_runner.c.o
[100%] Linking C executable assignment-autotest
[100%] Built target assignment-autotest
/home/linux-o-phile/assignment-2-jainaneesh/assignment-autotest/test/assignment1/Test_hello.c:6:test_hello:INFO: Hello!  Your unity setup is working!
/home/linux-o-phile/assignment-2-jainaneesh/assignment-autotest/test/assignment1/Test_hello.c:4:test_hello:PASS

-----------------------
1 Tests 0 Failures 0 Ignored 
OK
/home/linux-o-phile/assignment-2-jainaneesh/assignment-autotest/test/assignment1/Test_assignment_validate.c:9:test_assignment_validate:PASS

-----------------------
1 Tests 0 Failures 0 Ignored 
OK
Executing assignment test script
~/assignment-2-jainaneesh/assignment-autotest/test/assignment2 ~/assignment-2-jainaneesh
~/assignment-2-jainaneesh/finder-app ~/assignment-2-jainaneesh/assignment-autotest/test/assignment2 ~/assignment-2-jainaneesh
rm -f writer *.o
gcc   -Wall -Wextra -o writer writer.c
Using default value AELD_IS_FUN for string to write
Using default value 10 for number of files to write
Writing 10 files containing string AELD_IS_FUN to /tmp/aeld-data
/tmp/aeld-data created
Removing the old writer utility and compiling as a native application
rm -f writer *.o
gcc   -Wall -Wextra -o writer writer.c
The number of files are 10 and the number of matching lines are 10
success
Test of assignment assignment2 complete with success
Running test with user linux-o-phile
-- Generating ;/home/linux-o-phile/assignment-2-jainaneesh/assignment-autotest/test/assignment1/Test_hello_Runner.c;/home/linux-o-phile/assignment-2-jainaneesh/assignment-autotest/test/assignment1/Test_assignment_validate_Runner.c from test/assignment1/Test_hello.c;test/assignment1/Test_assignment_validate.c
-- Building executable including ;/home/linux-o-phile/assignment-2-jainaneesh/assignment-autotest/test/assignment1/Test_hello_Runner.c;/home/linux-o-phile/assignment-2-jainaneesh/assignment-autotest/test/assignment1/Test_assignment_validate_Runner.c test/assignment1/Test_hello.c;test/assignment1/Test_assignment_validate.c and ../examples/autotest-validate/autotest-validate.c
-- Configuring done
-- Generating done
-- Build files have been written to: /home/linux-o-phile/assignment-2-jainaneesh/build
[ 10%] Building C object assignment-autotest/Unity/src/CMakeFiles/unity.dir/unity.c.o
[ 20%] Linking C static library libunity.a
[ 20%] Built target unity
[ 30%] Generating ../../assignment-autotest/test/assignment1/Test_hello_Runner.c, ../../assignment-autotest/test/assignment1/Test_assignment_validate_Runner.c, ../../assignment-autotest/test/unity_runner.c
Test files for auto dependency generation test/assignment1/Test_hello.c test/assignment1/Test_assignment_validate.c
Autogenerating runner for test/assignment1/Test_hello.c
Autogenerating runner for test/assignment1/Test_assignment_validate.c
Autogenerating test/unity_runner.c
Scanning dependencies of target assignment-autotest
[ 40%] Building C object assignment-autotest/CMakeFiles/assignment-autotest.dir/test/assignment1/Test_hello.c.o
[ 50%] Building C object assignment-autotest/CMakeFiles/assignment-autotest.dir/test/assignment1/Test_assignment_validate.c.o
[ 60%] Building C object assignment-autotest/CMakeFiles/assignment-autotest.dir/test/assignment1/Test_hello_Runner.c.o
[ 70%] Building C object assignment-autotest/CMakeFiles/assignment-autotest.dir/test/assignment1/Test_assignment_validate_Runner.c.o
[ 80%] Building C object assignment-autotest/CMakeFiles/assignment-autotest.dir/__/examples/autotest-validate/autotest-validate.c.o
[ 90%] Building C object assignment-autotest/CMakeFiles/assignment-autotest.dir/test/unity_runner.c.o
[100%] Linking C executable assignment-autotest
[100%] Built target assignment-autotest
/home/linux-o-phile/assignment-2-jainaneesh/assignment-autotest/test/assignment1/Test_hello.c:6:test_hello:INFO: Hello!  Your unity setup is working!
/home/linux-o-phile/assignment-2-jainaneesh/assignment-autotest/test/assignment1/Test_hello.c:4:test_hello:PASS

-----------------------
1 Tests 0 Failures 0 Ignored 
OK
/home/linux-o-phile/assignment-2-jainaneesh/assignment-autotest/test/assignment1/Test_assignment_validate.c:9:test_assignment_validate:PASS

-----------------------
1 Tests 0 Failures 0 Ignored 
OK
Executing assignment test script
~/assignment-2-jainaneesh/assignment-autotest/test/assignment5 ~/assignment-2-jainaneesh
~/assignment-2-jainaneesh/server ~/assignment-2-jainaneesh/assignment-autotest/test/assignment5 ~/assignment-2-jainaneesh
make: *** No rule to make target 'clean'.  Stop.
[0;31mValidation Error:make returned 2 attempting to build native application[0m
[0;31mValidation Error:starting aesdocket failed with 1[0m
~/assignment-2-jainaneesh/assignment-autotest/test/assignment5 ~/assignment-2-jainaneesh/server ~/assignment-2-jainaneesh/assignment-autotest/test/assignment5 ~/assignment-2-jainaneesh
~/assignment-2-jainaneesh/assignment-autotest/test/assignment5 ~/assignment-2-jainaneesh/assignment-autotest/test/assignment5 ~/assignment-2-jainaneesh/server ~/assignment-2-jainaneesh/assignment-autotest/test/assignment5 ~/assignment-2-jainaneesh
Testing target localhost on port 9000
sending string abcdefg to localhost on port 9000
Differences found after sending abcdefg to localhost on port 9000
Expected contents to match:
abcdefg
But found contents:
Hello, server
Hey its working
abcdefg
With differences
--- /tmp/tmp.nrjnXlfiYW	2025-02-08 14:46:52.107055040 -0500
+++ /tmp/tmp.r47sJ7rx9T	2025-02-08 14:46:52.107055040 -0500
@@ -1 +1,3 @@
+Hello, server
+Hey its working
 abcdefg
Test complete with failure
[0;31mValidation Error:sockettest.sh returned 1 attempting to run against native compiled aesdsocket instance[0m
~/assignment-2-jainaneesh/server ~/assignment-2-jainaneesh/assignment-autotest/test/assignment5 ~/assignment-2-jainaneesh
~/assignment-2-jainaneesh/assignment-autotest/test/assignment5 ~/assignment-2-jainaneesh
Waiting for aesdsocket application with pid 7323 to terminate
Re-running sockettest.sh with valgrind
~/assignment-2-jainaneesh/server ~/assignment-2-jainaneesh/assignment-autotest/test/assignment5 ~/assignment-2-jainaneesh
~/assignment-2-jainaneesh/assignment-autotest/test/assignment5 ~/assignment-2-jainaneesh/server ~/assignment-2-jainaneesh/assignment-autotest/test/assignment5 ~/assignment-2-jainaneesh
Waiting for aesdsocket application to start
Starting valgrind
script-helpers: line 505: valgrind: command not found
Valgrind and aesdsocket complete
[0;31mValidation Error:Valgrind failed with 127[0m
Valgrind output error log:
cat: valgrind-out.txt: No such file or directory
deleting marker file /tmp/tmp.k7gjHbToLI
~/assignment-2-jainaneesh/assignment-autotest/test/assignment5 ~/assignment-2-jainaneesh/assignment-autotest/test/assignment5 ~/assignment-2-jainaneesh/server ~/assignment-2-jainaneesh/assignment-autotest/test/assignment5 ~/assignment-2-jainaneesh
Testing target localhost on port 9000
sending string abcdefg to localhost on port 9000
Differences found after sending abcdefg to localhost on port 9000
Expected contents to match:
abcdefg
But found contents:
With differences
--- /tmp/tmp.bQAMorBckf	2025-02-08 14:46:55.223027505 -0500
+++ /tmp/tmp.QoArzGD6ii	2025-02-08 14:46:55.215027575 -0500
@@ -1 +0,0 @@
-abcdefg
Test complete with failure
[0;31mValidation Error:sockettest.sh returned 1 attempting to run against native compiled aesdsocket instance running under valgrind[0m
Stopping valgrind and aesdsocket process at pid 
kill: usage: kill [-s sigspec | -n signum | -sigspec] pid | jobspec ... or kill -l [sigspec]
Validation failed with error list :make returned 2 attempting to build native application:starting aesdocket failed with 1:sockettest.sh returned 1 attempting to run against native compiled aesdsocket instance:sockettest.sh returned 1 attempting to run against native compiled aesdsocket instance running under valgrind
Test of assignment assignment5 failed with rc=1
Running test with user linux-o-phile
-- Generating ;/home/linux-o-phile/assignment-2-jainaneesh/assignment-autotest/test/assignment1/Test_hello_Runner.c;/home/linux-o-phile/assignment-2-jainaneesh/assignment-autotest/test/assignment1/Test_assignment_validate_Runner.c from test/assignment1/Test_hello.c;test/assignment1/Test_assignment_validate.c
-- Building executable including ;/home/linux-o-phile/assignment-2-jainaneesh/assignment-autotest/test/assignment1/Test_hello_Runner.c;/home/linux-o-phile/assignment-2-jainaneesh/assignment-autotest/test/assignment1/Test_assignment_validate_Runner.c test/assignment1/Test_hello.c;test/assignment1/Test_assignment_validate.c and ../examples/autotest-validate/autotest-validate.c
-- Configuring done
-- Generating done
-- Build files have been written to: /home/linux-o-phile/assignment-2-jainaneesh/build
[ 10%] Building C object assignment-autotest/Unity/src/CMakeFiles/unity.dir/unity.c.o
[ 20%] Linking C static library libunity.a
[ 20%] Built target unity
[ 30%] Generating ../../assignment-autotest/test/assignment1/Test_hello_Runner.c, ../../assignment-autotest/test/assignment1/Test_assignment_validate_Runner.c, ../../assignment-autotest/test/unity_runner.c
Test files for auto dependency generation test/assignment1/Test_hello.c test/assignment1/Test_assignment_validate.c
Autogenerating runner for test/assignment1/Test_hello.c
Autogenerating runner for test/assignment1/Test_assignment_validate.c
Autogenerating test/unity_runner.c
Scanning dependencies of target assignment-autotest
[ 40%] Building C object assignment-autotest/CMakeFiles/assignment-autotest.dir/test/assignment1/Test_hello.c.o
[ 50%] Building C object assignment-autotest/CMakeFiles/assignment-autotest.dir/test/assignment1/Test_assignment_validate.c.o
[ 60%] Building C object assignment-autotest/CMakeFiles/assignment-autotest.dir/test/assignment1/Test_hello_Runner.c.o
[ 70%] Building C object assignment-autotest/CMakeFiles/assignment-autotest.dir/test/assignment1/Test_assignment_validate_Runner.c.o
[ 80%] Building C object assignment-autotest/CMakeFiles/assignment-autotest.dir/__/examples/autotest-validate/autotest-validate.c.o
[ 90%] Building C object assignment-autotest/CMakeFiles/assignment-autotest.dir/test/unity_runner.c.o
[100%] Linking C executable assignment-autotest
[100%] Built target assignment-autotest
/home/linux-o-phile/assignment-2-jainaneesh/assignment-autotest/test/assignment1/Test_hello.c:6:test_hello:INFO: Hello!  Your unity setup is working!
/home/linux-o-phile/assignment-2-jainaneesh/assignment-autotest/test/assignment1/Test_hello.c:4:test_hello:PASS

-----------------------
1 Tests 0 Failures 0 Ignored 
OK
/home/linux-o-phile/assignment-2-jainaneesh/assignment-autotest/test/assignment1/Test_assignment_validate.c:9:test_assignment_validate:PASS

-----------------------
1 Tests 0 Failures 0 Ignored 
OK
Executing assignment test script
~/assignment-2-jainaneesh/assignment-autotest/test/assignment5 ~/assignment-2-jainaneesh
~/assignment-2-jainaneesh/server ~/assignment-2-jainaneesh/assignment-autotest/test/assignment5 ~/assignment-2-jainaneesh
make: *** No rule to make target 'clean'.  Stop.
[0;31mValidation Error:make returned 2 attempting to build native application[0m
[0;31mValidation Error:starting aesdocket failed with 1[0m
~/assignment-2-jainaneesh/assignment-autotest/test/assignment5 ~/assignment-2-jainaneesh/server ~/assignment-2-jainaneesh/assignment-autotest/test/assignment5 ~/assignment-2-jainaneesh
~/assignment-2-jainaneesh/assignment-autotest/test/assignment5 ~/assignment-2-jainaneesh/assignment-autotest/test/assignment5 ~/assignment-2-jainaneesh/server ~/assignment-2-jainaneesh/assignment-autotest/test/assignment5 ~/assignment-2-jainaneesh
Testing target localhost on port 9000
sending string abcdefg to localhost on port 9000
Differences found after sending abcdefg to localhost on port 9000
Expected contents to match:
abcdefg
But found contents:
With differences
--- /tmp/tmp.VaekgYU4Br	2025-02-08 14:47:24.070779322 -0500
+++ /tmp/tmp.IXNi4ih04C	2025-02-08 14:47:24.066779356 -0500
@@ -1 +0,0 @@
-abcdefg
Test complete with failure
[0;31mValidation Error:sockettest.sh returned 1 attempting to run against native compiled aesdsocket instance[0m
kill: usage: kill [-s sigspec | -n signum | -sigspec] pid | jobspec ... or kill -l [sigspec]
~/assignment-2-jainaneesh/server ~/assignment-2-jainaneesh/assignment-autotest/test/assignment5 ~/assignment-2-jainaneesh
~/assignment-2-jainaneesh/assignment-autotest/test/assignment5 ~/assignment-2-jainaneesh
Waiting for aesdsocket application with pid  to terminate
kill: usage: kill [-s sigspec | -n signum | -sigspec] pid | jobspec ... or kill -l [sigspec]
error: List of process IDs must follow -q.

Usage:
 ps [options]

 Try 'ps --help <simple|list|output|threads|misc|all>'
  or 'ps --help <s|l|o|t|m|a>'
 for additional help text.

For more details see ps(1).
aesdsocket still running
kill: usage: kill [-s sigspec | -n signum | -sigspec] pid | jobspec ... or kill -l [sigspec]
error: List of process IDs must follow -q.

Usage:
 ps [options]

 Try 'ps --help <simple|list|output|threads|misc|all>'
  or 'ps --help <s|l|o|t|m|a>'
 for additional help text.

For more details see ps(1).
aesdsocket still running
kill: usage: kill [-s sigspec | -n signum | -sigspec] pid | jobspec ... or kill -l [sigspec]
error: List of process IDs must follow -q.

Usage:
 ps [options]

 Try 'ps --help <simple|list|output|threads|misc|all>'
  or 'ps --help <s|l|o|t|m|a>'
 for additional help text.

For more details see ps(1).
aesdsocket still running
kill: usage: kill [-s sigspec | -n signum | -sigspec] pid | jobspec ... or kill -l [sigspec]
error: List of process IDs must follow -q.

Usage:
 ps [options]

 Try 'ps --help <simple|list|output|threads|misc|all>'
  or 'ps --help <s|l|o|t|m|a>'
 for additional help text.

For more details see ps(1).
aesdsocket still running
kill: usage: kill [-s sigspec | -n signum | -sigspec] pid | jobspec ... or kill -l [sigspec]
error: List of process IDs must follow -q.

Usage:
 ps [options]

 Try 'ps --help <simple|list|output|threads|misc|all>'
  or 'ps --help <s|l|o|t|m|a>'
 for additional help text.

For more details see ps(1).
aesdsocket still running
kill: usage: kill [-s sigspec | -n signum | -sigspec] pid | jobspec ... or kill -l [sigspec]
error: List of process IDs must follow -q.

Usage:
 ps [options]

 Try 'ps --help <simple|list|output|threads|misc|all>'
  or 'ps --help <s|l|o|t|m|a>'
 for additional help text.

For more details see ps(1).
aesdsocket still running
kill: usage: kill [-s sigspec | -n signum | -sigspec] pid | jobspec ... or kill -l [sigspec]
error: List of process IDs must follow -q.

Usage:
 ps [options]

 Try 'ps --help <simple|list|output|threads|misc|all>'
  or 'ps --help <s|l|o|t|m|a>'
 for additional help text.

For more details see ps(1).
aesdsocket still running
kill: usage: kill [-s sigspec | -n signum | -sigspec] pid | jobspec ... or kill -l [sigspec]
error: List of process IDs must follow -q.

Usage:
 ps [options]

 Try 'ps --help <simple|list|output|threads|misc|all>'
  or 'ps --help <s|l|o|t|m|a>'
 for additional help text.

For more details see ps(1).
aesdsocket still running
kill: usage: kill [-s sigspec | -n signum | -sigspec] pid | jobspec ... or kill -l [sigspec]
error: List of process IDs must follow -q.

Usage:
 ps [options]

 Try 'ps --help <simple|list|output|threads|misc|all>'
  or 'ps --help <s|l|o|t|m|a>'
 for additional help text.

For more details see ps(1).
aesdsocket still running
kill: usage: kill [-s sigspec | -n signum | -sigspec] pid | jobspec ... or kill -l [sigspec]
error: List of process IDs must follow -q.

Usage:
 ps [options]

 Try 'ps --help <simple|list|output|threads|misc|all>'
  or 'ps --help <s|l|o|t|m|a>'
 for additional help text.

For more details see ps(1).
aesdsocket still running
kill: usage: kill [-s sigspec | -n signum | -sigspec] pid | jobspec ... or kill -l [sigspec]
error: List of process IDs must follow -q.

Usage:
 ps [options]

 Try 'ps --help <simple|list|output|threads|misc|all>'
  or 'ps --help <s|l|o|t|m|a>'
 for additional help text.

For more details see ps(1).
aesdsocket still running
kill: usage: kill [-s sigspec | -n signum | -sigspec] pid | jobspec ... or kill -l [sigspec]
error: List of process IDs must follow -q.

Usage:
 ps [options]

 Try 'ps --help <simple|list|output|threads|misc|all>'
  or 'ps --help <s|l|o|t|m|a>'
 for additional help text.

For more details see ps(1).
aesdsocket still running
kill: usage: kill [-s sigspec | -n signum | -sigspec] pid | jobspec ... or kill -l [sigspec]
error: List of process IDs must follow -q.

Usage:
 ps [options]

 Try 'ps --help <simple|list|output|threads|misc|all>'
  or 'ps --help <s|l|o|t|m|a>'
 for additional help text.

For more details see ps(1).
aesdsocket still running
kill: usage: kill [-s sigspec | -n signum | -sigspec] pid | jobspec ... or kill -l [sigspec]
error: List of process IDs must follow -q.

Usage:
 ps [options]

 Try 'ps --help <simple|list|output|threads|misc|all>'
  or 'ps --help <s|l|o|t|m|a>'
 for additional help text.

For more details see ps(1).
aesdsocket still running
kill: usage: kill [-s sigspec | -n signum | -sigspec] pid | jobspec ... or kill -l [sigspec]
error: List of process IDs must follow -q.

Usage:
 ps [options]

 Try 'ps --help <simple|list|output|threads|misc|all>'
  or 'ps --help <s|l|o|t|m|a>'
 for additional help text.

For more details see ps(1).
aesdsocket still running
kill: usage: kill [-s sigspec | -n signum | -sigspec] pid | jobspec ... or kill -l [sigspec]
error: List of process IDs must follow -q.

Usage:
 ps [options]

 Try 'ps --help <simple|list|output|threads|misc|all>'
  or 'ps --help <s|l|o|t|m|a>'
 for additional help text.

For more details see ps(1).
aesdsocket still running
Running test with user linux-o-phile
-- Generating ;/home/linux-o-phile/assignment-2-jainaneesh/assignment-autotest/test/assignment1/Test_hello_Runner.c;/home/linux-o-phile/assignment-2-jainaneesh/assignment-autotest/test/assignment1/Test_assignment_validate_Runner.c from test/assignment1/Test_hello.c;test/assignment1/Test_assignment_validate.c
-- Building executable including ;/home/linux-o-phile/assignment-2-jainaneesh/assignment-autotest/test/assignment1/Test_hello_Runner.c;/home/linux-o-phile/assignment-2-jainaneesh/assignment-autotest/test/assignment1/Test_assignment_validate_Runner.c test/assignment1/Test_hello.c;test/assignment1/Test_assignment_validate.c and ../examples/autotest-validate/autotest-validate.c
-- Configuring done
-- Generating done
-- Build files have been written to: /home/linux-o-phile/assignment-2-jainaneesh/build
[ 10%] Building C object assignment-autotest/Unity/src/CMakeFiles/unity.dir/unity.c.o
[ 20%] Linking C static library libunity.a
[ 20%] Built target unity
[ 30%] Generating ../../assignment-autotest/test/assignment1/Test_hello_Runner.c, ../../assignment-autotest/test/assignment1/Test_assignment_validate_Runner.c, ../../assignment-autotest/test/unity_runner.c
Test files for auto dependency generation test/assignment1/Test_hello.c test/assignment1/Test_assignment_validate.c
Autogenerating runner for test/assignment1/Test_hello.c
Autogenerating runner for test/assignment1/Test_assignment_validate.c
Autogenerating test/unity_runner.c
Scanning dependencies of target assignment-autotest
[ 40%] Building C object assignment-autotest/CMakeFiles/assignment-autotest.dir/test/assignment1/Test_hello.c.o
[ 50%] Building C object assignment-autotest/CMakeFiles/assignment-autotest.dir/test/assignment1/Test_assignment_validate.c.o
[ 60%] Building C object assignment-autotest/CMakeFiles/assignment-autotest.dir/test/assignment1/Test_hello_Runner.c.o
[ 70%] Building C object assignment-autotest/CMakeFiles/assignment-autotest.dir/test/assignment1/Test_assignment_validate_Runner.c.o
[ 80%] Building C object assignment-autotest/CMakeFiles/assignment-autotest.dir/__/examples/autotest-validate/autotest-validate.c.o
[ 90%] Building C object assignment-autotest/CMakeFiles/assignment-autotest.dir/test/unity_runner.c.o
[100%] Linking C executable assignment-autotest
[100%] Built target assignment-autotest
/home/linux-o-phile/assignment-2-jainaneesh/assignment-autotest/test/assignment1/Test_hello.c:6:test_hello:INFO: Hello!  Your unity setup is working!
/home/linux-o-phile/assignment-2-jainaneesh/assignment-autotest/test/assignment1/Test_hello.c:4:test_hello:PASS

-----------------------
1 Tests 0 Failures 0 Ignored 
OK
/home/linux-o-phile/assignment-2-jainaneesh/assignment-autotest/test/assignment1/Test_assignment_validate.c:9:test_assignment_validate:PASS

-----------------------
1 Tests 0 Failures 0 Ignored 
OK
Executing assignment test script
~/assignment-2-jainaneesh/assignment-autotest/test/assignment5 ~/assignment-2-jainaneesh
~/assignment-2-jainaneesh/server ~/assignment-2-jainaneesh/assignment-autotest/test/assignment5 ~/assignment-2-jainaneesh
rm -f server/aesdsocket aesdsocket.o
gcc -Wall -Wextra -g -o server/aesdsocket aesdsocket.c
aesdsocket.c: In function ‘cleanup_and_exit’:
aesdsocket.c:30:27: warning: unused parameter ‘signum’ [-Wunused-parameter]
   30 | void cleanup_and_exit(int signum)
      |                       ~~~~^~~~~~
/usr/bin/ld: cannot open output file server/aesdsocket: No such file or directory
collect2: error: ld returned 1 exit status
make: *** [Makefile:17: server/aesdsocket] Error 1
[0;31mValidation Error:make returned 2 attempting to build native application[0m
~/assignment-2-jainaneesh/assignment-autotest/test/assignment5 ~/assignment-2-jainaneesh/server ~/assignment-2-jainaneesh/assignment-autotest/test/assignment5 ~/assignment-2-jainaneesh
~/assignment-2-jainaneesh/assignment-autotest/test/assignment5 ~/assignment-2-jainaneesh/assignment-autotest/test/assignment5 ~/assignment-2-jainaneesh/server ~/assignment-2-jainaneesh/assignment-autotest/test/assignment5 ~/assignment-2-jainaneesh
Testing target localhost on port 9000
sending string abcdefg to localhost on port 9000
sending string hijklmnop to localhost on port 9000
sending string 1234567890 to localhost on port 9000
sending string 9876543210 to localhost on port 9000
Sending long string from long_string.txt file
sending string  to localhost on port 9000
Full contents sent:
abcdefg
hijklmnop
1234567890
9876543210

Tests complete with success!
~/assignment-2-jainaneesh/server ~/assignment-2-jainaneesh/assignment-autotest/test/assignment5 ~/assignment-2-jainaneesh
~/assignment-2-jainaneesh/assignment-autotest/test/assignment5 ~/assignment-2-jainaneesh
Waiting for aesdsocket application with pid 8147 to terminate
Re-running sockettest.sh with valgrind
~/assignment-2-jainaneesh/server ~/assignment-2-jainaneesh/assignment-autotest/test/assignment5 ~/assignment-2-jainaneesh
~/assignment-2-jainaneesh/assignment-autotest/test/assignment5 ~/assignment-2-jainaneesh/server ~/assignment-2-jainaneesh/assignment-autotest/test/assignment5 ~/assignment-2-jainaneesh
Waiting for aesdsocket application to start
Starting valgrind
script-helpers: line 505: valgrind: command not found
Valgrind and aesdsocket complete
[0;31mValidation Error:Valgrind failed with 127[0m
Valgrind output error log:
cat: valgrind-out.txt: No such file or directory
deleting marker file /tmp/tmp.KXJq0Ls40G
~/assignment-2-jainaneesh/assignment-autotest/test/assignment5 ~/assignment-2-jainaneesh/assignment-autotest/test/assignment5 ~/assignment-2-jainaneesh/server ~/assignment-2-jainaneesh/assignment-autotest/test/assignment5 ~/assignment-2-jainaneesh
Testing target localhost on port 9000
sending string abcdefg to localhost on port 9000
Differences found after sending abcdefg to localhost on port 9000
Expected contents to match:
abcdefg
But found contents:
With differences
--- /tmp/tmp.X9Sb5RdVGB	2025-02-08 14:56:23.043732364 -0500
+++ /tmp/tmp.cVwIlglbL3	2025-02-08 14:56:23.035732394 -0500
@@ -1 +0,0 @@
-abcdefg
Test complete with failure
[0;31mValidation Error:sockettest.sh returned 1 attempting to run against native compiled aesdsocket instance running under valgrind[0m
Stopping valgrind and aesdsocket process at pid 
kill: usage: kill [-s sigspec | -n signum | -sigspec] pid | jobspec ... or kill -l [sigspec]
Validation failed with error list :make returned 2 attempting to build native application:sockettest.sh returned 1 attempting to run against native compiled aesdsocket instance running under valgrind
Test of assignment assignment5 failed with rc=1
Running test with user linux-o-phile
-- Generating ;/home/linux-o-phile/assignment-2-jainaneesh/assignment-autotest/test/assignment1/Test_hello_Runner.c;/home/linux-o-phile/assignment-2-jainaneesh/assignment-autotest/test/assignment1/Test_assignment_validate_Runner.c from test/assignment1/Test_hello.c;test/assignment1/Test_assignment_validate.c
-- Building executable including ;/home/linux-o-phile/assignment-2-jainaneesh/assignment-autotest/test/assignment1/Test_hello_Runner.c;/home/linux-o-phile/assignment-2-jainaneesh/assignment-autotest/test/assignment1/Test_assignment_validate_Runner.c test/assignment1/Test_hello.c;test/assignment1/Test_assignment_validate.c and ../examples/autotest-validate/autotest-validate.c
-- Configuring done
-- Generating done
-- Build files have been written to: /home/linux-o-phile/assignment-2-jainaneesh/build
[ 10%] Building C object assignment-autotest/Unity/src/CMakeFiles/unity.dir/unity.c.o
[ 20%] Linking C static library libunity.a
[ 20%] Built target unity
[ 30%] Generating ../../assignment-autotest/test/assignment1/Test_hello_Runner.c, ../../assignment-autotest/test/assignment1/Test_assignment_validate_Runner.c, ../../assignment-autotest/test/unity_runner.c
Test files for auto dependency generation test/assignment1/Test_hello.c test/assignment1/Test_assignment_validate.c
Autogenerating runner for test/assignment1/Test_hello.c
Autogenerating runner for test/assignment1/Test_assignment_validate.c
Autogenerating test/unity_runner.c
Scanning dependencies of target assignment-autotest
[ 40%] Building C object assignment-autotest/CMakeFiles/assignment-autotest.dir/test/assignment1/Test_hello.c.o
[ 50%] Building C object assignment-autotest/CMakeFiles/assignment-autotest.dir/test/assignment1/Test_assignment_validate.c.o
[ 60%] Building C object assignment-autotest/CMakeFiles/assignment-autotest.dir/test/assignment1/Test_hello_Runner.c.o
[ 70%] Building C object assignment-autotest/CMakeFiles/assignment-autotest.dir/test/assignment1/Test_assignment_validate_Runner.c.o
[ 80%] Building C object assignment-autotest/CMakeFiles/assignment-autotest.dir/__/examples/autotest-validate/autotest-validate.c.o
[ 90%] Building C object assignment-autotest/CMakeFiles/assignment-autotest.dir/test/unity_runner.c.o
[100%] Linking C executable assignment-autotest
[100%] Built target assignment-autotest
/home/linux-o-phile/assignment-2-jainaneesh/assignment-autotest/test/assignment1/Test_hello.c:6:test_hello:INFO: Hello!  Your unity setup is working!
/home/linux-o-phile/assignment-2-jainaneesh/assignment-autotest/test/assignment1/Test_hello.c:4:test_hello:PASS

-----------------------
1 Tests 0 Failures 0 Ignored 
OK
/home/linux-o-phile/assignment-2-jainaneesh/assignment-autotest/test/assignment1/Test_assignment_validate.c:9:test_assignment_validate:PASS

-----------------------
1 Tests 0 Failures 0 Ignored 
OK
Executing assignment test script
~/assignment-2-jainaneesh/assignment-autotest/test/assignment5 ~/assignment-2-jainaneesh
~/assignment-2-jainaneesh/server ~/assignment-2-jainaneesh/assignment-autotest/test/assignment5 ~/assignment-2-jainaneesh
rm -f server/aesdsocket aesdsocket.o
gcc -Wall -Wextra -g -o server/aesdsocket aesdsocket.c
aesdsocket.c: In function ‘cleanup_and_exit’:
aesdsocket.c:30:27: warning: unused parameter ‘signum’ [-Wunused-parameter]
   30 | void cleanup_and_exit(int signum)
      |                       ~~~~^~~~~~
/usr/bin/ld: cannot open output file server/aesdsocket: No such file or directory
collect2: error: ld returned 1 exit status
make: *** [Makefile:17: server/aesdsocket] Error 1
[0;31mValidation Error:make returned 2 attempting to build native application[0m
~/assignment-2-jainaneesh/assignment-autotest/test/assignment5 ~/assignment-2-jainaneesh/server ~/assignment-2-jainaneesh/assignment-autotest/test/assignment5 ~/assignment-2-jainaneesh
~/assignment-2-jainaneesh/assignment-autotest/test/assignment5 ~/assignment-2-jainaneesh/assignment-autotest/test/assignment5 ~/assignment-2-jainaneesh/server ~/assignment-2-jainaneesh/assignment-autotest/test/assignment5 ~/assignment-2-jainaneesh
Testing target localhost on port 9000
sending string abcdefg to localhost on port 9000
sending string hijklmnop to localhost on port 9000
sending string 1234567890 to localhost on port 9000
sending string 9876543210 to localhost on port 9000
Sending long string from long_string.txt file
sending string  to localhost on port 9000
Full contents sent:
abcdefg
hijklmnop
1234567890
9876543210

Tests complete with success!
~/assignment-2-jainaneesh/server ~/assignment-2-jainaneesh/assignment-autotest/test/assignment5 ~/assignment-2-jainaneesh
~/assignment-2-jainaneesh/assignment-autotest/test/assignment5 ~/assignment-2-jainaneesh
Waiting for aesdsocket application with pid 8805 to terminate
Re-running sockettest.sh with valgrind
~/assignment-2-jainaneesh/server ~/assignment-2-jainaneesh/assignment-autotest/test/assignment5 ~/assignment-2-jainaneesh
~/assignment-2-jainaneesh/assignment-autotest/test/assignment5 ~/assignment-2-jainaneesh/server ~/assignment-2-jainaneesh/assignment-autotest/test/assignment5 ~/assignment-2-jainaneesh
Waiting for aesdsocket application to start
Starting valgrind
Valgrind and aesdsocket complete
[0;31mValidation Error:Valgrind failed with 1[0m
Valgrind output error log:
==8861== Memcheck, a memory error detector
==8861== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==8861== Using Valgrind-3.15.0-608cb11914-20190413 and LibVEX; rerun with -h for copyright info
==8861== Command: ./aesdsocket
==8861== Parent PID: 8859
==8861== 
--8861-- 
--8861-- Valgrind options:
--8861--    --error-exitcode=1
--8861--    --leak-check=full
--8861--    --show-leak-kinds=all
--8861--    --track-origins=yes
--8861--    --errors-for-leak-kinds=definite
--8861--    --verbose
--8861--    --log-file=valgrind-out.txt
--8861-- Contents of /proc/version:
--8861--   Linux version 5.15.0-131-generic (buildd@lcy02-amd64-072) (gcc (Ubuntu 9.4.0-1ubuntu1~20.04.2) 9.4.0, GNU ld (GNU Binutils for Ubuntu) 2.34) #141~20.04.1-Ubuntu SMP Thu Jan 16 18:38:51 UTC 2025
--8861-- 
--8861-- Arch and hwcaps: AMD64, LittleEndian, amd64-cx16-lzcnt-rdtscp-sse3-ssse3-avx-avx2-bmi-f16c-rdrand
--8861-- Page sizes: currently 4096, max supported 4096
--8861-- Valgrind library directory: /usr/lib/x86_64-linux-gnu/valgrind
--8861-- Reading syms from /home/linux-o-phile/assignment-2-jainaneesh/server/aesdsocket
--8861-- Reading syms from /usr/lib/x86_64-linux-gnu/ld-2.31.so
--8861--   Considering /usr/lib/debug/.build-id/cb/904567e1b2a460b6fc20817776ad590d265686.debug ..
--8861--   .. build-id is valid
--8861-- Reading syms from /usr/lib/x86_64-linux-gnu/valgrind/memcheck-amd64-linux
--8861--    object doesn't have a symbol table
--8861--    object doesn't have a dynamic symbol table
--8861-- Scheduler: using generic scheduler lock implementation.
--8861-- Reading suppressions file: /usr/lib/x86_64-linux-gnu/valgrind/default.supp
==8861== embedded gdbserver: reading from /tmp/vgdb-pipe-from-vgdb-to-8861-by-linux-o-phile-on-???
==8861== embedded gdbserver: writing to   /tmp/vgdb-pipe-to-vgdb-from-8861-by-linux-o-phile-on-???
==8861== embedded gdbserver: shared mem   /tmp/vgdb-pipe-shared-mem-vgdb-8861-by-linux-o-phile-on-???
==8861== 
==8861== TO CONTROL THIS PROCESS USING vgdb (which you probably
==8861== don't want to do, unless you know exactly what you're doing,
==8861== or are doing some strange experiment):
==8861==   /usr/lib/x86_64-linux-gnu/valgrind/../../bin/vgdb --pid=8861 ...command...
==8861== 
==8861== TO DEBUG THIS PROCESS USING GDB: start GDB like this
==8861==   /path/to/gdb ./aesdsocket
==8861== and then give GDB the following command
==8861==   target remote | /usr/lib/x86_64-linux-gnu/valgrind/../../bin/vgdb --pid=8861
==8861== --pid is optional if only one valgrind process is running
==8861== 
--8861-- REDIR: 0x4022e20 (ld-linux-x86-64.so.2:strlen) redirected to 0x580c9ce2 (???)
--8861-- REDIR: 0x4022bf0 (ld-linux-x86-64.so.2:index) redirected to 0x580c9cfc (???)
--8861-- Reading syms from /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_core-amd64-linux.so
--8861--    object doesn't have a symbol table
--8861-- Reading syms from /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so
--8861--    object doesn't have a symbol table
==8861== WARNING: new redirection conflicts with existing -- ignoring it
--8861--     old: 0x04022e20 (strlen              ) R-> (0000.0) 0x580c9ce2 ???
--8861--     new: 0x04022e20 (strlen              ) R-> (2007.0) 0x0483f060 strlen
--8861-- REDIR: 0x401f600 (ld-linux-x86-64.so.2:strcmp) redirected to 0x483ffd0 (strcmp)
--8861-- REDIR: 0x4023380 (ld-linux-x86-64.so.2:mempcpy) redirected to 0x4843a20 (mempcpy)
--8861-- Reading syms from /usr/lib/x86_64-linux-gnu/libc-2.31.so
--8861--   Considering /usr/lib/debug/.build-id/03/23ab4806bee6f846d9ad4bccfc29afdca49a58.debug ..
--8861--   .. build-id is valid
--8861-- REDIR: 0x48fd480 (libc.so.6:memmove) redirected to 0x48311d0 (_vgnU_ifunc_wrapper)
--8861-- REDIR: 0x48fc780 (libc.so.6:strncpy) redirected to 0x48311d0 (_vgnU_ifunc_wrapper)
--8861-- REDIR: 0x48fd7b0 (libc.so.6:strcasecmp) redirected to 0x48311d0 (_vgnU_ifunc_wrapper)
--8861-- REDIR: 0x48fc0a0 (libc.so.6:strcat) redirected to 0x48311d0 (_vgnU_ifunc_wrapper)
--8861-- REDIR: 0x48fc7e0 (libc.so.6:rindex) redirected to 0x48311d0 (_vgnU_ifunc_wrapper)
--8861-- REDIR: 0x48fec50 (libc.so.6:rawmemchr) redirected to 0x48311d0 (_vgnU_ifunc_wrapper)
--8861-- REDIR: 0x4919ce0 (libc.so.6:wmemchr) redirected to 0x48311d0 (_vgnU_ifunc_wrapper)
--8861-- REDIR: 0x4919820 (libc.so.6:wcscmp) redirected to 0x48311d0 (_vgnU_ifunc_wrapper)
--8861-- REDIR: 0x48fd5e0 (libc.so.6:mempcpy) redirected to 0x48311d0 (_vgnU_ifunc_wrapper)
--8861-- REDIR: 0x48fd410 (libc.so.6:bcmp) redirected to 0x48311d0 (_vgnU_ifunc_wrapper)
--8861-- REDIR: 0x48fc710 (libc.so.6:strncmp) redirected to 0x48311d0 (_vgnU_ifunc_wrapper)
--8861-- REDIR: 0x48fc150 (libc.so.6:strcmp) redirected to 0x48311d0 (_vgnU_ifunc_wrapper)
--8861-- REDIR: 0x48fd540 (libc.so.6:memset) redirected to 0x48311d0 (_vgnU_ifunc_wrapper)
--8861-- REDIR: 0x49197e0 (libc.so.6:wcschr) redirected to 0x48311d0 (_vgnU_ifunc_wrapper)
--8861-- REDIR: 0x48fc670 (libc.so.6:strnlen) redirected to 0x48311d0 (_vgnU_ifunc_wrapper)
--8861-- REDIR: 0x48fc230 (libc.so.6:strcspn) redirected to 0x48311d0 (_vgnU_ifunc_wrapper)
--8861-- REDIR: 0x48fd800 (libc.so.6:strncasecmp) redirected to 0x48311d0 (_vgnU_ifunc_wrapper)
--8861-- REDIR: 0x48fc1d0 (libc.so.6:strcpy) redirected to 0x48311d0 (_vgnU_ifunc_wrapper)
--8861-- REDIR: 0x48fd950 (libc.so.6:memcpy@@GLIBC_2.14) redirected to 0x48311d0 (_vgnU_ifunc_wrapper)
--8861-- REDIR: 0x491af50 (libc.so.6:wcsnlen) redirected to 0x48311d0 (_vgnU_ifunc_wrapper)
--8861-- REDIR: 0x4919860 (libc.so.6:wcscpy) redirected to 0x48311d0 (_vgnU_ifunc_wrapper)
--8861-- REDIR: 0x48fc820 (libc.so.6:strpbrk) redirected to 0x48311d0 (_vgnU_ifunc_wrapper)
--8861-- REDIR: 0x48fc100 (libc.so.6:index) redirected to 0x48311d0 (_vgnU_ifunc_wrapper)
--8861-- REDIR: 0x48fc630 (libc.so.6:strlen) redirected to 0x48311d0 (_vgnU_ifunc_wrapper)
--8861-- REDIR: 0x4905bb0 (libc.so.6:memrchr) redirected to 0x48311d0 (_vgnU_ifunc_wrapper)
--8861-- REDIR: 0x48fd850 (libc.so.6:strcasecmp_l) redirected to 0x48311d0 (_vgnU_ifunc_wrapper)
--8861-- REDIR: 0x48fd3d0 (libc.so.6:memchr) redirected to 0x48311d0 (_vgnU_ifunc_wrapper)
--8861-- REDIR: 0x4919930 (libc.so.6:wcslen) redirected to 0x48311d0 (_vgnU_ifunc_wrapper)
--8861-- REDIR: 0x48fcae0 (libc.so.6:strspn) redirected to 0x48311d0 (_vgnU_ifunc_wrapper)
--8861-- REDIR: 0x48fd750 (libc.so.6:stpncpy) redirected to 0x48311d0 (_vgnU_ifunc_wrapper)
--8861-- REDIR: 0x48fd6f0 (libc.so.6:stpcpy) redirected to 0x48311d0 (_vgnU_ifunc_wrapper)
--8861-- REDIR: 0x48fec90 (libc.so.6:strchrnul) redirected to 0x48311d0 (_vgnU_ifunc_wrapper)
--8861-- REDIR: 0x48fd8a0 (libc.so.6:strncasecmp_l) redirected to 0x48311d0 (_vgnU_ifunc_wrapper)
--8861-- REDIR: 0x49e5730 (libc.so.6:__strrchr_avx2) redirected to 0x483ea10 (rindex)
--8861-- REDIR: 0x48f70e0 (libc.so.6:malloc) redirected to 0x483b780 (malloc)
--8861-- REDIR: 0x48f8b10 (libc.so.6:calloc) redirected to 0x483dce0 (calloc)
--8861-- REDIR: 0x49e5540 (libc.so.6:__strchrnul_avx2) redirected to 0x4843540 (strchrnul)
--8861-- REDIR: 0x49e5900 (libc.so.6:__strlen_avx2) redirected to 0x483ef40 (strlen)
--8861-- REDIR: 0x48f76d0 (libc.so.6:free) redirected to 0x483c9d0 (free)
--8861-- REDIR: 0x49e8910 (libc.so.6:__memcpy_avx_unaligned_erms) redirected to 0x48429f0 (memmove)
--8861-- REDIR: 0x48fcfa0 (libc.so.6:__GI_strstr) redirected to 0x4843ca0 (__strstr_sse2)
--8861-- REDIR: 0x49e1ef0 (libc.so.6:__memcmp_avx2_movbe) redirected to 0x48421e0 (bcmp)
--8861-- REDIR: 0x49e0df0 (libc.so.6:__strcmp_avx2) redirected to 0x483fed0 (strcmp)
--8861-- REDIR: 0x49e8d90 (libc.so.6:__memset_avx2_unaligned_erms) redirected to 0x48428e0 (memset)
--8861-- REDIR: 0x48f7e80 (libc.so.6:realloc) redirected to 0x483df30 (realloc)
==8861== 
==8861== HEAP SUMMARY:
==8861==     in use at exit: 0 bytes in 0 blocks
==8861==   total heap usage: 12 allocs, 12 frees, 15,647 bytes allocated
==8861== 
==8861== All heap blocks were freed -- no leaks are possible
==8861== 
==8861== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
deleting marker file /tmp/tmp.IErusQUr9v
~/assignment-2-jainaneesh/assignment-autotest/test/assignment5 ~/assignment-2-jainaneesh/assignment-autotest/test/assignment5 ~/assignment-2-jainaneesh/server ~/assignment-2-jainaneesh/assignment-autotest/test/assignment5 ~/assignment-2-jainaneesh
Testing target localhost on port 9000
sending string abcdefg to localhost on port 9000
Differences found after sending abcdefg to localhost on port 9000
Expected contents to match:
abcdefg
But found contents:
With differences
--- /tmp/tmp.9BKWN0JYQm	2025-02-08 14:58:24.547314195 -0500
+++ /tmp/tmp.Ha9HDlERQL	2025-02-08 14:58:24.543314209 -0500
@@ -1 +0,0 @@
-abcdefg
Test complete with failure
[0;31mValidation Error:sockettest.sh returned 1 attempting to run against native compiled aesdsocket instance running under valgrind[0m
Stopping valgrind and aesdsocket process at pid 
kill: usage: kill [-s sigspec | -n signum | -sigspec] pid | jobspec ... or kill -l [sigspec]
Validation failed with error list :make returned 2 attempting to build native application:sockettest.sh returned 1 attempting to run against native compiled aesdsocket instance running under valgrind
Test of assignment assignment5 failed with rc=1
Running test with user linux-o-phile
-- Generating ;/home/linux-o-phile/assignment-2-jainaneesh/assignment-autotest/test/assignment1/Test_hello_Runner.c;/home/linux-o-phile/assignment-2-jainaneesh/assignment-autotest/test/assignment1/Test_assignment_validate_Runner.c from test/assignment1/Test_hello.c;test/assignment1/Test_assignment_validate.c
-- Building executable including ;/home/linux-o-phile/assignment-2-jainaneesh/assignment-autotest/test/assignment1/Test_hello_Runner.c;/home/linux-o-phile/assignment-2-jainaneesh/assignment-autotest/test/assignment1/Test_assignment_validate_Runner.c test/assignment1/Test_hello.c;test/assignment1/Test_assignment_validate.c and ../examples/autotest-validate/autotest-validate.c
-- Configuring done
-- Generating done
-- Build files have been written to: /home/linux-o-phile/assignment-2-jainaneesh/build
[ 10%] Building C object assignment-autotest/Unity/src/CMakeFiles/unity.dir/unity.c.o
[ 20%] Linking C static library libunity.a
[ 20%] Built target unity
[ 30%] Generating ../../assignment-autotest/test/assignment1/Test_hello_Runner.c, ../../assignment-autotest/test/assignment1/Test_assignment_validate_Runner.c, ../../assignment-autotest/test/unity_runner.c
Test files for auto dependency generation test/assignment1/Test_hello.c test/assignment1/Test_assignment_validate.c
Autogenerating runner for test/assignment1/Test_hello.c
Autogenerating runner for test/assignment1/Test_assignment_validate.c
Autogenerating test/unity_runner.c
Scanning dependencies of target assignment-autotest
[ 40%] Building C object assignment-autotest/CMakeFiles/assignment-autotest.dir/test/assignment1/Test_hello.c.o
[ 50%] Building C object assignment-autotest/CMakeFiles/assignment-autotest.dir/test/assignment1/Test_assignment_validate.c.o
[ 60%] Building C object assignment-autotest/CMakeFiles/assignment-autotest.dir/test/assignment1/Test_hello_Runner.c.o
[ 70%] Building C object assignment-autotest/CMakeFiles/assignment-autotest.dir/test/assignment1/Test_assignment_validate_Runner.c.o
[ 80%] Building C object assignment-autotest/CMakeFiles/assignment-autotest.dir/__/examples/autotest-validate/autotest-validate.c.o
[ 90%] Building C object assignment-autotest/CMakeFiles/assignment-autotest.dir/test/unity_runner.c.o
[100%] Linking C executable assignment-autotest
[100%] Built target assignment-autotest
/home/linux-o-phile/assignment-2-jainaneesh/assignment-autotest/test/assignment1/Test_hello.c:6:test_hello:INFO: Hello!  Your unity setup is working!
/home/linux-o-phile/assignment-2-jainaneesh/assignment-autotest/test/assignment1/Test_hello.c:4:test_hello:PASS

-----------------------
1 Tests 0 Failures 0 Ignored 
OK
/home/linux-o-phile/assignment-2-jainaneesh/assignment-autotest/test/assignment1/Test_assignment_validate.c:9:test_assignment_validate:PASS

-----------------------
1 Tests 0 Failures 0 Ignored 
OK
Executing assignment test script
~/assignment-2-jainaneesh/assignment-autotest/test/assignment5 ~/assignment-2-jainaneesh
~/assignment-2-jainaneesh/server ~/assignment-2-jainaneesh/assignment-autotest/test/assignment5 ~/assignment-2-jainaneesh
make: *** No rule to make target 'clean'.  Stop.
[0;31mValidation Error:make returned 2 attempting to build native application[0m
~/assignment-2-jainaneesh/assignment-autotest/test/assignment5 ~/assignment-2-jainaneesh/server ~/assignment-2-jainaneesh/assignment-autotest/test/assignment5 ~/assignment-2-jainaneesh
~/assignment-2-jainaneesh/assignment-autotest/test/assignment5 ~/assignment-2-jainaneesh/assignment-autotest/test/assignment5 ~/assignment-2-jainaneesh/server ~/assignment-2-jainaneesh/assignment-autotest/test/assignment5 ~/assignment-2-jainaneesh
Testing target localhost on port 9000
sending string abcdefg to localhost on port 9000
sending string hijklmnop to localhost on port 9000
sending string 1234567890 to localhost on port 9000
sending string 9876543210 to localhost on port 9000
Sending long string from long_string.txt file
sending string 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 to localhost on port 9000
Full contents sent:
abcdefg
hijklmnop
1234567890
9876543210

Tests complete with success!
~/assignment-2-jainaneesh/server ~/assignment-2-jainaneesh/assignment-autotest/test/assignment5 ~/assignment-2-jainaneesh
~/assignment-2-jainaneesh/assignment-autotest/test/assignment5 ~/assignment-2-jainaneesh
Waiting for aesdsocket application with pid 9055 to terminate
Re-running sockettest.sh with valgrind
~/assignment-2-jainaneesh/server ~/assignment-2-jainaneesh/assignment-autotest/test/assignment5 ~/assignment-2-jainaneesh
~/assignment-2-jainaneesh/assignment-autotest/test/assignment5 ~/assignment-2-jainaneesh/server ~/assignment-2-jainaneesh/assignment-autotest/test/assignment5 ~/assignment-2-jainaneesh
Waiting for aesdsocket application to start
Starting valgrind
Valgrind and aesdsocket complete
[0;31mValidation Error:Valgrind failed with 1[0m
Valgrind output error log:
==9111== Memcheck, a memory error detector
==9111== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==9111== Using Valgrind-3.15.0-608cb11914-20190413 and LibVEX; rerun with -h for copyright info
==9111== Command: ./aesdsocket
==9111== Parent PID: 9109
==9111== 
--9111-- 
--9111-- Valgrind options:
--9111--    --error-exitcode=1
--9111--    --leak-check=full
--9111--    --show-leak-kinds=all
--9111--    --track-origins=yes
--9111--    --errors-for-leak-kinds=definite
--9111--    --verbose
--9111--    --log-file=valgrind-out.txt
--9111-- Contents of /proc/version:
--9111--   Linux version 5.15.0-131-generic (buildd@lcy02-amd64-072) (gcc (Ubuntu 9.4.0-1ubuntu1~20.04.2) 9.4.0, GNU ld (GNU Binutils for Ubuntu) 2.34) #141~20.04.1-Ubuntu SMP Thu Jan 16 18:38:51 UTC 2025
--9111-- 
--9111-- Arch and hwcaps: AMD64, LittleEndian, amd64-cx16-lzcnt-rdtscp-sse3-ssse3-avx-avx2-bmi-f16c-rdrand
--9111-- Page sizes: currently 4096, max supported 4096
--9111-- Valgrind library directory: /usr/lib/x86_64-linux-gnu/valgrind
--9111-- Reading syms from /home/linux-o-phile/assignment-2-jainaneesh/server/aesdsocket
--9111-- Reading syms from /usr/lib/x86_64-linux-gnu/ld-2.31.so
--9111--   Considering /usr/lib/debug/.build-id/cb/904567e1b2a460b6fc20817776ad590d265686.debug ..
--9111--   .. build-id is valid
--9111-- Reading syms from /usr/lib/x86_64-linux-gnu/valgrind/memcheck-amd64-linux
--9111--    object doesn't have a symbol table
--9111--    object doesn't have a dynamic symbol table
--9111-- Scheduler: using generic scheduler lock implementation.
--9111-- Reading suppressions file: /usr/lib/x86_64-linux-gnu/valgrind/default.supp
==9111== embedded gdbserver: reading from /tmp/vgdb-pipe-from-vgdb-to-9111-by-linux-o-phile-on-???
==9111== embedded gdbserver: writing to   /tmp/vgdb-pipe-to-vgdb-from-9111-by-linux-o-phile-on-???
==9111== embedded gdbserver: shared mem   /tmp/vgdb-pipe-shared-mem-vgdb-9111-by-linux-o-phile-on-???
==9111== 
==9111== TO CONTROL THIS PROCESS USING vgdb (which you probably
==9111== don't want to do, unless you know exactly what you're doing,
==9111== or are doing some strange experiment):
==9111==   /usr/lib/x86_64-linux-gnu/valgrind/../../bin/vgdb --pid=9111 ...command...
==9111== 
==9111== TO DEBUG THIS PROCESS USING GDB: start GDB like this
==9111==   /path/to/gdb ./aesdsocket
==9111== and then give GDB the following command
==9111==   target remote | /usr/lib/x86_64-linux-gnu/valgrind/../../bin/vgdb --pid=9111
==9111== --pid is optional if only one valgrind process is running
==9111== 
--9111-- REDIR: 0x4022e20 (ld-linux-x86-64.so.2:strlen) redirected to 0x580c9ce2 (???)
--9111-- REDIR: 0x4022bf0 (ld-linux-x86-64.so.2:index) redirected to 0x580c9cfc (???)
--9111-- Reading syms from /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_core-amd64-linux.so
--9111--    object doesn't have a symbol table
--9111-- Reading syms from /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so
--9111--    object doesn't have a symbol table
==9111== WARNING: new redirection conflicts with existing -- ignoring it
--9111--     old: 0x04022e20 (strlen              ) R-> (0000.0) 0x580c9ce2 ???
--9111--     new: 0x04022e20 (strlen              ) R-> (2007.0) 0x0483f060 strlen
--9111-- REDIR: 0x401f600 (ld-linux-x86-64.so.2:strcmp) redirected to 0x483ffd0 (strcmp)
--9111-- REDIR: 0x4023380 (ld-linux-x86-64.so.2:mempcpy) redirected to 0x4843a20 (mempcpy)
--9111-- Reading syms from /usr/lib/x86_64-linux-gnu/libc-2.31.so
--9111--   Considering /usr/lib/debug/.build-id/03/23ab4806bee6f846d9ad4bccfc29afdca49a58.debug ..
--9111--   .. build-id is valid
--9111-- REDIR: 0x48fd480 (libc.so.6:memmove) redirected to 0x48311d0 (_vgnU_ifunc_wrapper)
--9111-- REDIR: 0x48fc780 (libc.so.6:strncpy) redirected to 0x48311d0 (_vgnU_ifunc_wrapper)
--9111-- REDIR: 0x48fd7b0 (libc.so.6:strcasecmp) redirected to 0x48311d0 (_vgnU_ifunc_wrapper)
--9111-- REDIR: 0x48fc0a0 (libc.so.6:strcat) redirected to 0x48311d0 (_vgnU_ifunc_wrapper)
--9111-- REDIR: 0x48fc7e0 (libc.so.6:rindex) redirected to 0x48311d0 (_vgnU_ifunc_wrapper)
--9111-- REDIR: 0x48fec50 (libc.so.6:rawmemchr) redirected to 0x48311d0 (_vgnU_ifunc_wrapper)
--9111-- REDIR: 0x4919ce0 (libc.so.6:wmemchr) redirected to 0x48311d0 (_vgnU_ifunc_wrapper)
--9111-- REDIR: 0x4919820 (libc.so.6:wcscmp) redirected to 0x48311d0 (_vgnU_ifunc_wrapper)
--9111-- REDIR: 0x48fd5e0 (libc.so.6:mempcpy) redirected to 0x48311d0 (_vgnU_ifunc_wrapper)
--9111-- REDIR: 0x48fd410 (libc.so.6:bcmp) redirected to 0x48311d0 (_vgnU_ifunc_wrapper)
--9111-- REDIR: 0x48fc710 (libc.so.6:strncmp) redirected to 0x48311d0 (_vgnU_ifunc_wrapper)
--9111-- REDIR: 0x48fc150 (libc.so.6:strcmp) redirected to 0x48311d0 (_vgnU_ifunc_wrapper)
--9111-- REDIR: 0x48fd540 (libc.so.6:memset) redirected to 0x48311d0 (_vgnU_ifunc_wrapper)
--9111-- REDIR: 0x49197e0 (libc.so.6:wcschr) redirected to 0x48311d0 (_vgnU_ifunc_wrapper)
--9111-- REDIR: 0x48fc670 (libc.so.6:strnlen) redirected to 0x48311d0 (_vgnU_ifunc_wrapper)
--9111-- REDIR: 0x48fc230 (libc.so.6:strcspn) redirected to 0x48311d0 (_vgnU_ifunc_wrapper)
--9111-- REDIR: 0x48fd800 (libc.so.6:strncasecmp) redirected to 0x48311d0 (_vgnU_ifunc_wrapper)
--9111-- REDIR: 0x48fc1d0 (libc.so.6:strcpy) redirected to 0x48311d0 (_vgnU_ifunc_wrapper)
--9111-- REDIR: 0x48fd950 (libc.so.6:memcpy@@GLIBC_2.14) redirected to 0x48311d0 (_vgnU_ifunc_wrapper)
--9111-- REDIR: 0x491af50 (libc.so.6:wcsnlen) redirected to 0x48311d0 (_vgnU_ifunc_wrapper)
--9111-- REDIR: 0x4919860 (libc.so.6:wcscpy) redirected to 0x48311d0 (_vgnU_ifunc_wrapper)
--9111-- REDIR: 0x48fc820 (libc.so.6:strpbrk) redirected to 0x48311d0 (_vgnU_ifunc_wrapper)
--9111-- REDIR: 0x48fc100 (libc.so.6:index) redirected to 0x48311d0 (_vgnU_ifunc_wrapper)
--9111-- REDIR: 0x48fc630 (libc.so.6:strlen) redirected to 0x48311d0 (_vgnU_ifunc_wrapper)
--9111-- REDIR: 0x4905bb0 (libc.so.6:memrchr) redirected to 0x48311d0 (_vgnU_ifunc_wrapper)
--9111-- REDIR: 0x48fd850 (libc.so.6:strcasecmp_l) redirected to 0x48311d0 (_vgnU_ifunc_wrapper)
--9111-- REDIR: 0x48fd3d0 (libc.so.6:memchr) redirected to 0x48311d0 (_vgnU_ifunc_wrapper)
--9111-- REDIR: 0x4919930 (libc.so.6:wcslen) redirected to 0x48311d0 (_vgnU_ifunc_wrapper)
--9111-- REDIR: 0x48fcae0 (libc.so.6:strspn) redirected to 0x48311d0 (_vgnU_ifunc_wrapper)
--9111-- REDIR: 0x48fd750 (libc.so.6:stpncpy) redirected to 0x48311d0 (_vgnU_ifunc_wrapper)
--9111-- REDIR: 0x48fd6f0 (libc.so.6:stpcpy) redirected to 0x48311d0 (_vgnU_ifunc_wrapper)
--9111-- REDIR: 0x48fec90 (libc.so.6:strchrnul) redirected to 0x48311d0 (_vgnU_ifunc_wrapper)
--9111-- REDIR: 0x48fd8a0 (libc.so.6:strncasecmp_l) redirected to 0x48311d0 (_vgnU_ifunc_wrapper)
--9111-- REDIR: 0x49e5730 (libc.so.6:__strrchr_avx2) redirected to 0x483ea10 (rindex)
--9111-- REDIR: 0x48f70e0 (libc.so.6:malloc) redirected to 0x483b780 (malloc)
--9111-- REDIR: 0x48f8b10 (libc.so.6:calloc) redirected to 0x483dce0 (calloc)
--9111-- REDIR: 0x49e5540 (libc.so.6:__strchrnul_avx2) redirected to 0x4843540 (strchrnul)
--9111-- REDIR: 0x49e5900 (libc.so.6:__strlen_avx2) redirected to 0x483ef40 (strlen)
--9111-- REDIR: 0x48f76d0 (libc.so.6:free) redirected to 0x483c9d0 (free)
--9111-- REDIR: 0x49e8910 (libc.so.6:__memcpy_avx_unaligned_erms) redirected to 0x48429f0 (memmove)
--9111-- REDIR: 0x48fcfa0 (libc.so.6:__GI_strstr) redirected to 0x4843ca0 (__strstr_sse2)
--9111-- REDIR: 0x49e1ef0 (libc.so.6:__memcmp_avx2_movbe) redirected to 0x48421e0 (bcmp)
--9111-- REDIR: 0x49e0df0 (libc.so.6:__strcmp_avx2) redirected to 0x483fed0 (strcmp)
--9111-- REDIR: 0x49e8d90 (libc.so.6:__memset_avx2_unaligned_erms) redirected to 0x48428e0 (memset)
--9111-- REDIR: 0x48f7e80 (libc.so.6:realloc) redirected to 0x483df30 (realloc)
==9111== 
==9111== HEAP SUMMARY:
==9111==     in use at exit: 0 bytes in 0 blocks
==9111==   total heap usage: 12 allocs, 12 frees, 15,647 bytes allocated
==9111== 
==9111== All heap blocks were freed -- no leaks are possible
==9111== 
==9111== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
deleting marker file /tmp/tmp.9DDW6MZbhn
~/assignment-2-jainaneesh/assignment-autotest/test/assignment5 ~/assignment-2-jainaneesh/assignment-autotest/test/assignment5 ~/assignment-2-jainaneesh/server ~/assignment-2-jainaneesh/assignment-autotest/test/assignment5 ~/assignment-2-jainaneesh
Testing target localhost on port 9000
sending string abcdefg to localhost on port 9000
Differences found after sending abcdefg to localhost on port 9000
Expected contents to match:
abcdefg
But found contents:
With differences
--- /tmp/tmp.OEntvhILA3	2025-02-08 15:03:17.818517887 -0500
+++ /tmp/tmp.Kv1LcIHQru	2025-02-08 15:03:17.810517905 -0500
@@ -1 +0,0 @@
-abcdefg
Test complete with failure
[0;31mValidation Error:sockettest.sh returned 1 attempting to run against native compiled aesdsocket instance running under valgrind[0m
Stopping valgrind and aesdsocket process at pid 
kill: usage: kill [-s sigspec | -n signum | -sigspec] pid | jobspec ... or kill -l [sigspec]
Validation failed with error list :make returned 2 attempting to build native application:sockettest.sh returned 1 attempting to run against native compiled aesdsocket instance running under valgrind
Test of assignment assignment5 failed with rc=1
Running test with user linux-o-phile
-- Generating ;/home/linux-o-phile/assignment-2-jainaneesh/assignment-autotest/test/assignment1/Test_hello_Runner.c;/home/linux-o-phile/assignment-2-jainaneesh/assignment-autotest/test/assignment1/Test_assignment_validate_Runner.c from test/assignment1/Test_hello.c;test/assignment1/Test_assignment_validate.c
-- Building executable including ;/home/linux-o-phile/assignment-2-jainaneesh/assignment-autotest/test/assignment1/Test_hello_Runner.c;/home/linux-o-phile/assignment-2-jainaneesh/assignment-autotest/test/assignment1/Test_assignment_validate_Runner.c test/assignment1/Test_hello.c;test/assignment1/Test_assignment_validate.c and ../examples/autotest-validate/autotest-validate.c
-- Configuring done
-- Generating done
-- Build files have been written to: /home/linux-o-phile/assignment-2-jainaneesh/build
[ 10%] Building C object assignment-autotest/Unity/src/CMakeFiles/unity.dir/unity.c.o
[ 20%] Linking C static library libunity.a
[ 20%] Built target unity
[ 30%] Generating ../../assignment-autotest/test/assignment1/Test_hello_Runner.c, ../../assignment-autotest/test/assignment1/Test_assignment_validate_Runner.c, ../../assignment-autotest/test/unity_runner.c
Test files for auto dependency generation test/assignment1/Test_hello.c test/assignment1/Test_assignment_validate.c
Autogenerating runner for test/assignment1/Test_hello.c
Autogenerating runner for test/assignment1/Test_assignment_validate.c
Autogenerating test/unity_runner.c
Scanning dependencies of target assignment-autotest
[ 40%] Building C object assignment-autotest/CMakeFiles/assignment-autotest.dir/test/assignment1/Test_hello.c.o
[ 50%] Building C object assignment-autotest/CMakeFiles/assignment-autotest.dir/test/assignment1/Test_assignment_validate.c.o
[ 60%] Building C object assignment-autotest/CMakeFiles/assignment-autotest.dir/test/assignment1/Test_hello_Runner.c.o
[ 70%] Building C object assignment-autotest/CMakeFiles/assignment-autotest.dir/test/assignment1/Test_assignment_validate_Runner.c.o
[ 80%] Building C object assignment-autotest/CMakeFiles/assignment-autotest.dir/__/examples/autotest-validate/autotest-validate.c.o
[ 90%] Building C object assignment-autotest/CMakeFiles/assignment-autotest.dir/test/unity_runner.c.o
[100%] Linking C executable assignment-autotest
[100%] Built target assignment-autotest
/home/linux-o-phile/assignment-2-jainaneesh/assignment-autotest/test/assignment1/Test_hello.c:6:test_hello:INFO: Hello!  Your unity setup is working!
/home/linux-o-phile/assignment-2-jainaneesh/assignment-autotest/test/assignment1/Test_hello.c:4:test_hello:PASS

-----------------------
1 Tests 0 Failures 0 Ignored 
OK
/home/linux-o-phile/assignment-2-jainaneesh/assignment-autotest/test/assignment1/Test_assignment_validate.c:9:test_assignment_validate:PASS

-----------------------
1 Tests 0 Failures 0 Ignored 
OK
Executing assignment test script
~/assignment-2-jainaneesh/assignment-autotest/test/assignment5 ~/assignment-2-jainaneesh
~/assignment-2-jainaneesh/server ~/assignment-2-jainaneesh/assignment-autotest/test/assignment5 ~/assignment-2-jainaneesh
rm -f server/aesdsocket aesdsocket.o
gcc -Wall -Wextra -g -o server/aesdsocket aesdsocket.c
aesdsocket.c: In function ‘cleanup_and_exit’:
aesdsocket.c:30:27: warning: unused parameter ‘signum’ [-Wunused-parameter]
   30 | void cleanup_and_exit(int signum)
      |                       ~~~~^~~~~~
/usr/bin/ld: cannot open output file server/aesdsocket: No such file or directory
collect2: error: ld returned 1 exit status
make: *** [Makefile:17: server/aesdsocket] Error 1
[0;31mValidation Error:make returned 2 attempting to build native application[0m
~/assignment-2-jainaneesh/assignment-autotest/test/assignment5 ~/assignment-2-jainaneesh/server ~/assignment-2-jainaneesh/assignment-autotest/test/assignment5 ~/assignment-2-jainaneesh
~/assignment-2-jainaneesh/assignment-autotest/test/assignment5 ~/assignment-2-jainaneesh/assignment-autotest/test/assignment5 ~/assignment-2-jainaneesh/server ~/assignment-2-jainaneesh/assignment-autotest/test/assignment5 ~/assignment-2-jainaneesh
Testing target localhost on port 9000
sending string abcdefg to localhost on port 9000
sending string hijklmnop to localhost on port 9000
sending string 1234567890 to localhost on port 9000
sending string 9876543210 to localhost on port 9000
Sending long string from long_string.txt file
sending string  to localhost on port 9000
Full contents sent:
abcdefg
hijklmnop
1234567890
9876543210

Tests complete with success!
~/assignment-2-jainaneesh/server ~/assignment-2-jainaneesh/assignment-autotest/test/assignment5 ~/assignment-2-jainaneesh
~/assignment-2-jainaneesh/assignment-autotest/test/assignment5 ~/assignment-2-jainaneesh
Waiting for aesdsocket application with pid 9481 to terminate
Re-running sockettest.sh with valgrind
~/assignment-2-jainaneesh/server ~/assignment-2-jainaneesh/assignment-autotest/test/assignment5 ~/assignment-2-jainaneesh
~/assignment-2-jainaneesh/assignment-autotest/test/assignment5 ~/assignment-2-jainaneesh/server ~/assignment-2-jainaneesh/assignment-autotest/test/assignment5 ~/assignment-2-jainaneesh
Waiting for aesdsocket application to start
Starting valgrind
Valgrind and aesdsocket complete
[0;31mValidation Error:Valgrind failed with 1[0m
Valgrind output error log:
==9537== Memcheck, a memory error detector
==9537== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==9537== Using Valgrind-3.15.0-608cb11914-20190413 and LibVEX; rerun with -h for copyright info
==9537== Command: ./aesdsocket
==9537== Parent PID: 9535
==9537== 
--9537-- 
--9537-- Valgrind options:
--9537--    --error-exitcode=1
--9537--    --leak-check=full
--9537--    --show-leak-kinds=all
--9537--    --track-origins=yes
--9537--    --errors-for-leak-kinds=definite
--9537--    --verbose
--9537--    --log-file=valgrind-out.txt
--9537-- Contents of /proc/version:
--9537--   Linux version 5.15.0-131-generic (buildd@lcy02-amd64-072) (gcc (Ubuntu 9.4.0-1ubuntu1~20.04.2) 9.4.0, GNU ld (GNU Binutils for Ubuntu) 2.34) #141~20.04.1-Ubuntu SMP Thu Jan 16 18:38:51 UTC 2025
--9537-- 
--9537-- Arch and hwcaps: AMD64, LittleEndian, amd64-cx16-lzcnt-rdtscp-sse3-ssse3-avx-avx2-bmi-f16c-rdrand
--9537-- Page sizes: currently 4096, max supported 4096
--9537-- Valgrind library directory: /usr/lib/x86_64-linux-gnu/valgrind
--9537-- Reading syms from /home/linux-o-phile/assignment-2-jainaneesh/server/aesdsocket
--9537-- Reading syms from /usr/lib/x86_64-linux-gnu/ld-2.31.so
--9537--   Considering /usr/lib/debug/.build-id/cb/904567e1b2a460b6fc20817776ad590d265686.debug ..
--9537--   .. build-id is valid
--9537-- Reading syms from /usr/lib/x86_64-linux-gnu/valgrind/memcheck-amd64-linux
--9537--    object doesn't have a symbol table
--9537--    object doesn't have a dynamic symbol table
--9537-- Scheduler: using generic scheduler lock implementation.
--9537-- Reading suppressions file: /usr/lib/x86_64-linux-gnu/valgrind/default.supp
==9537== embedded gdbserver: reading from /tmp/vgdb-pipe-from-vgdb-to-9537-by-linux-o-phile-on-???
==9537== embedded gdbserver: writing to   /tmp/vgdb-pipe-to-vgdb-from-9537-by-linux-o-phile-on-???
==9537== embedded gdbserver: shared mem   /tmp/vgdb-pipe-shared-mem-vgdb-9537-by-linux-o-phile-on-???
==9537== 
==9537== TO CONTROL THIS PROCESS USING vgdb (which you probably
==9537== don't want to do, unless you know exactly what you're doing,
==9537== or are doing some strange experiment):
==9537==   /usr/lib/x86_64-linux-gnu/valgrind/../../bin/vgdb --pid=9537 ...command...
==9537== 
==9537== TO DEBUG THIS PROCESS USING GDB: start GDB like this
==9537==   /path/to/gdb ./aesdsocket
==9537== and then give GDB the following command
==9537==   target remote | /usr/lib/x86_64-linux-gnu/valgrind/../../bin/vgdb --pid=9537
==9537== --pid is optional if only one valgrind process is running
==9537== 
--9537-- REDIR: 0x4022e20 (ld-linux-x86-64.so.2:strlen) redirected to 0x580c9ce2 (???)
--9537-- REDIR: 0x4022bf0 (ld-linux-x86-64.so.2:index) redirected to 0x580c9cfc (???)
--9537-- Reading syms from /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_core-amd64-linux.so
--9537--    object doesn't have a symbol table
--9537-- Reading syms from /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so
--9537--    object doesn't have a symbol table
==9537== WARNING: new redirection conflicts with existing -- ignoring it
--9537--     old: 0x04022e20 (strlen              ) R-> (0000.0) 0x580c9ce2 ???
--9537--     new: 0x04022e20 (strlen              ) R-> (2007.0) 0x0483f060 strlen
--9537-- REDIR: 0x401f600 (ld-linux-x86-64.so.2:strcmp) redirected to 0x483ffd0 (strcmp)
--9537-- REDIR: 0x4023380 (ld-linux-x86-64.so.2:mempcpy) redirected to 0x4843a20 (mempcpy)
--9537-- Reading syms from /usr/lib/x86_64-linux-gnu/libc-2.31.so
--9537--   Considering /usr/lib/debug/.build-id/03/23ab4806bee6f846d9ad4bccfc29afdca49a58.debug ..
--9537--   .. build-id is valid
--9537-- REDIR: 0x48fd480 (libc.so.6:memmove) redirected to 0x48311d0 (_vgnU_ifunc_wrapper)
--9537-- REDIR: 0x48fc780 (libc.so.6:strncpy) redirected to 0x48311d0 (_vgnU_ifunc_wrapper)
--9537-- REDIR: 0x48fd7b0 (libc.so.6:strcasecmp) redirected to 0x48311d0 (_vgnU_ifunc_wrapper)
--9537-- REDIR: 0x48fc0a0 (libc.so.6:strcat) redirected to 0x48311d0 (_vgnU_ifunc_wrapper)
--9537-- REDIR: 0x48fc7e0 (libc.so.6:rindex) redirected to 0x48311d0 (_vgnU_ifunc_wrapper)
--9537-- REDIR: 0x48fec50 (libc.so.6:rawmemchr) redirected to 0x48311d0 (_vgnU_ifunc_wrapper)
--9537-- REDIR: 0x4919ce0 (libc.so.6:wmemchr) redirected to 0x48311d0 (_vgnU_ifunc_wrapper)
--9537-- REDIR: 0x4919820 (libc.so.6:wcscmp) redirected to 0x48311d0 (_vgnU_ifunc_wrapper)
--9537-- REDIR: 0x48fd5e0 (libc.so.6:mempcpy) redirected to 0x48311d0 (_vgnU_ifunc_wrapper)
--9537-- REDIR: 0x48fd410 (libc.so.6:bcmp) redirected to 0x48311d0 (_vgnU_ifunc_wrapper)
--9537-- REDIR: 0x48fc710 (libc.so.6:strncmp) redirected to 0x48311d0 (_vgnU_ifunc_wrapper)
--9537-- REDIR: 0x48fc150 (libc.so.6:strcmp) redirected to 0x48311d0 (_vgnU_ifunc_wrapper)
--9537-- REDIR: 0x48fd540 (libc.so.6:memset) redirected to 0x48311d0 (_vgnU_ifunc_wrapper)
--9537-- REDIR: 0x49197e0 (libc.so.6:wcschr) redirected to 0x48311d0 (_vgnU_ifunc_wrapper)
--9537-- REDIR: 0x48fc670 (libc.so.6:strnlen) redirected to 0x48311d0 (_vgnU_ifunc_wrapper)
--9537-- REDIR: 0x48fc230 (libc.so.6:strcspn) redirected to 0x48311d0 (_vgnU_ifunc_wrapper)
--9537-- REDIR: 0x48fd800 (libc.so.6:strncasecmp) redirected to 0x48311d0 (_vgnU_ifunc_wrapper)
--9537-- REDIR: 0x48fc1d0 (libc.so.6:strcpy) redirected to 0x48311d0 (_vgnU_ifunc_wrapper)
--9537-- REDIR: 0x48fd950 (libc.so.6:memcpy@@GLIBC_2.14) redirected to 0x48311d0 (_vgnU_ifunc_wrapper)
--9537-- REDIR: 0x491af50 (libc.so.6:wcsnlen) redirected to 0x48311d0 (_vgnU_ifunc_wrapper)
--9537-- REDIR: 0x4919860 (libc.so.6:wcscpy) redirected to 0x48311d0 (_vgnU_ifunc_wrapper)
--9537-- REDIR: 0x48fc820 (libc.so.6:strpbrk) redirected to 0x48311d0 (_vgnU_ifunc_wrapper)
--9537-- REDIR: 0x48fc100 (libc.so.6:index) redirected to 0x48311d0 (_vgnU_ifunc_wrapper)
--9537-- REDIR: 0x48fc630 (libc.so.6:strlen) redirected to 0x48311d0 (_vgnU_ifunc_wrapper)
--9537-- REDIR: 0x4905bb0 (libc.so.6:memrchr) redirected to 0x48311d0 (_vgnU_ifunc_wrapper)
--9537-- REDIR: 0x48fd850 (libc.so.6:strcasecmp_l) redirected to 0x48311d0 (_vgnU_ifunc_wrapper)
--9537-- REDIR: 0x48fd3d0 (libc.so.6:memchr) redirected to 0x48311d0 (_vgnU_ifunc_wrapper)
--9537-- REDIR: 0x4919930 (libc.so.6:wcslen) redirected to 0x48311d0 (_vgnU_ifunc_wrapper)
--9537-- REDIR: 0x48fcae0 (libc.so.6:strspn) redirected to 0x48311d0 (_vgnU_ifunc_wrapper)
--9537-- REDIR: 0x48fd750 (libc.so.6:stpncpy) redirected to 0x48311d0 (_vgnU_ifunc_wrapper)
--9537-- REDIR: 0x48fd6f0 (libc.so.6:stpcpy) redirected to 0x48311d0 (_vgnU_ifunc_wrapper)
--9537-- REDIR: 0x48fec90 (libc.so.6:strchrnul) redirected to 0x48311d0 (_vgnU_ifunc_wrapper)
--9537-- REDIR: 0x48fd8a0 (libc.so.6:strncasecmp_l) redirected to 0x48311d0 (_vgnU_ifunc_wrapper)
--9537-- REDIR: 0x49e5730 (libc.so.6:__strrchr_avx2) redirected to 0x483ea10 (rindex)
--9537-- REDIR: 0x48f70e0 (libc.so.6:malloc) redirected to 0x483b780 (malloc)
--9537-- REDIR: 0x48f8b10 (libc.so.6:calloc) redirected to 0x483dce0 (calloc)
--9537-- REDIR: 0x49e5540 (libc.so.6:__strchrnul_avx2) redirected to 0x4843540 (strchrnul)
--9537-- REDIR: 0x49e5900 (libc.so.6:__strlen_avx2) redirected to 0x483ef40 (strlen)
--9537-- REDIR: 0x48f76d0 (libc.so.6:free) redirected to 0x483c9d0 (free)
--9537-- REDIR: 0x49e8910 (libc.so.6:__memcpy_avx_unaligned_erms) redirected to 0x48429f0 (memmove)
--9537-- REDIR: 0x48fcfa0 (libc.so.6:__GI_strstr) redirected to 0x4843ca0 (__strstr_sse2)
--9537-- REDIR: 0x49e1ef0 (libc.so.6:__memcmp_avx2_movbe) redirected to 0x48421e0 (bcmp)
--9537-- REDIR: 0x49e0df0 (libc.so.6:__strcmp_avx2) redirected to 0x483fed0 (strcmp)
--9537-- REDIR: 0x49e8d90 (libc.so.6:__memset_avx2_unaligned_erms) redirected to 0x48428e0 (memset)
--9537-- REDIR: 0x48f7e80 (libc.so.6:realloc) redirected to 0x483df30 (realloc)
==9537== 
==9537== HEAP SUMMARY:
==9537==     in use at exit: 0 bytes in 0 blocks
==9537==   total heap usage: 12 allocs, 12 frees, 15,647 bytes allocated
==9537== 
==9537== All heap blocks were freed -- no leaks are possible
==9537== 
==9537== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
deleting marker file /tmp/tmp.BTpIsH3xaH
~/assignment-2-jainaneesh/assignment-autotest/test/assignment5 ~/assignment-2-jainaneesh/assignment-autotest/test/assignment5 ~/assignment-2-jainaneesh/server ~/assignment-2-jainaneesh/assignment-autotest/test/assignment5 ~/assignment-2-jainaneesh
Testing target localhost on port 9000
sending string abcdefg to localhost on port 9000
Differences found after sending abcdefg to localhost on port 9000
Expected contents to match:
abcdefg
But found contents:
With differences
--- /tmp/tmp.haGu8iKlkf	2025-02-08 15:16:38.369097238 -0500
+++ /tmp/tmp.5hrzubsxBC	2025-02-08 15:16:38.365097245 -0500
@@ -1 +0,0 @@
-abcdefg
Test complete with failure
[0;31mValidation Error:sockettest.sh returned 1 attempting to run against native compiled aesdsocket instance running under valgrind[0m
Stopping valgrind and aesdsocket process at pid 
kill: usage: kill [-s sigspec | -n signum | -sigspec] pid | jobspec ... or kill -l [sigspec]
Validation failed with error list :make returned 2 attempting to build native application:sockettest.sh returned 1 attempting to run against native compiled aesdsocket instance running under valgrind
Test of assignment assignment5 failed with rc=1
Running test with user linux-o-phile
-- Generating ;/home/linux-o-phile/assignment-2-jainaneesh/assignment-autotest/test/assignment1/Test_hello_Runner.c;/home/linux-o-phile/assignment-2-jainaneesh/assignment-autotest/test/assignment1/Test_assignment_validate_Runner.c from test/assignment1/Test_hello.c;test/assignment1/Test_assignment_validate.c
-- Building executable including ;/home/linux-o-phile/assignment-2-jainaneesh/assignment-autotest/test/assignment1/Test_hello_Runner.c;/home/linux-o-phile/assignment-2-jainaneesh/assignment-autotest/test/assignment1/Test_assignment_validate_Runner.c test/assignment1/Test_hello.c;test/assignment1/Test_assignment_validate.c and ../examples/autotest-validate/autotest-validate.c
-- Configuring done
-- Generating done
-- Build files have been written to: /home/linux-o-phile/assignment-2-jainaneesh/build
[ 10%] Building C object assignment-autotest/Unity/src/CMakeFiles/unity.dir/unity.c.o
[ 20%] Linking C static library libunity.a
[ 20%] Built target unity
[ 30%] Generating ../../assignment-autotest/test/assignment1/Test_hello_Runner.c, ../../assignment-autotest/test/assignment1/Test_assignment_validate_Runner.c, ../../assignment-autotest/test/unity_runner.c
Test files for auto dependency generation test/assignment1/Test_hello.c test/assignment1/Test_assignment_validate.c
Autogenerating runner for test/assignment1/Test_hello.c
Autogenerating runner for test/assignment1/Test_assignment_validate.c
Autogenerating test/unity_runner.c
Scanning dependencies of target assignment-autotest
[ 40%] Building C object assignment-autotest/CMakeFiles/assignment-autotest.dir/test/assignment1/Test_hello.c.o
[ 50%] Building C object assignment-autotest/CMakeFiles/assignment-autotest.dir/test/assignment1/Test_assignment_validate.c.o
[ 60%] Building C object assignment-autotest/CMakeFiles/assignment-autotest.dir/test/assignment1/Test_hello_Runner.c.o
[ 70%] Building C object assignment-autotest/CMakeFiles/assignment-autotest.dir/test/assignment1/Test_assignment_validate_Runner.c.o
[ 80%] Building C object assignment-autotest/CMakeFiles/assignment-autotest.dir/__/examples/autotest-validate/autotest-validate.c.o
[ 90%] Building C object assignment-autotest/CMakeFiles/assignment-autotest.dir/test/unity_runner.c.o
[100%] Linking C executable assignment-autotest
[100%] Built target assignment-autotest
/home/linux-o-phile/assignment-2-jainaneesh/assignment-autotest/test/assignment1/Test_hello.c:6:test_hello:INFO: Hello!  Your unity setup is working!
/home/linux-o-phile/assignment-2-jainaneesh/assignment-autotest/test/assignment1/Test_hello.c:4:test_hello:PASS

-----------------------
1 Tests 0 Failures 0 Ignored 
OK
/home/linux-o-phile/assignment-2-jainaneesh/assignment-autotest/test/assignment1/Test_assignment_validate.c:9:test_assignment_validate:PASS

-----------------------
1 Tests 0 Failures 0 Ignored 
OK
Executing assignment test script
~/assignment-2-jainaneesh/assignment-autotest/test/assignment5 ~/assignment-2-jainaneesh
~/assignment-2-jainaneesh/server ~/assignment-2-jainaneesh/assignment-autotest/test/assignment5 ~/assignment-2-jainaneesh
rm -f aesdsocket aesdsocket.o
gcc -Wall -Wextra -g -o aesdsocket aesdsocket.c
aesdsocket.c: In function ‘cleanup_and_exit’:
aesdsocket.c:30:27: warning: unused parameter ‘signum’ [-Wunused-parameter]
   30 | void cleanup_and_exit(int signum)
      |                       ~~~~^~~~~~
~/assignment-2-jainaneesh/assignment-autotest/test/assignment5 ~/assignment-2-jainaneesh/server ~/assignment-2-jainaneesh/assignment-autotest/test/assignment5 ~/assignment-2-jainaneesh
~/assignment-2-jainaneesh/assignment-autotest/test/assignment5 ~/assignment-2-jainaneesh/assignment-autotest/test/assignment5 ~/assignment-2-jainaneesh/server ~/assignment-2-jainaneesh/assignment-autotest/test/assignment5 ~/assignment-2-jainaneesh
Testing target localhost on port 9000
sending string abcdefg to localhost on port 9000
sending string hijklmnop to localhost on port 9000
sending string 1234567890 to localhost on port 9000
sending string 9876543210 to localhost on port 9000
Sending long string from long_string.txt file
sending string  to localhost on port 9000
Full contents sent:
abcdefg
hijklmnop
1234567890
9876543210

Tests complete with success!
~/assignment-2-jainaneesh/server ~/assignment-2-jainaneesh/assignment-autotest/test/assignment5 ~/assignment-2-jainaneesh
~/assignment-2-jainaneesh/assignment-autotest/test/assignment5 ~/assignment-2-jainaneesh
Waiting for aesdsocket application with pid 9709 to terminate
Re-running sockettest.sh with valgrind
~/assignment-2-jainaneesh/server ~/assignment-2-jainaneesh/assignment-autotest/test/assignment5 ~/assignment-2-jainaneesh
~/assignment-2-jainaneesh/assignment-autotest/test/assignment5 ~/assignment-2-jainaneesh/server ~/assignment-2-jainaneesh/assignment-autotest/test/assignment5 ~/assignment-2-jainaneesh
Waiting for aesdsocket application to start
Starting valgrind
Valgrind and aesdsocket complete
[0;31mValidation Error:Valgrind failed with 1[0m
Valgrind output error log:
==9765== Memcheck, a memory error detector
==9765== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==9765== Using Valgrind-3.15.0-608cb11914-20190413 and LibVEX; rerun with -h for copyright info
==9765== Command: ./aesdsocket
==9765== Parent PID: 9763
==9765== 
--9765-- 
--9765-- Valgrind options:
--9765--    --error-exitcode=1
--9765--    --leak-check=full
--9765--    --show-leak-kinds=all
--9765--    --track-origins=yes
--9765--    --errors-for-leak-kinds=definite
--9765--    --verbose
--9765--    --log-file=valgrind-out.txt
--9765-- Contents of /proc/version:
--9765--   Linux version 5.15.0-131-generic (buildd@lcy02-amd64-072) (gcc (Ubuntu 9.4.0-1ubuntu1~20.04.2) 9.4.0, GNU ld (GNU Binutils for Ubuntu) 2.34) #141~20.04.1-Ubuntu SMP Thu Jan 16 18:38:51 UTC 2025
--9765-- 
--9765-- Arch and hwcaps: AMD64, LittleEndian, amd64-cx16-lzcnt-rdtscp-sse3-ssse3-avx-avx2-bmi-f16c-rdrand
--9765-- Page sizes: currently 4096, max supported 4096
--9765-- Valgrind library directory: /usr/lib/x86_64-linux-gnu/valgrind
--9765-- Reading syms from /home/linux-o-phile/assignment-2-jainaneesh/server/aesdsocket
--9765-- Reading syms from /usr/lib/x86_64-linux-gnu/ld-2.31.so
--9765--   Considering /usr/lib/debug/.build-id/cb/904567e1b2a460b6fc20817776ad590d265686.debug ..
--9765--   .. build-id is valid
--9765-- Reading syms from /usr/lib/x86_64-linux-gnu/valgrind/memcheck-amd64-linux
--9765--    object doesn't have a symbol table
--9765--    object doesn't have a dynamic symbol table
--9765-- Scheduler: using generic scheduler lock implementation.
--9765-- Reading suppressions file: /usr/lib/x86_64-linux-gnu/valgrind/default.supp
==9765== embedded gdbserver: reading from /tmp/vgdb-pipe-from-vgdb-to-9765-by-linux-o-phile-on-???
==9765== embedded gdbserver: writing to   /tmp/vgdb-pipe-to-vgdb-from-9765-by-linux-o-phile-on-???
==9765== embedded gdbserver: shared mem   /tmp/vgdb-pipe-shared-mem-vgdb-9765-by-linux-o-phile-on-???
==9765== 
==9765== TO CONTROL THIS PROCESS USING vgdb (which you probably
==9765== don't want to do, unless you know exactly what you're doing,
==9765== or are doing some strange experiment):
==9765==   /usr/lib/x86_64-linux-gnu/valgrind/../../bin/vgdb --pid=9765 ...command...
==9765== 
==9765== TO DEBUG THIS PROCESS USING GDB: start GDB like this
==9765==   /path/to/gdb ./aesdsocket
==9765== and then give GDB the following command
==9765==   target remote | /usr/lib/x86_64-linux-gnu/valgrind/../../bin/vgdb --pid=9765
==9765== --pid is optional if only one valgrind process is running
==9765== 
--9765-- REDIR: 0x4022e20 (ld-linux-x86-64.so.2:strlen) redirected to 0x580c9ce2 (???)
--9765-- REDIR: 0x4022bf0 (ld-linux-x86-64.so.2:index) redirected to 0x580c9cfc (???)
--9765-- Reading syms from /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_core-amd64-linux.so
--9765--    object doesn't have a symbol table
--9765-- Reading syms from /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so
--9765--    object doesn't have a symbol table
==9765== WARNING: new redirection conflicts with existing -- ignoring it
--9765--     old: 0x04022e20 (strlen              ) R-> (0000.0) 0x580c9ce2 ???
--9765--     new: 0x04022e20 (strlen              ) R-> (2007.0) 0x0483f060 strlen
--9765-- REDIR: 0x401f600 (ld-linux-x86-64.so.2:strcmp) redirected to 0x483ffd0 (strcmp)
--9765-- REDIR: 0x4023380 (ld-linux-x86-64.so.2:mempcpy) redirected to 0x4843a20 (mempcpy)
--9765-- Reading syms from /usr/lib/x86_64-linux-gnu/libc-2.31.so
--9765--   Considering /usr/lib/debug/.build-id/03/23ab4806bee6f846d9ad4bccfc29afdca49a58.debug ..
--9765--   .. build-id is valid
--9765-- REDIR: 0x48fd480 (libc.so.6:memmove) redirected to 0x48311d0 (_vgnU_ifunc_wrapper)
--9765-- REDIR: 0x48fc780 (libc.so.6:strncpy) redirected to 0x48311d0 (_vgnU_ifunc_wrapper)
--9765-- REDIR: 0x48fd7b0 (libc.so.6:strcasecmp) redirected to 0x48311d0 (_vgnU_ifunc_wrapper)
--9765-- REDIR: 0x48fc0a0 (libc.so.6:strcat) redirected to 0x48311d0 (_vgnU_ifunc_wrapper)
--9765-- REDIR: 0x48fc7e0 (libc.so.6:rindex) redirected to 0x48311d0 (_vgnU_ifunc_wrapper)
--9765-- REDIR: 0x48fec50 (libc.so.6:rawmemchr) redirected to 0x48311d0 (_vgnU_ifunc_wrapper)
--9765-- REDIR: 0x4919ce0 (libc.so.6:wmemchr) redirected to 0x48311d0 (_vgnU_ifunc_wrapper)
--9765-- REDIR: 0x4919820 (libc.so.6:wcscmp) redirected to 0x48311d0 (_vgnU_ifunc_wrapper)
--9765-- REDIR: 0x48fd5e0 (libc.so.6:mempcpy) redirected to 0x48311d0 (_vgnU_ifunc_wrapper)
--9765-- REDIR: 0x48fd410 (libc.so.6:bcmp) redirected to 0x48311d0 (_vgnU_ifunc_wrapper)
--9765-- REDIR: 0x48fc710 (libc.so.6:strncmp) redirected to 0x48311d0 (_vgnU_ifunc_wrapper)
--9765-- REDIR: 0x48fc150 (libc.so.6:strcmp) redirected to 0x48311d0 (_vgnU_ifunc_wrapper)
--9765-- REDIR: 0x48fd540 (libc.so.6:memset) redirected to 0x48311d0 (_vgnU_ifunc_wrapper)
--9765-- REDIR: 0x49197e0 (libc.so.6:wcschr) redirected to 0x48311d0 (_vgnU_ifunc_wrapper)
--9765-- REDIR: 0x48fc670 (libc.so.6:strnlen) redirected to 0x48311d0 (_vgnU_ifunc_wrapper)
--9765-- REDIR: 0x48fc230 (libc.so.6:strcspn) redirected to 0x48311d0 (_vgnU_ifunc_wrapper)
--9765-- REDIR: 0x48fd800 (libc.so.6:strncasecmp) redirected to 0x48311d0 (_vgnU_ifunc_wrapper)
--9765-- REDIR: 0x48fc1d0 (libc.so.6:strcpy) redirected to 0x48311d0 (_vgnU_ifunc_wrapper)
--9765-- REDIR: 0x48fd950 (libc.so.6:memcpy@@GLIBC_2.14) redirected to 0x48311d0 (_vgnU_ifunc_wrapper)
--9765-- REDIR: 0x491af50 (libc.so.6:wcsnlen) redirected to 0x48311d0 (_vgnU_ifunc_wrapper)
--9765-- REDIR: 0x4919860 (libc.so.6:wcscpy) redirected to 0x48311d0 (_vgnU_ifunc_wrapper)
--9765-- REDIR: 0x48fc820 (libc.so.6:strpbrk) redirected to 0x48311d0 (_vgnU_ifunc_wrapper)
--9765-- REDIR: 0x48fc100 (libc.so.6:index) redirected to 0x48311d0 (_vgnU_ifunc_wrapper)
--9765-- REDIR: 0x48fc630 (libc.so.6:strlen) redirected to 0x48311d0 (_vgnU_ifunc_wrapper)
--9765-- REDIR: 0x4905bb0 (libc.so.6:memrchr) redirected to 0x48311d0 (_vgnU_ifunc_wrapper)
--9765-- REDIR: 0x48fd850 (libc.so.6:strcasecmp_l) redirected to 0x48311d0 (_vgnU_ifunc_wrapper)
--9765-- REDIR: 0x48fd3d0 (libc.so.6:memchr) redirected to 0x48311d0 (_vgnU_ifunc_wrapper)
--9765-- REDIR: 0x4919930 (libc.so.6:wcslen) redirected to 0x48311d0 (_vgnU_ifunc_wrapper)
--9765-- REDIR: 0x48fcae0 (libc.so.6:strspn) redirected to 0x48311d0 (_vgnU_ifunc_wrapper)
--9765-- REDIR: 0x48fd750 (libc.so.6:stpncpy) redirected to 0x48311d0 (_vgnU_ifunc_wrapper)
--9765-- REDIR: 0x48fd6f0 (libc.so.6:stpcpy) redirected to 0x48311d0 (_vgnU_ifunc_wrapper)
--9765-- REDIR: 0x48fec90 (libc.so.6:strchrnul) redirected to 0x48311d0 (_vgnU_ifunc_wrapper)
--9765-- REDIR: 0x48fd8a0 (libc.so.6:strncasecmp_l) redirected to 0x48311d0 (_vgnU_ifunc_wrapper)
--9765-- REDIR: 0x49e5730 (libc.so.6:__strrchr_avx2) redirected to 0x483ea10 (rindex)
--9765-- REDIR: 0x48f70e0 (libc.so.6:malloc) redirected to 0x483b780 (malloc)
--9765-- REDIR: 0x48f8b10 (libc.so.6:calloc) redirected to 0x483dce0 (calloc)
--9765-- REDIR: 0x49e5540 (libc.so.6:__strchrnul_avx2) redirected to 0x4843540 (strchrnul)
--9765-- REDIR: 0x49e5900 (libc.so.6:__strlen_avx2) redirected to 0x483ef40 (strlen)
--9765-- REDIR: 0x48f76d0 (libc.so.6:free) redirected to 0x483c9d0 (free)
--9765-- REDIR: 0x49e8910 (libc.so.6:__memcpy_avx_unaligned_erms) redirected to 0x48429f0 (memmove)
--9765-- REDIR: 0x48fcfa0 (libc.so.6:__GI_strstr) redirected to 0x4843ca0 (__strstr_sse2)
--9765-- REDIR: 0x49e1ef0 (libc.so.6:__memcmp_avx2_movbe) redirected to 0x48421e0 (bcmp)
--9765-- REDIR: 0x49e0df0 (libc.so.6:__strcmp_avx2) redirected to 0x483fed0 (strcmp)
--9765-- REDIR: 0x49e8d90 (libc.so.6:__memset_avx2_unaligned_erms) redirected to 0x48428e0 (memset)
--9765-- REDIR: 0x48f7e80 (libc.so.6:realloc) redirected to 0x483df30 (realloc)
==9765== 
==9765== HEAP SUMMARY:
==9765==     in use at exit: 0 bytes in 0 blocks
==9765==   total heap usage: 12 allocs, 12 frees, 15,647 bytes allocated
==9765== 
==9765== All heap blocks were freed -- no leaks are possible
==9765== 
==9765== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
deleting marker file /tmp/tmp.rl8q1yQ8cY
~/assignment-2-jainaneesh/assignment-autotest/test/assignment5 ~/assignment-2-jainaneesh/assignment-autotest/test/assignment5 ~/assignment-2-jainaneesh/server ~/assignment-2-jainaneesh/assignment-autotest/test/assignment5 ~/assignment-2-jainaneesh
Testing target localhost on port 9000
sending string abcdefg to localhost on port 9000
Differences found after sending abcdefg to localhost on port 9000
Expected contents to match:
abcdefg
But found contents:
With differences
--- /tmp/tmp.bGsMErWiRF	2025-02-08 15:22:18.532192871 -0500
+++ /tmp/tmp.Q30EtaIRO4	2025-02-08 15:22:18.524192436 -0500
@@ -1 +0,0 @@
-abcdefg
Test complete with failure
[0;31mValidation Error:sockettest.sh returned 1 attempting to run against native compiled aesdsocket instance running under valgrind[0m
Stopping valgrind and aesdsocket process at pid 
kill: usage: kill [-s sigspec | -n signum | -sigspec] pid | jobspec ... or kill -l [sigspec]
Validation failed with error list :sockettest.sh returned 1 attempting to run against native compiled aesdsocket instance running under valgrind
Test of assignment assignment5 failed with rc=1
Running test with user linux-o-phile
-- Generating ;/home/linux-o-phile/assignment-2-jainaneesh/assignment-autotest/test/assignment1/Test_hello_Runner.c;/home/linux-o-phile/assignment-2-jainaneesh/assignment-autotest/test/assignment1/Test_assignment_validate_Runner.c from test/assignment1/Test_hello.c;test/assignment1/Test_assignment_validate.c
-- Building executable including ;/home/linux-o-phile/assignment-2-jainaneesh/assignment-autotest/test/assignment1/Test_hello_Runner.c;/home/linux-o-phile/assignment-2-jainaneesh/assignment-autotest/test/assignment1/Test_assignment_validate_Runner.c test/assignment1/Test_hello.c;test/assignment1/Test_assignment_validate.c and ../examples/autotest-validate/autotest-validate.c
-- Configuring done
-- Generating done
-- Build files have been written to: /home/linux-o-phile/assignment-2-jainaneesh/build
[ 10%] Building C object assignment-autotest/Unity/src/CMakeFiles/unity.dir/unity.c.o
[ 20%] Linking C static library libunity.a
[ 20%] Built target unity
[ 30%] Generating ../../assignment-autotest/test/assignment1/Test_hello_Runner.c, ../../assignment-autotest/test/assignment1/Test_assignment_validate_Runner.c, ../../assignment-autotest/test/unity_runner.c
Test files for auto dependency generation test/assignment1/Test_hello.c test/assignment1/Test_assignment_validate.c
Autogenerating runner for test/assignment1/Test_hello.c
Autogenerating runner for test/assignment1/Test_assignment_validate.c
Autogenerating test/unity_runner.c
Scanning dependencies of target assignment-autotest
[ 40%] Building C object assignment-autotest/CMakeFiles/assignment-autotest.dir/test/assignment1/Test_hello.c.o
[ 50%] Building C object assignment-autotest/CMakeFiles/assignment-autotest.dir/test/assignment1/Test_assignment_validate.c.o
[ 60%] Building C object assignment-autotest/CMakeFiles/assignment-autotest.dir/test/assignment1/Test_hello_Runner.c.o
[ 70%] Building C object assignment-autotest/CMakeFiles/assignment-autotest.dir/test/assignment1/Test_assignment_validate_Runner.c.o
[ 80%] Building C object assignment-autotest/CMakeFiles/assignment-autotest.dir/__/examples/autotest-validate/autotest-validate.c.o
[ 90%] Building C object assignment-autotest/CMakeFiles/assignment-autotest.dir/test/unity_runner.c.o
[100%] Linking C executable assignment-autotest
[100%] Built target assignment-autotest
/home/linux-o-phile/assignment-2-jainaneesh/assignment-autotest/test/assignment1/Test_hello.c:6:test_hello:INFO: Hello!  Your unity setup is working!
/home/linux-o-phile/assignment-2-jainaneesh/assignment-autotest/test/assignment1/Test_hello.c:4:test_hello:PASS

-----------------------
1 Tests 0 Failures 0 Ignored 
OK
/home/linux-o-phile/assignment-2-jainaneesh/assignment-autotest/test/assignment1/Test_assignment_validate.c:9:test_assignment_validate:PASS

-----------------------
1 Tests 0 Failures 0 Ignored 
OK
Executing assignment test script
~/assignment-2-jainaneesh/assignment-autotest/test/assignment5 ~/assignment-2-jainaneesh
~/assignment-2-jainaneesh/server ~/assignment-2-jainaneesh/assignment-autotest/test/assignment5 ~/assignment-2-jainaneesh
rm -f aesdsocket aesdsocket.o
gcc -Wall -Wextra -g -o aesdsocket aesdsocket.c
[0;31mValidation Error:starting aesdocket failed with 1[0m
~/assignment-2-jainaneesh/assignment-autotest/test/assignment5 ~/assignment-2-jainaneesh/server ~/assignment-2-jainaneesh/assignment-autotest/test/assignment5 ~/assignment-2-jainaneesh
~/assignment-2-jainaneesh/assignment-autotest/test/assignment5 ~/assignment-2-jainaneesh/assignment-autotest/test/assignment5 ~/assignment-2-jainaneesh/server ~/assignment-2-jainaneesh/assignment-autotest/test/assignment5 ~/assignment-2-jainaneesh
Testing target localhost on port 9000
sending string abcdefg to localhost on port 9000
Differences found after sending abcdefg to localhost on port 9000
Expected contents to match:
abcdefg
But found contents:
With differences
--- /tmp/tmp.WgRvzXwDnr	2025-02-08 15:23:14.243091142 -0500
+++ /tmp/tmp.M8TFiK76x9	2025-02-08 15:23:14.235090745 -0500
@@ -1 +0,0 @@
-abcdefg
Test complete with failure
[0;31mValidation Error:sockettest.sh returned 1 attempting to run against native compiled aesdsocket instance[0m
kill: usage: kill [-s sigspec | -n signum | -sigspec] pid | jobspec ... or kill -l [sigspec]
~/assignment-2-jainaneesh/server ~/assignment-2-jainaneesh/assignment-autotest/test/assignment5 ~/assignment-2-jainaneesh
~/assignment-2-jainaneesh/assignment-autotest/test/assignment5 ~/assignment-2-jainaneesh
Waiting for aesdsocket application with pid  to terminate
kill: usage: kill [-s sigspec | -n signum | -sigspec] pid | jobspec ... or kill -l [sigspec]
error: List of process IDs must follow -q.

Usage:
 ps [options]

 Try 'ps --help <simple|list|output|threads|misc|all>'
  or 'ps --help <s|l|o|t|m|a>'
 for additional help text.

For more details see ps(1).
aesdsocket still running
kill: usage: kill [-s sigspec | -n signum | -sigspec] pid | jobspec ... or kill -l [sigspec]
error: List of process IDs must follow -q.

Usage:
 ps [options]

 Try 'ps --help <simple|list|output|threads|misc|all>'
  or 'ps --help <s|l|o|t|m|a>'
 for additional help text.

For more details see ps(1).
aesdsocket still running
kill: usage: kill [-s sigspec | -n signum | -sigspec] pid | jobspec ... or kill -l [sigspec]
error: List of process IDs must follow -q.

Usage:
 ps [options]

 Try 'ps --help <simple|list|output|threads|misc|all>'
  or 'ps --help <s|l|o|t|m|a>'
 for additional help text.

For more details see ps(1).
aesdsocket still running
kill: usage: kill [-s sigspec | -n signum | -sigspec] pid | jobspec ... or kill -l [sigspec]
error: List of process IDs must follow -q.

Usage:
 ps [options]

 Try 'ps --help <simple|list|output|threads|misc|all>'
  or 'ps --help <s|l|o|t|m|a>'
 for additional help text.

For more details see ps(1).
aesdsocket still running
kill: usage: kill [-s sigspec | -n signum | -sigspec] pid | jobspec ... or kill -l [sigspec]
error: List of process IDs must follow -q.

Usage:
 ps [options]

 Try 'ps --help <simple|list|output|threads|misc|all>'
  or 'ps --help <s|l|o|t|m|a>'
 for additional help text.

For more details see ps(1).
aesdsocket still running
kill: usage: kill [-s sigspec | -n signum | -sigspec] pid | jobspec ... or kill -l [sigspec]
error: List of process IDs must follow -q.

Usage:
 ps [options]

 Try 'ps --help <simple|list|output|threads|misc|all>'
  or 'ps --help <s|l|o|t|m|a>'
 for additional help text.

For more details see ps(1).
aesdsocket still running
kill: usage: kill [-s sigspec | -n signum | -sigspec] pid | jobspec ... or kill -l [sigspec]
error: List of process IDs must follow -q.

Usage:
 ps [options]

 Try 'ps --help <simple|list|output|threads|misc|all>'
  or 'ps --help <s|l|o|t|m|a>'
 for additional help text.

For more details see ps(1).
aesdsocket still running
kill: usage: kill [-s sigspec | -n signum | -sigspec] pid | jobspec ... or kill -l [sigspec]
error: List of process IDs must follow -q.

Usage:
 ps [options]

 Try 'ps --help <simple|list|output|threads|misc|all>'
  or 'ps --help <s|l|o|t|m|a>'
 for additional help text.

For more details see ps(1).
aesdsocket still running
kill: usage: kill [-s sigspec | -n signum | -sigspec] pid | jobspec ... or kill -l [sigspec]
error: List of process IDs must follow -q.

Usage:
 ps [options]

 Try 'ps --help <simple|list|output|threads|misc|all>'
  or 'ps --help <s|l|o|t|m|a>'
 for additional help text.

For more details see ps(1).
aesdsocket still running
kill: usage: kill [-s sigspec | -n signum | -sigspec] pid | jobspec ... or kill -l [sigspec]
error: List of process IDs must follow -q.

Usage:
 ps [options]

 Try 'ps --help <simple|list|output|threads|misc|all>'
  or 'ps --help <s|l|o|t|m|a>'
 for additional help text.

For more details see ps(1).
aesdsocket still running
Running test with user linux-o-phile
-- Generating ;/home/linux-o-phile/assignment-2-jainaneesh/assignment-autotest/test/assignment1/Test_hello_Runner.c;/home/linux-o-phile/assignment-2-jainaneesh/assignment-autotest/test/assignment1/Test_assignment_validate_Runner.c from test/assignment1/Test_hello.c;test/assignment1/Test_assignment_validate.c
-- Building executable including ;/home/linux-o-phile/assignment-2-jainaneesh/assignment-autotest/test/assignment1/Test_hello_Runner.c;/home/linux-o-phile/assignment-2-jainaneesh/assignment-autotest/test/assignment1/Test_assignment_validate_Runner.c test/assignment1/Test_hello.c;test/assignment1/Test_assignment_validate.c and ../examples/autotest-validate/autotest-validate.c
-- Configuring done
-- Generating done
-- Build files have been written to: /home/linux-o-phile/assignment-2-jainaneesh/build
[ 10%] Building C object assignment-autotest/Unity/src/CMakeFiles/unity.dir/unity.c.o
[ 20%] Linking C static library libunity.a
[ 20%] Built target unity
[ 30%] Generating ../../assignment-autotest/test/assignment1/Test_hello_Runner.c, ../../assignment-autotest/test/assignment1/Test_assignment_validate_Runner.c, ../../assignment-autotest/test/unity_runner.c
Test files for auto dependency generation test/assignment1/Test_hello.c test/assignment1/Test_assignment_validate.c
Autogenerating runner for test/assignment1/Test_hello.c
Autogenerating runner for test/assignment1/Test_assignment_validate.c
Autogenerating test/unity_runner.c
Scanning dependencies of target assignment-autotest
[ 40%] Building C object assignment-autotest/CMakeFiles/assignment-autotest.dir/test/assignment1/Test_hello.c.o
[ 50%] Building C object assignment-autotest/CMakeFiles/assignment-autotest.dir/test/assignment1/Test_assignment_validate.c.o
[ 60%] Building C object assignment-autotest/CMakeFiles/assignment-autotest.dir/test/assignment1/Test_hello_Runner.c.o
[ 70%] Building C object assignment-autotest/CMakeFiles/assignment-autotest.dir/test/assignment1/Test_assignment_validate_Runner.c.o
[ 80%] Building C object assignment-autotest/CMakeFiles/assignment-autotest.dir/__/examples/autotest-validate/autotest-validate.c.o
[ 90%] Building C object assignment-autotest/CMakeFiles/assignment-autotest.dir/test/unity_runner.c.o
[100%] Linking C executable assignment-autotest
[100%] Built target assignment-autotest
/home/linux-o-phile/assignment-2-jainaneesh/assignment-autotest/test/assignment1/Test_hello.c:6:test_hello:INFO: Hello!  Your unity setup is working!
/home/linux-o-phile/assignment-2-jainaneesh/assignment-autotest/test/assignment1/Test_hello.c:4:test_hello:PASS

-----------------------
1 Tests 0 Failures 0 Ignored 
OK
/home/linux-o-phile/assignment-2-jainaneesh/assignment-autotest/test/assignment1/Test_assignment_validate.c:9:test_assignment_validate:PASS

-----------------------
1 Tests 0 Failures 0 Ignored 
OK
Executing assignment test script
~/assignment-2-jainaneesh/assignment-autotest/test/assignment5 ~/assignment-2-jainaneesh
~/assignment-2-jainaneesh/server ~/assignment-2-jainaneesh/assignment-autotest/test/assignment5 ~/assignment-2-jainaneesh
rm -f aesdsocket aesdsocket.o
gcc -Wall -Wextra -g -o aesdsocket aesdsocket.c
~/assignment-2-jainaneesh/assignment-autotest/test/assignment5 ~/assignment-2-jainaneesh/server ~/assignment-2-jainaneesh/assignment-autotest/test/assignment5 ~/assignment-2-jainaneesh
~/assignment-2-jainaneesh/assignment-autotest/test/assignment5 ~/assignment-2-jainaneesh/assignment-autotest/test/assignment5 ~/assignment-2-jainaneesh/server ~/assignment-2-jainaneesh/assignment-autotest/test/assignment5 ~/assignment-2-jainaneesh
Testing target localhost on port 9000
sending string abcdefg to localhost on port 9000
sending string hijklmnop to localhost on port 9000
sending string 1234567890 to localhost on port 9000
sending string 9876543210 to localhost on port 9000
Sending long string from long_string.txt file
sending string  to localhost on port 9000
Full contents sent:
abcdefg
hijklmnop
1234567890
9876543210
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
Tests complete with success!
~/assignment-2-jainaneesh/server ~/assignment-2-jainaneesh/assignment-autotest/test/assignment5 ~/assignment-2-jainaneesh
~/assignment-2-jainaneesh/assignment-autotest/test/assignment5 ~/assignment-2-jainaneesh
Waiting for aesdsocket application with pid 10077 to terminate
Re-running sockettest.sh with valgrind
~/assignment-2-jainaneesh/server ~/assignment-2-jainaneesh/assignment-autotest/test/assignment5 ~/assignment-2-jainaneesh
~/assignment-2-jainaneesh/assignment-autotest/test/assignment5 ~/assignment-2-jainaneesh/server ~/assignment-2-jainaneesh/assignment-autotest/test/assignment5 ~/assignment-2-jainaneesh
Waiting for aesdsocket application to start
Starting valgrind
Valgrind and aesdsocket complete
[0;31mValidation Error:Valgrind failed with 1[0m
Valgrind output error log:
==10133== Memcheck, a memory error detector
==10133== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==10133== Using Valgrind-3.15.0-608cb11914-20190413 and LibVEX; rerun with -h for copyright info
==10133== Command: ./aesdsocket
==10133== Parent PID: 10131
==10133== 
--10133-- 
--10133-- Valgrind options:
--10133--    --error-exitcode=1
--10133--    --leak-check=full
--10133--    --show-leak-kinds=all
--10133--    --track-origins=yes
--10133--    --errors-for-leak-kinds=definite
--10133--    --verbose
--10133--    --log-file=valgrind-out.txt
--10133-- Contents of /proc/version:
--10133--   Linux version 5.15.0-131-generic (buildd@lcy02-amd64-072) (gcc (Ubuntu 9.4.0-1ubuntu1~20.04.2) 9.4.0, GNU ld (GNU Binutils for Ubuntu) 2.34) #141~20.04.1-Ubuntu SMP Thu Jan 16 18:38:51 UTC 2025
--10133-- 
--10133-- Arch and hwcaps: AMD64, LittleEndian, amd64-cx16-lzcnt-rdtscp-sse3-ssse3-avx-avx2-bmi-f16c-rdrand
--10133-- Page sizes: currently 4096, max supported 4096
--10133-- Valgrind library directory: /usr/lib/x86_64-linux-gnu/valgrind
--10133-- Reading syms from /home/linux-o-phile/assignment-2-jainaneesh/server/aesdsocket
--10133-- Reading syms from /usr/lib/x86_64-linux-gnu/ld-2.31.so
--10133--   Considering /usr/lib/debug/.build-id/cb/904567e1b2a460b6fc20817776ad590d265686.debug ..
--10133--   .. build-id is valid
--10133-- Reading syms from /usr/lib/x86_64-linux-gnu/valgrind/memcheck-amd64-linux
--10133--    object doesn't have a symbol table
--10133--    object doesn't have a dynamic symbol table
--10133-- Scheduler: using generic scheduler lock implementation.
--10133-- Reading suppressions file: /usr/lib/x86_64-linux-gnu/valgrind/default.supp
==10133== embedded gdbserver: reading from /tmp/vgdb-pipe-from-vgdb-to-10133-by-linux-o-phile-on-???
==10133== embedded gdbserver: writing to   /tmp/vgdb-pipe-to-vgdb-from-10133-by-linux-o-phile-on-???
==10133== embedded gdbserver: shared mem   /tmp/vgdb-pipe-shared-mem-vgdb-10133-by-linux-o-phile-on-???
==10133== 
==10133== TO CONTROL THIS PROCESS USING vgdb (which you probably
==10133== don't want to do, unless you know exactly what you're doing,
==10133== or are doing some strange experiment):
==10133==   /usr/lib/x86_64-linux-gnu/valgrind/../../bin/vgdb --pid=10133 ...command...
==10133== 
==10133== TO DEBUG THIS PROCESS USING GDB: start GDB like this
==10133==   /path/to/gdb ./aesdsocket
==10133== and then give GDB the following command
==10133==   target remote | /usr/lib/x86_64-linux-gnu/valgrind/../../bin/vgdb --pid=10133
==10133== --pid is optional if only one valgrind process is running
==10133== 
--10133-- REDIR: 0x4022e20 (ld-linux-x86-64.so.2:strlen) redirected to 0x580c9ce2 (???)
--10133-- REDIR: 0x4022bf0 (ld-linux-x86-64.so.2:index) redirected to 0x580c9cfc (???)
--10133-- Reading syms from /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_core-amd64-linux.so
--10133--    object doesn't have a symbol table
--10133-- Reading syms from /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so
--10133--    object doesn't have a symbol table
==10133== WARNING: new redirection conflicts with existing -- ignoring it
--10133--     old: 0x04022e20 (strlen              ) R-> (0000.0) 0x580c9ce2 ???
--10133--     new: 0x04022e20 (strlen              ) R-> (2007.0) 0x0483f060 strlen
--10133-- REDIR: 0x401f600 (ld-linux-x86-64.so.2:strcmp) redirected to 0x483ffd0 (strcmp)
--10133-- REDIR: 0x4023380 (ld-linux-x86-64.so.2:mempcpy) redirected to 0x4843a20 (mempcpy)
--10133-- Reading syms from /usr/lib/x86_64-linux-gnu/libc-2.31.so
--10133--   Considering /usr/lib/debug/.build-id/03/23ab4806bee6f846d9ad4bccfc29afdca49a58.debug ..
--10133--   .. build-id is valid
--10133-- REDIR: 0x48fd480 (libc.so.6:memmove) redirected to 0x48311d0 (_vgnU_ifunc_wrapper)
--10133-- REDIR: 0x48fc780 (libc.so.6:strncpy) redirected to 0x48311d0 (_vgnU_ifunc_wrapper)
--10133-- REDIR: 0x48fd7b0 (libc.so.6:strcasecmp) redirected to 0x48311d0 (_vgnU_ifunc_wrapper)
--10133-- REDIR: 0x48fc0a0 (libc.so.6:strcat) redirected to 0x48311d0 (_vgnU_ifunc_wrapper)
--10133-- REDIR: 0x48fc7e0 (libc.so.6:rindex) redirected to 0x48311d0 (_vgnU_ifunc_wrapper)
--10133-- REDIR: 0x48fec50 (libc.so.6:rawmemchr) redirected to 0x48311d0 (_vgnU_ifunc_wrapper)
--10133-- REDIR: 0x4919ce0 (libc.so.6:wmemchr) redirected to 0x48311d0 (_vgnU_ifunc_wrapper)
--10133-- REDIR: 0x4919820 (libc.so.6:wcscmp) redirected to 0x48311d0 (_vgnU_ifunc_wrapper)
--10133-- REDIR: 0x48fd5e0 (libc.so.6:mempcpy) redirected to 0x48311d0 (_vgnU_ifunc_wrapper)
--10133-- REDIR: 0x48fd410 (libc.so.6:bcmp) redirected to 0x48311d0 (_vgnU_ifunc_wrapper)
--10133-- REDIR: 0x48fc710 (libc.so.6:strncmp) redirected to 0x48311d0 (_vgnU_ifunc_wrapper)
--10133-- REDIR: 0x48fc150 (libc.so.6:strcmp) redirected to 0x48311d0 (_vgnU_ifunc_wrapper)
--10133-- REDIR: 0x48fd540 (libc.so.6:memset) redirected to 0x48311d0 (_vgnU_ifunc_wrapper)
--10133-- REDIR: 0x49197e0 (libc.so.6:wcschr) redirected to 0x48311d0 (_vgnU_ifunc_wrapper)
--10133-- REDIR: 0x48fc670 (libc.so.6:strnlen) redirected to 0x48311d0 (_vgnU_ifunc_wrapper)
--10133-- REDIR: 0x48fc230 (libc.so.6:strcspn) redirected to 0x48311d0 (_vgnU_ifunc_wrapper)
--10133-- REDIR: 0x48fd800 (libc.so.6:strncasecmp) redirected to 0x48311d0 (_vgnU_ifunc_wrapper)
--10133-- REDIR: 0x48fc1d0 (libc.so.6:strcpy) redirected to 0x48311d0 (_vgnU_ifunc_wrapper)
--10133-- REDIR: 0x48fd950 (libc.so.6:memcpy@@GLIBC_2.14) redirected to 0x48311d0 (_vgnU_ifunc_wrapper)
--10133-- REDIR: 0x491af50 (libc.so.6:wcsnlen) redirected to 0x48311d0 (_vgnU_ifunc_wrapper)
--10133-- REDIR: 0x4919860 (libc.so.6:wcscpy) redirected to 0x48311d0 (_vgnU_ifunc_wrapper)
--10133-- REDIR: 0x48fc820 (libc.so.6:strpbrk) redirected to 0x48311d0 (_vgnU_ifunc_wrapper)
--10133-- REDIR: 0x48fc100 (libc.so.6:index) redirected to 0x48311d0 (_vgnU_ifunc_wrapper)
--10133-- REDIR: 0x48fc630 (libc.so.6:strlen) redirected to 0x48311d0 (_vgnU_ifunc_wrapper)
--10133-- REDIR: 0x4905bb0 (libc.so.6:memrchr) redirected to 0x48311d0 (_vgnU_ifunc_wrapper)
--10133-- REDIR: 0x48fd850 (libc.so.6:strcasecmp_l) redirected to 0x48311d0 (_vgnU_ifunc_wrapper)
--10133-- REDIR: 0x48fd3d0 (libc.so.6:memchr) redirected to 0x48311d0 (_vgnU_ifunc_wrapper)
--10133-- REDIR: 0x4919930 (libc.so.6:wcslen) redirected to 0x48311d0 (_vgnU_ifunc_wrapper)
--10133-- REDIR: 0x48fcae0 (libc.so.6:strspn) redirected to 0x48311d0 (_vgnU_ifunc_wrapper)
--10133-- REDIR: 0x48fd750 (libc.so.6:stpncpy) redirected to 0x48311d0 (_vgnU_ifunc_wrapper)
--10133-- REDIR: 0x48fd6f0 (libc.so.6:stpcpy) redirected to 0x48311d0 (_vgnU_ifunc_wrapper)
--10133-- REDIR: 0x48fec90 (libc.so.6:strchrnul) redirected to 0x48311d0 (_vgnU_ifunc_wrapper)
--10133-- REDIR: 0x48fd8a0 (libc.so.6:strncasecmp_l) redirected to 0x48311d0 (_vgnU_ifunc_wrapper)
--10133-- REDIR: 0x49e5730 (libc.so.6:__strrchr_avx2) redirected to 0x483ea10 (rindex)
--10133-- REDIR: 0x48f70e0 (libc.so.6:malloc) redirected to 0x483b780 (malloc)
--10133-- REDIR: 0x48f8b10 (libc.so.6:calloc) redirected to 0x483dce0 (calloc)
--10133-- REDIR: 0x49e5540 (libc.so.6:__strchrnul_avx2) redirected to 0x4843540 (strchrnul)
--10133-- REDIR: 0x49e5900 (libc.so.6:__strlen_avx2) redirected to 0x483ef40 (strlen)
--10133-- REDIR: 0x48f76d0 (libc.so.6:free) redirected to 0x483c9d0 (free)
--10133-- REDIR: 0x49e8910 (libc.so.6:__memcpy_avx_unaligned_erms) redirected to 0x48429f0 (memmove)
--10133-- REDIR: 0x48fcfa0 (libc.so.6:__GI_strstr) redirected to 0x4843ca0 (__strstr_sse2)
--10133-- REDIR: 0x49e1ef0 (libc.so.6:__memcmp_avx2_movbe) redirected to 0x48421e0 (bcmp)
--10133-- REDIR: 0x49e0df0 (libc.so.6:__strcmp_avx2) redirected to 0x483fed0 (strcmp)
--10133-- REDIR: 0x49e8d90 (libc.so.6:__memset_avx2_unaligned_erms) redirected to 0x48428e0 (memset)
--10133-- REDIR: 0x48f7e80 (libc.so.6:realloc) redirected to 0x483df30 (realloc)
==10133== 
==10133== HEAP SUMMARY:
==10133==     in use at exit: 0 bytes in 0 blocks
==10133==   total heap usage: 12 allocs, 12 frees, 15,648 bytes allocated
==10133== 
==10133== All heap blocks were freed -- no leaks are possible
==10133== 
==10133== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
deleting marker file /tmp/tmp.brwG89Bel9
~/assignment-2-jainaneesh/assignment-autotest/test/assignment5 ~/assignment-2-jainaneesh/assignment-autotest/test/assignment5 ~/assignment-2-jainaneesh/server ~/assignment-2-jainaneesh/assignment-autotest/test/assignment5 ~/assignment-2-jainaneesh
Testing target localhost on port 9000
sending string abcdefg to localhost on port 9000
Differences found after sending abcdefg to localhost on port 9000
Expected contents to match:
abcdefg
But found contents:
With differences
--- /tmp/tmp.ad2cRPB1F3	2025-02-08 15:23:28.867809518 -0500
+++ /tmp/tmp.1lQAnJ25th	2025-02-08 15:23:28.859809130 -0500
@@ -1 +0,0 @@
-abcdefg
Test complete with failure
[0;31mValidation Error:sockettest.sh returned 1 attempting to run against native compiled aesdsocket instance running under valgrind[0m
Stopping valgrind and aesdsocket process at pid 
kill: usage: kill [-s sigspec | -n signum | -sigspec] pid | jobspec ... or kill -l [sigspec]
Validation failed with error list :sockettest.sh returned 1 attempting to run against native compiled aesdsocket instance running under valgrind
Test of assignment assignment5 failed with rc=1
Running test with user linux-o-phile
-- Generating ;/home/linux-o-phile/assignment-2-jainaneesh/assignment-autotest/test/assignment1/Test_hello_Runner.c;/home/linux-o-phile/assignment-2-jainaneesh/assignment-autotest/test/assignment1/Test_assignment_validate_Runner.c from test/assignment1/Test_hello.c;test/assignment1/Test_assignment_validate.c
-- Building executable including ;/home/linux-o-phile/assignment-2-jainaneesh/assignment-autotest/test/assignment1/Test_hello_Runner.c;/home/linux-o-phile/assignment-2-jainaneesh/assignment-autotest/test/assignment1/Test_assignment_validate_Runner.c test/assignment1/Test_hello.c;test/assignment1/Test_assignment_validate.c and ../examples/autotest-validate/autotest-validate.c
-- Configuring done
-- Generating done
-- Build files have been written to: /home/linux-o-phile/assignment-2-jainaneesh/build
[ 10%] Building C object assignment-autotest/Unity/src/CMakeFiles/unity.dir/unity.c.o
[ 20%] Linking C static library libunity.a
[ 20%] Built target unity
[ 30%] Generating ../../assignment-autotest/test/assignment1/Test_hello_Runner.c, ../../assignment-autotest/test/assignment1/Test_assignment_validate_Runner.c, ../../assignment-autotest/test/unity_runner.c
Test files for auto dependency generation test/assignment1/Test_hello.c test/assignment1/Test_assignment_validate.c
Autogenerating runner for test/assignment1/Test_hello.c
Autogenerating runner for test/assignment1/Test_assignment_validate.c
Autogenerating test/unity_runner.c
Scanning dependencies of target assignment-autotest
[ 40%] Building C object assignment-autotest/CMakeFiles/assignment-autotest.dir/test/assignment1/Test_hello.c.o
[ 50%] Building C object assignment-autotest/CMakeFiles/assignment-autotest.dir/test/assignment1/Test_assignment_validate.c.o
[ 60%] Building C object assignment-autotest/CMakeFiles/assignment-autotest.dir/test/assignment1/Test_hello_Runner.c.o
[ 70%] Building C object assignment-autotest/CMakeFiles/assignment-autotest.dir/test/assignment1/Test_assignment_validate_Runner.c.o
[ 80%] Building C object assignment-autotest/CMakeFiles/assignment-autotest.dir/__/examples/autotest-validate/autotest-validate.c.o
[ 90%] Building C object assignment-autotest/CMakeFiles/assignment-autotest.dir/test/unity_runner.c.o
[100%] Linking C executable assignment-autotest
[100%] Built target assignment-autotest
/home/linux-o-phile/assignment-2-jainaneesh/assignment-autotest/test/assignment1/Test_hello.c:6:test_hello:INFO: Hello!  Your unity setup is working!
/home/linux-o-phile/assignment-2-jainaneesh/assignment-autotest/test/assignment1/Test_hello.c:4:test_hello:PASS

-----------------------
1 Tests 0 Failures 0 Ignored 
OK
/home/linux-o-phile/assignment-2-jainaneesh/assignment-autotest/test/assignment1/Test_assignment_validate.c:9:test_assignment_validate:PASS

-----------------------
1 Tests 0 Failures 0 Ignored 
OK
Executing assignment test script
~/assignment-2-jainaneesh/assignment-autotest/test/assignment5 ~/assignment-2-jainaneesh
~/assignment-2-jainaneesh/server ~/assignment-2-jainaneesh/assignment-autotest/test/assignment5 ~/assignment-2-jainaneesh
rm -f aesdsocket aesdsocket.o
gcc -Wall -Wextra -g -o aesdsocket aesdsocket.c
aesdsocket.c: In function ‘main’:
aesdsocket.c:131:6: error: ‘file_fd’ undeclared (first use in this function)
  131 |  if (file_fd >= 0) {
      |      ^~~~~~~
aesdsocket.c:131:6: note: each undeclared identifier is reported only once for each function it appears in
make: *** [Makefile:17: aesdsocket] Error 1
[0;31mValidation Error:make returned 2 attempting to build native application[0m
script-helpers: line 555: ./aesdsocket: No such file or directory
[0;31mValidation Error:starting aesdocket failed with 127[0m
~/assignment-2-jainaneesh/assignment-autotest/test/assignment5 ~/assignment-2-jainaneesh/server ~/assignment-2-jainaneesh/assignment-autotest/test/assignment5 ~/assignment-2-jainaneesh
~/assignment-2-jainaneesh/assignment-autotest/test/assignment5 ~/assignment-2-jainaneesh/assignment-autotest/test/assignment5 ~/assignment-2-jainaneesh/server ~/assignment-2-jainaneesh/assignment-autotest/test/assignment5 ~/assignment-2-jainaneesh
Testing target localhost on port 9000
sending string abcdefg to localhost on port 9000
Differences found after sending abcdefg to localhost on port 9000
Expected contents to match:
abcdefg
But found contents:
With differences
--- /tmp/tmp.rHVzZGxM0d	2025-02-08 15:26:53.168294825 -0500
+++ /tmp/tmp.7bI3Kv2yy4	2025-02-08 15:26:53.164294683 -0500
@@ -1 +0,0 @@
-abcdefg
Test complete with failure
[0;31mValidation Error:sockettest.sh returned 1 attempting to run against native compiled aesdsocket instance[0m
kill: usage: kill [-s sigspec | -n signum | -sigspec] pid | jobspec ... or kill -l [sigspec]
~/assignment-2-jainaneesh/server ~/assignment-2-jainaneesh/assignment-autotest/test/assignment5 ~/assignment-2-jainaneesh
~/assignment-2-jainaneesh/assignment-autotest/test/assignment5 ~/assignment-2-jainaneesh
Waiting for aesdsocket application with pid  to terminate
kill: usage: kill [-s sigspec | -n signum | -sigspec] pid | jobspec ... or kill -l [sigspec]
error: List of process IDs must follow -q.

Usage:
 ps [options]

 Try 'ps --help <simple|list|output|threads|misc|all>'
  or 'ps --help <s|l|o|t|m|a>'
 for additional help text.

For more details see ps(1).
aesdsocket still running
kill: usage: kill [-s sigspec | -n signum | -sigspec] pid | jobspec ... or kill -l [sigspec]
error: List of process IDs must follow -q.

Usage:
 ps [options]

 Try 'ps --help <simple|list|output|threads|misc|all>'
  or 'ps --help <s|l|o|t|m|a>'
 for additional help text.

For more details see ps(1).
aesdsocket still running
kill: usage: kill [-s sigspec | -n signum | -sigspec] pid | jobspec ... or kill -l [sigspec]
error: List of process IDs must follow -q.

Usage:
 ps [options]

 Try 'ps --help <simple|list|output|threads|misc|all>'
  or 'ps --help <s|l|o|t|m|a>'
 for additional help text.

For more details see ps(1).
aesdsocket still running
kill: usage: kill [-s sigspec | -n signum | -sigspec] pid | jobspec ... or kill -l [sigspec]
error: List of process IDs must follow -q.

Usage:
 ps [options]

 Try 'ps --help <simple|list|output|threads|misc|all>'
  or 'ps --help <s|l|o|t|m|a>'
 for additional help text.

For more details see ps(1).
aesdsocket still running
kill: usage: kill [-s sigspec | -n signum | -sigspec] pid | jobspec ... or kill -l [sigspec]
error: List of process IDs must follow -q.

Usage:
 ps [options]

 Try 'ps --help <simple|list|output|threads|misc|all>'
  or 'ps --help <s|l|o|t|m|a>'
 for additional help text.

For more details see ps(1).
aesdsocket still running
Running test with user linux-o-phile
-- Generating ;/home/linux-o-phile/assignment-2-jainaneesh/assignment-autotest/test/assignment1/Test_hello_Runner.c;/home/linux-o-phile/assignment-2-jainaneesh/assignment-autotest/test/assignment1/Test_assignment_validate_Runner.c from test/assignment1/Test_hello.c;test/assignment1/Test_assignment_validate.c
-- Building executable including ;/home/linux-o-phile/assignment-2-jainaneesh/assignment-autotest/test/assignment1/Test_hello_Runner.c;/home/linux-o-phile/assignment-2-jainaneesh/assignment-autotest/test/assignment1/Test_assignment_validate_Runner.c test/assignment1/Test_hello.c;test/assignment1/Test_assignment_validate.c and ../examples/autotest-validate/autotest-validate.c
-- Configuring done
-- Generating done
-- Build files have been written to: /home/linux-o-phile/assignment-2-jainaneesh/build
[ 10%] Building C object assignment-autotest/Unity/src/CMakeFiles/unity.dir/unity.c.o
[ 20%] Linking C static library libunity.a
[ 20%] Built target unity
[ 30%] Generating ../../assignment-autotest/test/assignment1/Test_hello_Runner.c, ../../assignment-autotest/test/assignment1/Test_assignment_validate_Runner.c, ../../assignment-autotest/test/unity_runner.c
Test files for auto dependency generation test/assignment1/Test_hello.c test/assignment1/Test_assignment_validate.c
Autogenerating runner for test/assignment1/Test_hello.c
Autogenerating runner for test/assignment1/Test_assignment_validate.c
Autogenerating test/unity_runner.c
Scanning dependencies of target assignment-autotest
[ 40%] Building C object assignment-autotest/CMakeFiles/assignment-autotest.dir/test/assignment1/Test_hello.c.o
[ 50%] Building C object assignment-autotest/CMakeFiles/assignment-autotest.dir/test/assignment1/Test_assignment_validate.c.o
[ 60%] Building C object assignment-autotest/CMakeFiles/assignment-autotest.dir/test/assignment1/Test_hello_Runner.c.o
[ 70%] Building C object assignment-autotest/CMakeFiles/assignment-autotest.dir/test/assignment1/Test_assignment_validate_Runner.c.o
[ 80%] Building C object assignment-autotest/CMakeFiles/assignment-autotest.dir/__/examples/autotest-validate/autotest-validate.c.o
[ 90%] Building C object assignment-autotest/CMakeFiles/assignment-autotest.dir/test/unity_runner.c.o
[100%] Linking C executable assignment-autotest
[100%] Built target assignment-autotest
/home/linux-o-phile/assignment-2-jainaneesh/assignment-autotest/test/assignment1/Test_hello.c:6:test_hello:INFO: Hello!  Your unity setup is working!
/home/linux-o-phile/assignment-2-jainaneesh/assignment-autotest/test/assignment1/Test_hello.c:4:test_hello:PASS

-----------------------
1 Tests 0 Failures 0 Ignored 
OK
/home/linux-o-phile/assignment-2-jainaneesh/assignment-autotest/test/assignment1/Test_assignment_validate.c:9:test_assignment_validate:PASS

-----------------------
1 Tests 0 Failures 0 Ignored 
OK
Executing assignment test script
~/assignment-2-jainaneesh/assignment-autotest/test/assignment5 ~/assignment-2-jainaneesh
~/assignment-2-jainaneesh/server ~/assignment-2-jainaneesh/assignment-autotest/test/assignment5 ~/assignment-2-jainaneesh
rm -f aesdsocket aesdsocket.o
gcc -Wall -Wextra -g -o aesdsocket aesdsocket.c
aesdsocket.c: In function ‘main’:
aesdsocket.c:131:6: error: ‘file_fd’ undeclared (first use in this function)
  131 |  if (file_fd >= 0) {
      |      ^~~~~~~
aesdsocket.c:131:6: note: each undeclared identifier is reported only once for each function it appears in
make: *** [Makefile:17: aesdsocket] Error 1
[0;31mValidation Error:make returned 2 attempting to build native application[0m
script-helpers: line 555: ./aesdsocket: No such file or directory
[0;31mValidation Error:starting aesdocket failed with 127[0m
~/assignment-2-jainaneesh/assignment-autotest/test/assignment5 ~/assignment-2-jainaneesh/server ~/assignment-2-jainaneesh/assignment-autotest/test/assignment5 ~/assignment-2-jainaneesh
~/assignment-2-jainaneesh/assignment-autotest/test/assignment5 ~/assignment-2-jainaneesh/assignment-autotest/test/assignment5 ~/assignment-2-jainaneesh/server ~/assignment-2-jainaneesh/assignment-autotest/test/assignment5 ~/assignment-2-jainaneesh
Testing target localhost on port 9000
sending string abcdefg to localhost on port 9000
Differences found after sending abcdefg to localhost on port 9000
Expected contents to match:
abcdefg
But found contents:
With differences
--- /tmp/tmp.vqaQh1xyLq	2025-02-08 15:26:59.416514961 -0500
+++ /tmp/tmp.ffHe4NboeX	2025-02-08 15:26:59.412514820 -0500
@@ -1 +0,0 @@
-abcdefg
Test complete with failure
[0;31mValidation Error:sockettest.sh returned 1 attempting to run against native compiled aesdsocket instance[0m
kill: usage: kill [-s sigspec | -n signum | -sigspec] pid | jobspec ... or kill -l [sigspec]
~/assignment-2-jainaneesh/server ~/assignment-2-jainaneesh/assignment-autotest/test/assignment5 ~/assignment-2-jainaneesh
~/assignment-2-jainaneesh/assignment-autotest/test/assignment5 ~/assignment-2-jainaneesh
Waiting for aesdsocket application with pid  to terminate
kill: usage: kill [-s sigspec | -n signum | -sigspec] pid | jobspec ... or kill -l [sigspec]
error: List of process IDs must follow -q.

Usage:
 ps [options]

 Try 'ps --help <simple|list|output|threads|misc|all>'
  or 'ps --help <s|l|o|t|m|a>'
 for additional help text.

For more details see ps(1).
aesdsocket still running
kill: usage: kill [-s sigspec | -n signum | -sigspec] pid | jobspec ... or kill -l [sigspec]
error: List of process IDs must follow -q.

Usage:
 ps [options]

 Try 'ps --help <simple|list|output|threads|misc|all>'
  or 'ps --help <s|l|o|t|m|a>'
 for additional help text.

For more details see ps(1).
aesdsocket still running
kill: usage: kill [-s sigspec | -n signum | -sigspec] pid | jobspec ... or kill -l [sigspec]
error: List of process IDs must follow -q.

Usage:
 ps [options]

 Try 'ps --help <simple|list|output|threads|misc|all>'
  or 'ps --help <s|l|o|t|m|a>'
 for additional help text.

For more details see ps(1).
aesdsocket still running
kill: usage: kill [-s sigspec | -n signum | -sigspec] pid | jobspec ... or kill -l [sigspec]
error: List of process IDs must follow -q.

Usage:
 ps [options]

 Try 'ps --help <simple|list|output|threads|misc|all>'
  or 'ps --help <s|l|o|t|m|a>'
 for additional help text.

For more details see ps(1).
aesdsocket still running
kill: usage: kill [-s sigspec | -n signum | -sigspec] pid | jobspec ... or kill -l [sigspec]
error: List of process IDs must follow -q.

Usage:
 ps [options]

 Try 'ps --help <simple|list|output|threads|misc|all>'
  or 'ps --help <s|l|o|t|m|a>'
 for additional help text.

For more details see ps(1).
aesdsocket still running
kill: usage: kill [-s sigspec | -n signum | -sigspec] pid | jobspec ... or kill -l [sigspec]
error: List of process IDs must follow -q.

Usage:
 ps [options]

 Try 'ps --help <simple|list|output|threads|misc|all>'
  or 'ps --help <s|l|o|t|m|a>'
 for additional help text.

For more details see ps(1).
aesdsocket still running
kill: usage: kill [-s sigspec | -n signum | -sigspec] pid | jobspec ... or kill -l [sigspec]
error: List of process IDs must follow -q.

Usage:
 ps [options]

 Try 'ps --help <simple|list|output|threads|misc|all>'
  or 'ps --help <s|l|o|t|m|a>'
 for additional help text.

For more details see ps(1).
aesdsocket still running
Running test with user linux-o-phile
-- Generating ;/home/linux-o-phile/assignment-2-jainaneesh/assignment-autotest/test/assignment1/Test_hello_Runner.c;/home/linux-o-phile/assignment-2-jainaneesh/assignment-autotest/test/assignment1/Test_assignment_validate_Runner.c from test/assignment1/Test_hello.c;test/assignment1/Test_assignment_validate.c
-- Building executable including ;/home/linux-o-phile/assignment-2-jainaneesh/assignment-autotest/test/assignment1/Test_hello_Runner.c;/home/linux-o-phile/assignment-2-jainaneesh/assignment-autotest/test/assignment1/Test_assignment_validate_Runner.c test/assignment1/Test_hello.c;test/assignment1/Test_assignment_validate.c and ../examples/autotest-validate/autotest-validate.c
-- Configuring done
-- Generating done
-- Build files have been written to: /home/linux-o-phile/assignment-2-jainaneesh/build
[ 10%] Building C object assignment-autotest/Unity/src/CMakeFiles/unity.dir/unity.c.o
[ 20%] Linking C static library libunity.a
[ 20%] Built target unity
[ 30%] Generating ../../assignment-autotest/test/assignment1/Test_hello_Runner.c, ../../assignment-autotest/test/assignment1/Test_assignment_validate_Runner.c, ../../assignment-autotest/test/unity_runner.c
Test files for auto dependency generation test/assignment1/Test_hello.c test/assignment1/Test_assignment_validate.c
Autogenerating runner for test/assignment1/Test_hello.c
Autogenerating runner for test/assignment1/Test_assignment_validate.c
Autogenerating test/unity_runner.c
Scanning dependencies of target assignment-autotest
[ 40%] Building C object assignment-autotest/CMakeFiles/assignment-autotest.dir/test/assignment1/Test_hello.c.o
[ 50%] Building C object assignment-autotest/CMakeFiles/assignment-autotest.dir/test/assignment1/Test_assignment_validate.c.o
[ 60%] Building C object assignment-autotest/CMakeFiles/assignment-autotest.dir/test/assignment1/Test_hello_Runner.c.o
[ 70%] Building C object assignment-autotest/CMakeFiles/assignment-autotest.dir/test/assignment1/Test_assignment_validate_Runner.c.o
[ 80%] Building C object assignment-autotest/CMakeFiles/assignment-autotest.dir/__/examples/autotest-validate/autotest-validate.c.o
[ 90%] Building C object assignment-autotest/CMakeFiles/assignment-autotest.dir/test/unity_runner.c.o
[100%] Linking C executable assignment-autotest
[100%] Built target assignment-autotest
/home/linux-o-phile/assignment-2-jainaneesh/assignment-autotest/test/assignment1/Test_hello.c:6:test_hello:INFO: Hello!  Your unity setup is working!
/home/linux-o-phile/assignment-2-jainaneesh/assignment-autotest/test/assignment1/Test_hello.c:4:test_hello:PASS

-----------------------
1 Tests 0 Failures 0 Ignored 
OK
/home/linux-o-phile/assignment-2-jainaneesh/assignment-autotest/test/assignment1/Test_assignment_validate.c:9:test_assignment_validate:PASS

-----------------------
1 Tests 0 Failures 0 Ignored 
OK
Executing assignment test script
~/assignment-2-jainaneesh/assignment-autotest/test/assignment5 ~/assignment-2-jainaneesh
~/assignment-2-jainaneesh/server ~/assignment-2-jainaneesh/assignment-autotest/test/assignment5 ~/assignment-2-jainaneesh
rm -f aesdsocket aesdsocket.o
gcc -Wall -Wextra -g -o aesdsocket aesdsocket.c
~/assignment-2-jainaneesh/assignment-autotest/test/assignment5 ~/assignment-2-jainaneesh/server ~/assignment-2-jainaneesh/assignment-autotest/test/assignment5 ~/assignment-2-jainaneesh
~/assignment-2-jainaneesh/assignment-autotest/test/assignment5 ~/assignment-2-jainaneesh/assignment-autotest/test/assignment5 ~/assignment-2-jainaneesh/server ~/assignment-2-jainaneesh/assignment-autotest/test/assignment5 ~/assignment-2-jainaneesh
Testing target localhost on port 9000
sending string abcdefg to localhost on port 9000
sending string hijklmnop to localhost on port 9000
sending string 1234567890 to localhost on port 9000
sending string 9876543210 to localhost on port 9000
Sending long string from long_string.txt file
sending string  to localhost on port 9000
Full contents sent:
abcdefg
hijklmnop
1234567890
9876543210

Tests complete with success!
~/assignment-2-jainaneesh/server ~/assignment-2-jainaneesh/assignment-autotest/test/assignment5 ~/assignment-2-jainaneesh
~/assignment-2-jainaneesh/assignment-autotest/test/assignment5 ~/assignment-2-jainaneesh
Waiting for aesdsocket application with pid 10628 to terminate
Re-running sockettest.sh with valgrind
~/assignment-2-jainaneesh/server ~/assignment-2-jainaneesh/assignment-autotest/test/assignment5 ~/assignment-2-jainaneesh
~/assignment-2-jainaneesh/assignment-autotest/test/assignment5 ~/assignment-2-jainaneesh/server ~/assignment-2-jainaneesh/assignment-autotest/test/assignment5 ~/assignment-2-jainaneesh
Waiting for aesdsocket application to start
Starting valgrind
Valgrind and aesdsocket complete
[0;31mValidation Error:Valgrind failed with 1[0m
Valgrind output error log:
==10684== Memcheck, a memory error detector
==10684== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==10684== Using Valgrind-3.15.0-608cb11914-20190413 and LibVEX; rerun with -h for copyright info
==10684== Command: ./aesdsocket
==10684== Parent PID: 10682
==10684== 
--10684-- 
--10684-- Valgrind options:
--10684--    --error-exitcode=1
--10684--    --leak-check=full
--10684--    --show-leak-kinds=all
--10684--    --track-origins=yes
--10684--    --errors-for-leak-kinds=definite
--10684--    --verbose
--10684--    --log-file=valgrind-out.txt
--10684-- Contents of /proc/version:
--10684--   Linux version 5.15.0-131-generic (buildd@lcy02-amd64-072) (gcc (Ubuntu 9.4.0-1ubuntu1~20.04.2) 9.4.0, GNU ld (GNU Binutils for Ubuntu) 2.34) #141~20.04.1-Ubuntu SMP Thu Jan 16 18:38:51 UTC 2025
--10684-- 
--10684-- Arch and hwcaps: AMD64, LittleEndian, amd64-cx16-lzcnt-rdtscp-sse3-ssse3-avx-avx2-bmi-f16c-rdrand
--10684-- Page sizes: currently 4096, max supported 4096
--10684-- Valgrind library directory: /usr/lib/x86_64-linux-gnu/valgrind
--10684-- Reading syms from /home/linux-o-phile/assignment-2-jainaneesh/server/aesdsocket
--10684-- Reading syms from /usr/lib/x86_64-linux-gnu/ld-2.31.so
--10684--   Considering /usr/lib/debug/.build-id/cb/904567e1b2a460b6fc20817776ad590d265686.debug ..
--10684--   .. build-id is valid
--10684-- Reading syms from /usr/lib/x86_64-linux-gnu/valgrind/memcheck-amd64-linux
--10684--    object doesn't have a symbol table
--10684--    object doesn't have a dynamic symbol table
--10684-- Scheduler: using generic scheduler lock implementation.
--10684-- Reading suppressions file: /usr/lib/x86_64-linux-gnu/valgrind/default.supp
==10684== embedded gdbserver: reading from /tmp/vgdb-pipe-from-vgdb-to-10684-by-linux-o-phile-on-???
==10684== embedded gdbserver: writing to   /tmp/vgdb-pipe-to-vgdb-from-10684-by-linux-o-phile-on-???
==10684== embedded gdbserver: shared mem   /tmp/vgdb-pipe-shared-mem-vgdb-10684-by-linux-o-phile-on-???
==10684== 
==10684== TO CONTROL THIS PROCESS USING vgdb (which you probably
==10684== don't want to do, unless you know exactly what you're doing,
==10684== or are doing some strange experiment):
==10684==   /usr/lib/x86_64-linux-gnu/valgrind/../../bin/vgdb --pid=10684 ...command...
==10684== 
==10684== TO DEBUG THIS PROCESS USING GDB: start GDB like this
==10684==   /path/to/gdb ./aesdsocket
==10684== and then give GDB the following command
==10684==   target remote | /usr/lib/x86_64-linux-gnu/valgrind/../../bin/vgdb --pid=10684
==10684== --pid is optional if only one valgrind process is running
==10684== 
--10684-- REDIR: 0x4022e20 (ld-linux-x86-64.so.2:strlen) redirected to 0x580c9ce2 (???)
--10684-- REDIR: 0x4022bf0 (ld-linux-x86-64.so.2:index) redirected to 0x580c9cfc (???)
--10684-- Reading syms from /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_core-amd64-linux.so
--10684--    object doesn't have a symbol table
--10684-- Reading syms from /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so
--10684--    object doesn't have a symbol table
==10684== WARNING: new redirection conflicts with existing -- ignoring it
--10684--     old: 0x04022e20 (strlen              ) R-> (0000.0) 0x580c9ce2 ???
--10684--     new: 0x04022e20 (strlen              ) R-> (2007.0) 0x0483f060 strlen
--10684-- REDIR: 0x401f600 (ld-linux-x86-64.so.2:strcmp) redirected to 0x483ffd0 (strcmp)
--10684-- REDIR: 0x4023380 (ld-linux-x86-64.so.2:mempcpy) redirected to 0x4843a20 (mempcpy)
--10684-- Reading syms from /usr/lib/x86_64-linux-gnu/libc-2.31.so
--10684--   Considering /usr/lib/debug/.build-id/03/23ab4806bee6f846d9ad4bccfc29afdca49a58.debug ..
--10684--   .. build-id is valid
--10684-- REDIR: 0x48fd480 (libc.so.6:memmove) redirected to 0x48311d0 (_vgnU_ifunc_wrapper)
--10684-- REDIR: 0x48fc780 (libc.so.6:strncpy) redirected to 0x48311d0 (_vgnU_ifunc_wrapper)
--10684-- REDIR: 0x48fd7b0 (libc.so.6:strcasecmp) redirected to 0x48311d0 (_vgnU_ifunc_wrapper)
--10684-- REDIR: 0x48fc0a0 (libc.so.6:strcat) redirected to 0x48311d0 (_vgnU_ifunc_wrapper)
--10684-- REDIR: 0x48fc7e0 (libc.so.6:rindex) redirected to 0x48311d0 (_vgnU_ifunc_wrapper)
--10684-- REDIR: 0x48fec50 (libc.so.6:rawmemchr) redirected to 0x48311d0 (_vgnU_ifunc_wrapper)
--10684-- REDIR: 0x4919ce0 (libc.so.6:wmemchr) redirected to 0x48311d0 (_vgnU_ifunc_wrapper)
--10684-- REDIR: 0x4919820 (libc.so.6:wcscmp) redirected to 0x48311d0 (_vgnU_ifunc_wrapper)
--10684-- REDIR: 0x48fd5e0 (libc.so.6:mempcpy) redirected to 0x48311d0 (_vgnU_ifunc_wrapper)
--10684-- REDIR: 0x48fd410 (libc.so.6:bcmp) redirected to 0x48311d0 (_vgnU_ifunc_wrapper)
--10684-- REDIR: 0x48fc710 (libc.so.6:strncmp) redirected to 0x48311d0 (_vgnU_ifunc_wrapper)
--10684-- REDIR: 0x48fc150 (libc.so.6:strcmp) redirected to 0x48311d0 (_vgnU_ifunc_wrapper)
--10684-- REDIR: 0x48fd540 (libc.so.6:memset) redirected to 0x48311d0 (_vgnU_ifunc_wrapper)
--10684-- REDIR: 0x49197e0 (libc.so.6:wcschr) redirected to 0x48311d0 (_vgnU_ifunc_wrapper)
--10684-- REDIR: 0x48fc670 (libc.so.6:strnlen) redirected to 0x48311d0 (_vgnU_ifunc_wrapper)
--10684-- REDIR: 0x48fc230 (libc.so.6:strcspn) redirected to 0x48311d0 (_vgnU_ifunc_wrapper)
--10684-- REDIR: 0x48fd800 (libc.so.6:strncasecmp) redirected to 0x48311d0 (_vgnU_ifunc_wrapper)
--10684-- REDIR: 0x48fc1d0 (libc.so.6:strcpy) redirected to 0x48311d0 (_vgnU_ifunc_wrapper)
--10684-- REDIR: 0x48fd950 (libc.so.6:memcpy@@GLIBC_2.14) redirected to 0x48311d0 (_vgnU_ifunc_wrapper)
--10684-- REDIR: 0x491af50 (libc.so.6:wcsnlen) redirected to 0x48311d0 (_vgnU_ifunc_wrapper)
--10684-- REDIR: 0x4919860 (libc.so.6:wcscpy) redirected to 0x48311d0 (_vgnU_ifunc_wrapper)
--10684-- REDIR: 0x48fc820 (libc.so.6:strpbrk) redirected to 0x48311d0 (_vgnU_ifunc_wrapper)
--10684-- REDIR: 0x48fc100 (libc.so.6:index) redirected to 0x48311d0 (_vgnU_ifunc_wrapper)
--10684-- REDIR: 0x48fc630 (libc.so.6:strlen) redirected to 0x48311d0 (_vgnU_ifunc_wrapper)
--10684-- REDIR: 0x4905bb0 (libc.so.6:memrchr) redirected to 0x48311d0 (_vgnU_ifunc_wrapper)
--10684-- REDIR: 0x48fd850 (libc.so.6:strcasecmp_l) redirected to 0x48311d0 (_vgnU_ifunc_wrapper)
--10684-- REDIR: 0x48fd3d0 (libc.so.6:memchr) redirected to 0x48311d0 (_vgnU_ifunc_wrapper)
--10684-- REDIR: 0x4919930 (libc.so.6:wcslen) redirected to 0x48311d0 (_vgnU_ifunc_wrapper)
--10684-- REDIR: 0x48fcae0 (libc.so.6:strspn) redirected to 0x48311d0 (_vgnU_ifunc_wrapper)
--10684-- REDIR: 0x48fd750 (libc.so.6:stpncpy) redirected to 0x48311d0 (_vgnU_ifunc_wrapper)
--10684-- REDIR: 0x48fd6f0 (libc.so.6:stpcpy) redirected to 0x48311d0 (_vgnU_ifunc_wrapper)
--10684-- REDIR: 0x48fec90 (libc.so.6:strchrnul) redirected to 0x48311d0 (_vgnU_ifunc_wrapper)
--10684-- REDIR: 0x48fd8a0 (libc.so.6:strncasecmp_l) redirected to 0x48311d0 (_vgnU_ifunc_wrapper)
--10684-- REDIR: 0x49e5730 (libc.so.6:__strrchr_avx2) redirected to 0x483ea10 (rindex)
--10684-- REDIR: 0x48f70e0 (libc.so.6:malloc) redirected to 0x483b780 (malloc)
--10684-- REDIR: 0x48f8b10 (libc.so.6:calloc) redirected to 0x483dce0 (calloc)
--10684-- REDIR: 0x49e5540 (libc.so.6:__strchrnul_avx2) redirected to 0x4843540 (strchrnul)
--10684-- REDIR: 0x49e5900 (libc.so.6:__strlen_avx2) redirected to 0x483ef40 (strlen)
--10684-- REDIR: 0x48f76d0 (libc.so.6:free) redirected to 0x483c9d0 (free)
--10684-- REDIR: 0x49e8910 (libc.so.6:__memcpy_avx_unaligned_erms) redirected to 0x48429f0 (memmove)
--10684-- REDIR: 0x48fcfa0 (libc.so.6:__GI_strstr) redirected to 0x4843ca0 (__strstr_sse2)
--10684-- REDIR: 0x49e1ef0 (libc.so.6:__memcmp_avx2_movbe) redirected to 0x48421e0 (bcmp)
--10684-- REDIR: 0x49e0df0 (libc.so.6:__strcmp_avx2) redirected to 0x483fed0 (strcmp)
--10684-- REDIR: 0x49e8d90 (libc.so.6:__memset_avx2_unaligned_erms) redirected to 0x48428e0 (memset)
--10684-- REDIR: 0x48f7e80 (libc.so.6:realloc) redirected to 0x483df30 (realloc)
==10684== 
==10684== HEAP SUMMARY:
==10684==     in use at exit: 0 bytes in 0 blocks
==10684==   total heap usage: 12 allocs, 12 frees, 15,648 bytes allocated
==10684== 
==10684== All heap blocks were freed -- no leaks are possible
==10684== 
==10684== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
deleting marker file /tmp/tmp.4XfKd2yyQS
~/assignment-2-jainaneesh/assignment-autotest/test/assignment5 ~/assignment-2-jainaneesh/assignment-autotest/test/assignment5 ~/assignment-2-jainaneesh/server ~/assignment-2-jainaneesh/assignment-autotest/test/assignment5 ~/assignment-2-jainaneesh
Testing target localhost on port 9000
sending string abcdefg to localhost on port 9000
Differences found after sending abcdefg to localhost on port 9000
Expected contents to match:
abcdefg
But found contents:
With differences
--- /tmp/tmp.O4NAJwXlFf	2025-02-08 15:40:45.058465338 -0500
+++ /tmp/tmp.lK4g7XrtJy	2025-02-08 15:40:45.054465282 -0500
@@ -1 +0,0 @@
-abcdefg
Test complete with failure
[0;31mValidation Error:sockettest.sh returned 1 attempting to run against native compiled aesdsocket instance running under valgrind[0m
Stopping valgrind and aesdsocket process at pid 
kill: usage: kill [-s sigspec | -n signum | -sigspec] pid | jobspec ... or kill -l [sigspec]
Validation failed with error list :sockettest.sh returned 1 attempting to run against native compiled aesdsocket instance running under valgrind
Test of assignment assignment5 failed with rc=1
Running test with user linux-o-phile
-- Generating ;/home/linux-o-phile/assignment-2-jainaneesh/assignment-autotest/test/assignment1/Test_hello_Runner.c;/home/linux-o-phile/assignment-2-jainaneesh/assignment-autotest/test/assignment1/Test_assignment_validate_Runner.c from test/assignment1/Test_hello.c;test/assignment1/Test_assignment_validate.c
-- Building executable including ;/home/linux-o-phile/assignment-2-jainaneesh/assignment-autotest/test/assignment1/Test_hello_Runner.c;/home/linux-o-phile/assignment-2-jainaneesh/assignment-autotest/test/assignment1/Test_assignment_validate_Runner.c test/assignment1/Test_hello.c;test/assignment1/Test_assignment_validate.c and ../examples/autotest-validate/autotest-validate.c
-- Configuring done
-- Generating done
-- Build files have been written to: /home/linux-o-phile/assignment-2-jainaneesh/build
[ 10%] Building C object assignment-autotest/Unity/src/CMakeFiles/unity.dir/unity.c.o
[ 20%] Linking C static library libunity.a
[ 20%] Built target unity
[ 30%] Generating ../../assignment-autotest/test/assignment1/Test_hello_Runner.c, ../../assignment-autotest/test/assignment1/Test_assignment_validate_Runner.c, ../../assignment-autotest/test/unity_runner.c
Test files for auto dependency generation test/assignment1/Test_hello.c test/assignment1/Test_assignment_validate.c
Autogenerating runner for test/assignment1/Test_hello.c
Autogenerating runner for test/assignment1/Test_assignment_validate.c
Autogenerating test/unity_runner.c
Scanning dependencies of target assignment-autotest
[ 40%] Building C object assignment-autotest/CMakeFiles/assignment-autotest.dir/test/assignment1/Test_hello.c.o
[ 50%] Building C object assignment-autotest/CMakeFiles/assignment-autotest.dir/test/assignment1/Test_assignment_validate.c.o
[ 60%] Building C object assignment-autotest/CMakeFiles/assignment-autotest.dir/test/assignment1/Test_hello_Runner.c.o
[ 70%] Building C object assignment-autotest/CMakeFiles/assignment-autotest.dir/test/assignment1/Test_assignment_validate_Runner.c.o
[ 80%] Building C object assignment-autotest/CMakeFiles/assignment-autotest.dir/__/examples/autotest-validate/autotest-validate.c.o
[ 90%] Building C object assignment-autotest/CMakeFiles/assignment-autotest.dir/test/unity_runner.c.o
[100%] Linking C executable assignment-autotest
[100%] Built target assignment-autotest
/home/linux-o-phile/assignment-2-jainaneesh/assignment-autotest/test/assignment1/Test_hello.c:6:test_hello:INFO: Hello!  Your unity setup is working!
/home/linux-o-phile/assignment-2-jainaneesh/assignment-autotest/test/assignment1/Test_hello.c:4:test_hello:PASS

-----------------------
1 Tests 0 Failures 0 Ignored 
OK
/home/linux-o-phile/assignment-2-jainaneesh/assignment-autotest/test/assignment1/Test_assignment_validate.c:9:test_assignment_validate:PASS

-----------------------
1 Tests 0 Failures 0 Ignored 
OK
Executing assignment test script
~/assignment-2-jainaneesh/assignment-autotest/test/assignment5 ~/assignment-2-jainaneesh
~/assignment-2-jainaneesh/server ~/assignment-2-jainaneesh/assignment-autotest/test/assignment5 ~/assignment-2-jainaneesh
rm -f aesdsocket aesdsocket.o
gcc -Wall -Wextra -g -o aesdsocket aesdsocket.c
~/assignment-2-jainaneesh/assignment-autotest/test/assignment5 ~/assignment-2-jainaneesh/server ~/assignment-2-jainaneesh/assignment-autotest/test/assignment5 ~/assignment-2-jainaneesh
~/assignment-2-jainaneesh/assignment-autotest/test/assignment5 ~/assignment-2-jainaneesh/assignment-autotest/test/assignment5 ~/assignment-2-jainaneesh/server ~/assignment-2-jainaneesh/assignment-autotest/test/assignment5 ~/assignment-2-jainaneesh
Testing target localhost on port 9000
sending string abcdefg to localhost on port 9000
sending string hijklmnop to localhost on port 9000
sending string 1234567890 to localhost on port 9000
sending string 9876543210 to localhost on port 9000
Sending long string from long_string.txt file
sending string lfcCEGDr9AwJ0wiI2dg4jMocKvbnVWXJ9eNuf5UbDArpt9ga9sqJnc2TwRQe0lQXarCHJjgb7TBuB4Cb9Bk2UFj8f7ZXJpwRm5PF4H26B8td40Tm5itE0rTp4xFXxyMbwOtCb23QKG6DywAsyfnyXSFDsmymwaQ9oR8da5kpabpjNmL9QvLJXiw9K0O7TBCvtcudqEvPgW65pseDmjQpdOdjBaAXqxZtcMUM8ButiII9YKGapi2Awh79BmcchvT9P8Fau6co2z1znLDQnQSlHN4qKQDu5JlE7yYiuZJRsSdja4Q6cSiL9Dxq2FhUP5R3aY1gtCzXcI4tksOzhVgrXvmhmY4ua82sji7xu2dqaQdIjrqCBMHmcDGyv4ZfObEapKzNXoC4c11BYMzT0onBR1cZMRDPwo97VPBKoxE3aKxwsdw6IXcJAY8TFtw97O6yLFMEn2niAm2FOWDYKh0UqmKVjrdwvEXJMAFyAISWwtREm7lmXAFcR5tHYPFLxXdnyFDQ0l1Q0WO91NgvloH31NUQdHDlMTLfk08dJ6i9RtzhuuQBAJOWc3rfpMsgt0SI1vLRVoekizTGtHlqak2UoWdmv3HMAXUn47RQio3et1Cu1TOD02mAsjllhaLk6zf9oBHPLJyzGcwv71MaM9VfYj1fEDmNWruSqDT6f9skKxpOyr96ThjZoleylRbczoStHVSkPigV8vu89jqFN9hI6k0dT6Hs8ltsODlm830Ptqet8V8fmUNDgfZh55RasY6Dn2HFDoMlcWi80uEs2FqqjunQQCrhegn8zHBCj6FpVMfkMiYJzStKeT72SdAJfsgL8EeAq3zo1rjTaNqRRay8W1Kgu0Ot5JipQhR2mbL2QsU220XNjWwBq6NITy8vAL1pCVjSFzRyAtQIQAt4r418XPhlJGDKlzjMdjftkVvMy1vxsfqTSmmJ939PIbUr5kN2KSqrgkdrU4ijZebv48Rc38nIzDm4rcC9zrduguBW1eCCI2XLS3ZXEu2JJNt938GHshtOrYngvP24srUAlz1Fq4JtK53HObMrzvTQxJxB4Pkd9WZixiMZUHtOeOAsaqWd7VSrICufIvgBgEEPVUSRfoglb4U7GjRjDWiS0zpDudaul7rVUXIiGJ70t0eywEGZqXTltLk7knURJVY4tvtKdhx3vtT2nH7uYxLYqfXhRtd1yMfkYhcUeWgOfo2vqRwNmHSf6dhB4udIyGrBOc9yaVZ0KQCaU8FMoNUykufO0OCFK61JzAtSPJ60t5a8CoXj4ktf1zS5XAhAlhWZ4ZJMTMnLxCQ8TK2AnM1Mrxil9jF75OcmTVw6HS0NNLxzcItG2Gq3PnhSauE9620HmGQKVpp7rQAqTeUb8Cm2KcABC7kZLH8qcPgkPtcvToEvfv53CggciU3aidqVPxu1vRsx389ASiFQPOoRebN3xhrAukkNvvCWklvsrT1NCfgoEGHJgr7n95RFn8VWQ4a3bIKUYViqGcslVOUdDU0TOBBzZedKs1LjrGXDnEWyMWP3SK5uXFjRraNS394EY8aUOxireOHOxPBha9ccu839deG93xvMUxFLfnvnnNFTf7rxAEfzntxUPbnpeNzQEYI6WlzduRjITzekQJpX4xAU5M8CfgkdZl9E9zVgAqblsenq65EDkWqg21uafuXEOyRausifYvutU0lwFJ2ztlJgeoFNK5dKljsFc7qr5Yr6bdmMyFXLkS2q0pUtXX4wOlws5OR645HlvbJRcrhwaGiFFKvxm138cUYHNQdgxmDRRykT0IOkBKwBN7IZa4F8IPYWfrQdgTqTVQOAmHiwA5hSAPkFKDEm2nluntLabIP2nWGEo4zfjpckXyD9yzzoYZh0ofVCzUmAu3ShfIiazwiS8oE0h2D4Kb7JjQU69hczjjqC6rCz7ECW7cVvIRtqNZHhkDvxKBfvncqrY2cUx1gWjpRtv1kfimbh6mqnIahb8WQNxicVma0LVLQ3QqwzP0MX0NYibzjfzJ6BDQqmYuH5ExVnn3cBZsx0sgWnxd7WXDfYKcfaYMYysAFGvbkFYSFK0Kcy6tSp8eWRm0vfeVyV6lZKcnxaakqZ7lI4qTuNzKPQTIQ5KSYt6PO2f6tr2IPXcW99VdKBS89ODXPMxhwP2EGPdyxhGHiEEW7vpG0m8rAEkOwwzOSzr2fPxHmE2qVxcmMoUCEyxcHlYmJGRCl9hEDXFktu6pfdGBXhmLGniHvqfOi7Zpx02AkAyxEDu7k79qkm8tBNdR5vFgNvnflvVPUAm45G7vphVVQXo3KE5U3q2IPYGC8D13b8Y8uNmpeVU2EJUVDlx649uY5UKBiIuYx5s2w3zTxtFz4pQqOrsQBE2z5HjnXC6eZko0Z0oD0ruOcHam9krcWAJlLBxYXz7m7oRcLQ9BGcfBvIKgR0Z0Ogmgg78UjWHsnhdCTJ6Pli0Wga1sqFBaVRbkRhyNPLa6MweeVFb0Fv6spLj6knLzLcBY0HmYHVgJblTL3TqAvxAXOGGEfkMGmjZKMm9YiujtrFmjW2J74K8U9cJwrKYTLxctvKKNWfygz3KfJPMa9lQN7V88eF7gFipmKnsAnRwyObCCkvVnEjwJ0opIEZSNyrudOSsJSRCmxkM5bIyQSVsTiNOyVaxxHFrqK2dZT2fYXiBhxPiAHB0DPRmFOPpGjqOrVrybVXVw6YWMo7HJIhKEHMsoSvdq8l9t6zrOEPtSAma1ovIeTeh6bi5wk0gc5foGPNzVbgrQonDQStH7WIHt0rnipLAlShdXtZdipX5tK2ftQ6BzPsZyhTGZ21baIDaHPXe4103lRV7vO6UyfMhGToaVN7gFeusdakUlt4jvle2OVbMBm77ZSzhXHQtl4dvvv79k2GvqvPZbr7vvjqkBTuhoZa0sYLAeUFzcfeMvgmg1ZWGNyMoQZHU1oBI5xPTkVoLOpvzxcTRHKtdKarZxZihuKeZxpAISlKY7h33SglTjYlNG5shFW5dK5JYBmDQGf76bbG7j5ymMWVCBHFYAXt9A7Av2O2zkQM3KWQpvlrre4tIeUjiKN12CSKZEX65hZ9oDEFrLEJCUAxfTftyNzxD1YfG9hpFPJfXEGBaHygNp30t0hk9A4BCtqqVUPZUeLwR97EMbHcitDyDBxNAuMwXpBrgcBTgGM6C3xwzePNmFynHQUQKmUZpCSevuG6GUhHFhUJzDfBROwAI8tIrUPo3IFQxMlur0xLTl9k67wHvX6rvkHCLyYwwB7dnq8ICX1NCRW725Z63xWtb1m8nvKueSBkzRKFJg8QcrKhTihiU3ikHZyF9LqdHIX4BS56d4KY5AM2pBaAEDFyfGwchBeMKVfYYvj8dSoZQ6YroPwuYbF3NWcmo5G4DLWiNbJBf0I1caj0Y9a3mBpirzEKUJ0bKBVj7i5bpae7YHl9x7haLElVv78ISWq83GFDkAaDJapNbkclKymBC8m62g7aBQIkiSLo6odfwgBKiMNNFPybRMcd2t5OI34TQ253Nm8WlucXIkof79iJTqKd6S1uGyyZ5cPZugm8ERmAPYZQDAx4JPEIjGcNsP9VAhuEX8bozdGpSB3gEUQ7pyxxJ6WYCEulZpU3VOEDzYOcpBUkgGmEv8YSnzEpjDrjOQgDUwvobziDPyZR0uHdCsDaS5uw3mFJx7EEstxLVQhJYxhBjjB2V89iXJwQjVV12TQCGTpzVt7yMXI57eooojojMYxts7nlItuwJGrHPPz1vzG92EymWmKJe9Z5zLGQ2WCGNTQCTOfqRS6WKrZAVSOz06y12BSAE7oTRYFAuUzGgByn5pdHVrcd0PtimkiEqQT9YZhw8x6MdaXjnkWKvCekt8yp5DIAoOdsO4sOiq93Fy3ssf428fhIrlo2o2unX3lxVBNGuQFCvWtjWw92mOvzSCHKlghs4MlLthvvoJkfZAsrEIfVf4hw03L9pegihZf0ICeDqCPV8YkNzWyToaJIC1Z5IeDRY1nrKeg7qgqjb5capWaBGW0SlvnTdRCW7qqwk8WPmOueVeOLcobyJqAWaZmSCPEhtcqWQhPx2kXHSKTWPj3OQfApsZooXeIQsTw7Nw1zxCQTXcBx0TpSZ2BwXzcqR1KCgIFPS5NviiPqRzvOkPETskIgkkgP7wVhvaDR1KMESEpcl2CWqYjvc0OYY9eLZnoSDJB0unWacFxM7njOdSlmQhO6OJfLHhYlfQeho2oSAkanQWCXEWN6yFNf7CMoW1c9wuIMTtLE6COXNyHhTvvMPW9ER7qQfjsolHQMYotKDZ5D4dLg6R9qXunMjYbPppDScrFHYrXBbRSYHJfMBgYwHqToYomEI8qJNSB1Hrv31kY9Hz64sURt7HTQdlRqVXccS19srQytZyxkNCkPPcOQT1Wcy0U0yzvT0yVZz1MxKLHwzAhZzC9Bug4S3SDtgzJIIGEsIRh6jLvMt1hcKcpBGw17bGdcOM95EdCzfJQ6DWfNEguFdu6AU4fv4qhjsiTqigSwkRXliBtgSyTXu2s7m2Xx8IvAWYXS1Nyux0rbn1JgaAYGab1UTSlN90zGCOLKwzeqrCBaecLOsDzCPa8lrOsDEheMau4Sf5qtSI6qLXpE3TiNY7vBqrbWb9yVGJZnOzLxg9Ye5dRKL9MdDCI9946kl65pkOW1ndq6XG7ddTWBRXdTP8IHm8QR2C9duw5U8cyPXQSq4IPgsV5sSlpq41rilNra9a8WXCXqqg9sSs1oSafaydPoX6Xvj5glHEiwgFgABuz09Ctom0TqMGWMZFqbfki0ykmjbauJyiu1isbYIcedePT2Ph5wm4uoYWMdyIYG7kH6T4tbKhGaMV8vxADi8tJmofMfqAEDpnBiuFfUOO6n2oFelnDxEs1Sh5shPu1JjQRRYwwHBvPWTDuQDbV5gOEVckHYFs1GxWurftKbqeonm5uPeVYeuRUDvIcUJEnMxn3nwarfVtdX5goav5QHomHXU5JKtv3wHLWHBWrxCGddtxkP4gbszJB7eHPjQLqnECZG0aT8gudjb2eYfOfRyZV9rTu7LNZa5cViASWuycHn7cRU2lgoI0QpIyCgOPfFJEvsj4cZxfIoCYSVzbeyRvJIPi3cxdORoN3DL6ezMrcaw3eHioaUWQ2hw0LDZ7rcRMTf8xOjgSS3yDUR1BFlODxGGDETVD9zshS0tEz16qVBUC58vn4p0pgSpMRCIAp9TSVwm9Q1ITrT6HiazwmZSc03D2YRIbrzpe8aY2PqwOPS4zoVxuwtbhjzFoBJUdNsxHMDsDj5htaeWlznEw2mFcUCWthLprgLFRkQBKAnIi3jkhrw3VmHwozDmKZOi9ciTqTUqJYvNRxawc2XywjPBNR2mxMRGsHr6RoEW5m4XntjYcjgHySxAkMdEvPemIPQmweTjC0PcGejpEZtC1pD5ECqYTA3Iw3hfh7uyRhzFl09BaQR6Dhb9VmMiHMbIoXrcalIpC5MXAZWbYTBrxXDJjysZwk3ANMNfQBJUeUXx4B70SqhVUPz1v3a4tLGhK6qSRqBK0O1fd0ePgUVi6KcRJU7PxoDNMn1wivBxdG9QTGAuFfDmgc3yVDxTBZ6o68YBKDBqp21AD6p2xy9FlYyEgxKRn1YFeHf1LJKkom5cIc2HMWNodXpY7guaKB9sZQrwMZuHSiLHqycHMnSqNkdqob6RSvWs43gX8AN9VFN9Z8ra4QXG0IspMWZHSMgFfGzv80Hp3LtwrMZx783MWBuuvaT72sX1AyFNj0VM5OioLZLlLeNVOqtIvDcMg7Hc7rISUJXTMCFEB08c1su3m9SKzKtLDV2ePWL1eRwJlHCqGkaYavyMg9NWAYG1JWGGWiFWJDDCRngdvKLc4UMbMJd19BqeR39HBoFWPFBMnXOmB40luxCdfHgGkDPF9Ft4F0d4vYCXwusHMLW6KYvBphJiFGtzobKmLwGiRleDxUEC0mpYYuassIMxZ3Aux79Z7L80uJVS0Hi7SANfZzvovk7QB9ZzqZDZVGEgix58vK3c2Q3B5kuZlAn6Ez3iHwK1jKvg9HCQsaA0tt5794N8M2nyc9PdWoJZk9l5aiqR0PibTLre4s35nRUAJtuVzHlk7yfEuOeRYyzXKiKxM37EU1108ygUE4drppvRQ1YR4t4AtBNM72l8ifMdbFfitAehwevBlx5gAPmtrFXK2seb4cROoK31RT38EVGMn906htOCaFnoVBkgriNGzK6SVBn2hIIyyuMyVnkmrMb8NJNU1V55irnShl4wU78iom3iCghKTjFvk8BWLvBdM9Zzsfsfxsr0jJjNjhMtNERw6SO4MEIiOTnjUufdzfEuAFS0zbKTf95gEl4Hca0Z6x53wQ2yc5TrYMcWCEbQON6Zpepyl8SZIsHcUUlkGiVcTbJjpXqKWq84LVa8r6WlJCFwU9lHGV56rLOAKUlAMd6SNYsEhLAV5tvrovaL82a78L9mAk4cvcue2ahh7HXpcq1J61DlFTNyVH92blKF2eQplSWUAh7FKQ9IjvB8dHAUHdg7jHrLHSMxZYxoK2nhtHm8hCFNoF5xCtGTKaLYt94m0ld2d6HaIM0CRH6WvvOjtjfgfpf8eA7Y8jT6ipJNWhX0zOjppVuji71WLdY4rPLbs6pQXjQIIBgQOKcvt1K44AQ26aGjVinJWpNMBQyftWxyIakcMg30oZg5xUaEpl2SmXp9e9JuLAkBQKOUtE215JBPxulJa2TVhTCNhSe81VAnH2XkC2PHOC3pXrNy45wyqsdC6kUg6IpkaOVeGQBuDwR08qgGF0HAZc0Wz1bGcbYEpMVXVjGuECjb88u1G566RPFJQcEQDZCnduVpW5rmABZK41hdwuNZmne3Hc4a7xkrkWgQ4bt2B1PyaOmBWRZvNXZPlmKVgiYEqajopbn5akZrLDBgvWQ4LjjS0SIVvg7P0SJYlnMdZBylRH6NNKrEXvk0bJJPxnOiofkJvxXG1IJnFzQvJ5xHhmT4dMebnGkcrvI0gfQa4ijjC2BfOKBHD1dQaoe6y6yY2d5OVAhxVYuuYNHMwBmUL2gdYr43uppAzDFjyc7qjOlKHOz6iVfpu6vXMM7l2YHfdXkkLl4Mfw6vCxRpcD6EtMI6cZu7dZBINfrvTj13Kb6imuPeVkThVVMPc8tWuUJ0UF1HZpR6QsncnSrFE4VdapCVhNkNtNSRNReUnWeWnvOzuc0YJYhjUUphDUvjJSOHE0om2T4Jyql2S2Qef4F2jKj3Z6hI3md52GGJVT0kxXfAdvMK8tSMCNnTOxiCbVHGBDYnw6NQ0jdoPo5XmMuKaXYmG8gnDQiesTAYEdFEbuNrKvbadak5lV3yUhLCevpl09UZ3fjONnhOJRb9XyRyNQoFqEiSMmBU5aW0RhbgBhsR0aUCIsu0BIidGq4s0reOLjDYMmlvJ9Y9ydJSYFovPVIE55FDb0gLwFNiH5xaaNJsy58ZMeIB5rKUMI09CMEG1hLTTzlz7FSiX7BXyo83nNYXmjp96YFH7biMpwvGO38x5F56e08Vm8yrdhRNa1Zx4GZ3eXr1CXMjGIj62DOrTfZHqNFVmImFCbh1DwADIjDPDe8blWB7j4lKppexuYUTOKrdC24bfjuv4wXBNxp43WBbQ7hF4NBq0zVqJ8kPi4rOQ92EBUpe2xdNXSUEYmda0hnBnO7G9IeoNJHSSwa2IvR3KuH9Iu8OzrZzKMwOAAS0OvWLiSuFbnGsJ0NlKAQVS3H1rOIOZwHUGStGTSmgKIKrZBMxBoDWNJwLwJEAWgBHS2uNhDNLS0fYs3ezjGqFbXZJn8e3U0w8jKsAqaXCaLKV0M3bATwgErzdQr2wTZwd2C6vkCCFxzfdP3efmPwlOtdNQcH2CpQ7jKd5bZMe39CjQdhBnFPfbaQ71dKuL8otK7qTmjN22NGkAOPEA6cI2t3X30sPT9HsYWZam7ZVmvh0EG1FgiX2ZZHnYeme8e5vj5685nvAes2SNaHiUnesf2hWbj2l33nOWEAjBDNFVfpDwRhwAcf5EW7iuXYflzHHFDYx9OsB0XwrZUgKxOv9M88fwEmXxQ4lm8TL7d804VIMGiFKuf7s8wqxzSxyImYPvH8YK36kPuqijSIejTYiR6iuRTJlc3g6GHPTyrAhi2npwi2XMHUlN5gMXyMNDfhRK0CsI1waYLE4fPrw031rA3scU8jy8VFKcbdT6tgDhcYM18Bmfi6gn7dO1wFwNePEQDQFoS0CJbD70dBMBdGgWxYiSsFwTG88vzgksdjOOS2WJljesgNGBLvoYfn33TWopbw0gJdkJpvziLfiEQLHNOULvDKeuMHhDlUrP3vhCzTB1Pl1nRx5rmjuCk5zZyjZk1VNA5Szz6Uu80g7DnCHxcuaIq9X6pdDHjlj0mVRTu423hV1ByJ4Gu6F5HesK3CyftfB02p1KEixThluk1NLWQliGC9xhW60afuKCCSMKd13AfNx44Tg3WiA6IJP2y3VhBSPY5xaKeuK4NFWVFw37LdAjNof7mbrl3S7JzhGGIUo9oD5eQCbKFCHTW5faTggvi7XkA7b28Ddo3KjfzkBX4BZUU8at3zpqzgYokub7PhbdYTdHzk4TNaYKyMhvLyINzrBoT4Yg8275izDATA0lAUZ3gB4uAGF7KZSwQIWW4FgLAnBFs9BxDLJ2wS850U6cKrEGK21R4fLvx5pL9eGvMgSy73MklEaktwBXMydpUB0pxMaibo6G4A5XhVdMVtBmujQW5FEk3ktwNxZSIrK6lVkDptLjMGQfKUR4KHvL8yO9MqTfaAAwaBtiEgjtHZXdCLFXc5uQf5zhXM5a8hhPE9P5CSXhNyWDlihAqRvG7ELN0fOefcCnYwHFZ2BGrvVC1B0C0TWaNEQrcaZC40EvqfZMpBxztD6iXhg7yhylMmAN0cL9JhvIzBj9xuxJhLPUtwBUD4waHu9z3zTj9n6XHTBE4ZufJraHLLMgWfmuEUvaeN7rJ9pKoSyDFzCGklprPb3NB5dTTsUxWrS3Wp9MmJss4mjuhKJpEoETb6j8ap92nCn4h6ca7uDN9Gburs8MO1eiEGol7nsIKWO7U7vLjKm6lCW53sKSFmtgzPkl8nW9WQtUmO2UUBWp0ykdAvIVV2JQdASC7Ici8FqD1iuAnvWzKNzYDNUTCARlDsatZNr47ZRyiGzbfAEOVPRTxE0JcIdWlYneXW2BY2gcnzKHmm0GyYSXVxkwTtdqy9Rt2aE0JUJjsBjAkduljURhKKETP3o2es5WDeCRzyauXD3p3zaHLPaHYK518WXtGXo7kAuO4Ga1d75N68I0smKU9Cikjo8TYEgE6Z4Zi9VAvI7CiHTFfkH8HTAGJZlGbZefXlzTLsxRK9s6xJswn85pPIWEF08DrFLSY14ci6wjXcN4ocAMTI6yQbOhtAKcI4JlD1LEE7kKVPQekViFZWw8olJ3qVs3v5G6AFixsAyiqAGtvyqESTV4P6dUcMfLjIqUXO4XCQzmQX6jbqQidqxOtivYsuyC4qa89Ud4N8ySmfoqdrRqEfBpw8hH0ZNXTtHzM1ElOiwbMqm2V0EckdH0M5OCmwS9KOVRZa9CywbhVOdPgbtUUZGlthrL617BGkuDDaXblYIc3SibkpbJ8AL8gVt65exdzKjhq0mqiRD1vDNdQ5MFGd5tHr75g2Bx0kJeCHQoqZJdnYEKEi8Q2DL3LAUDK4G4ClR4rZSv4FQ9tBLSVMeEDbCTURSeAoSVG9PvXXVTiWNJtLWRtsIusQppH3PuMzfl5O9mkaub1mdI5s4hGPUt6PblcS0qZkY6t4knWK9jiQVXsIeoJvx4BgPJdjoNj5P3oUWZZDXyJucBp1TTUjABFFFy089QHZP9GPPGVjERZ01l14TROQOVCh09xycy42gIE0Nn6K9DvDhlqpwft5RERdXuoqfT0IdlMbWjvIevfynwuKBCv83P1A7C9NiT1HOd5ND9KQSckk83mOK5TVPnI1K2No548xmDAePnAraGxwn69V8HIhVewqmBH8jRtWRyZh5IhWMqfxxEahI9L7GzxWoD6A3UCVnIwZQlkIrHFYrip2CKIsoIW1Nho3SEo8WddA9cwdCvj54ELI4pACpMks1jhU5ShDqYOZX18mkiJ7TKpFmroexVcez9fYD4kva0EQvqL3ooruyO4AdzyX1YHQquKhYqEV6LSL75pq2qpmGbqKZdZGzkj7g6SfEbKvYQSLT8E2tn5U2RhMDhBPXMgmQUOFHgAaKv4dsP4MdLKdvkZbr4gk4WjJ2kTdYB7GPVV8RH9ucpybZfloxxiq52CqtQ223mQa04KRo7i3vP0ICC7oBmkO4Qfps4ThtGIPrbNFCvq1PsWhnbCJsAQA4SKPtYqWlOnyu3fUs4b7tXDASs4ddiYKXxsxslTjUVM5N4AEaISgJAcjLbaMQ0JhRMtTdB4OyiX431C2SlXBufypKYNH1LH8SPw5qKHBU1g4knwdOGJvwPtvPFObohlmSXl9fsNFrXk2gxfFZOXwAcP9wGMc52WN6rOVdaGrBAloynI3J48rP9HFioCeODajXyammqbzsKsERuw7ypmdmbc7bIR1O5aEfOAOtomfqv74uvbQ8X2ja0yd3VkpEtleIFZ8MQZOrupyQudeI8FlOcXe0V6Z7oeBpbbqKCexlZyQ05P688ebQcIwJQbVDWSqJAmhSnmViNhT5gQUDuMvFawbFdYFTzFqwksQw3KBs6SqXrutPvN2AiQ6YE98GeHybsAHV0u1kZFDhSif8NSV9k52NQmuc31MuifUvetKlDnZRdF5kCJ0cCEWjNHzHanr7e7SvsqUINRnyJMz9u13MOF8BSdZARywRcF2SxhmcDaP4RtfiNpGNCHCAJpQENywAIsiP0uVY3FVdEWq8s0riIKn00uzsDQrDj1VzwhfWXgpndyRCdEy87b7tkq33dJaRNa43urqpMRqejHasn9B2KLluIgZ2LwtXPAlhut0h4QD6ZNw4mjsCf6dmHby4kFTlgVQlHvMRx8tQfAMyMF6GIBQrYtxaOrwn2Oj1mGoywPaC8MfJFCPR59U4Ec80WwaZBBQo3269oHRcXhpywozz7BlbnYHLdrOLrRqmYcSJni8jFV3flqlDOXIqCgxX7SLi4NIuiKGPADiZ1LDDlrogWZ3Pom0NLK0R5v1JcDY9UBYdE3cB9gGAWoeQ6y7ZPxnTp7awSVVl6jfJNt73qNhZsBMCQs2sLJWuUite3WnHL4VM2vZTAwj3w4hK4Hmq8J7y1QlDlm4uTd6T1uHK0OXujM6lge80jOPczMPR8sbN9dO7Uu2eVTjJUDYKR0fvHy8oxI28YamrCarnD6eIzA3vGo0wSUHvuTaENZHlHnIcRyk77MMaoUh9hM6vhJfUjteuQKH1I7trgEbGEIo1KxAJMnKAX9hdaJgbKPZSEk86Xo0a0oIUHRok2e3RmiT30rpo7fcNLhIBvkVxFqC3xTuTFOHX3s5ufgzeZOzTFvLOgtolBiJBo4CXa8GVoxeHVfHjWacGyhNbFjG9hPUR5vfuBeFjgZxo5OvTl6uSkGQRLyEGY3j4QPfZcW04YyaoNcsDlHZlNdC9Bj2ZDuvTAtNCLb86eYspVLPgLwzbaXRgxEMMLyUfqZtDiYszVsP0Uh9D9sQMmouaU6FH0u3AROhbRpQsXPIDC2HuSyNXzPnuwMxIU6h9mz4dA1AEAwlv5A1cPcyeRyMbakNG6KWnSZXDyvO4fFLKee2pgYHqF9ZJ8HBSKOBzTDECOStVSHBiPDBPLsLbGEaMSDZsL7FRmWMXwzikcSnTfjL9qxNzcl2YHO4Boo3Pd1Xfvk8FdDie2hRzN9tXleGKh4ioK8r3vIkJtyxhvcCe2ftIqvUcEPziSzU6cizIwgDxSS3pey65tVuy7KRrxHO70TlDBMZzR9kHBulZf1Nh9hjsgwabPZh8kNKaUS4bBjSFFxrZg18r3r19xkQf76wBhAn2H3NZ5tkQF1iLuSyXbfFuP7fqg3OU5vFalMDGdHX9bZt1qkzLRWvZGP7SXH7jQm0JoaaA1Ihwu70JZAY2yXmU6iRDIEnjSBaIASerIGVWHMigWoENqnf8Q1ioBjiNtuzLilFEA7YlNY18mz0LOFWFsWVKoaFAV2i1RzZ58MDYqqocUuL4N6BID36nDVt8L20w0izoYob461hBTAXLbxnFAyJB5Nyc7ztGQh00yoTKe3Vf3gwIgLTjMpmsXk4ArtNsONriNdUulOQb8xo3BU53eTzejbMOFTApK3wUXa8SPBJfNfASPZF5q5m5pheIxsbOzQUW7tMqQjKIwCcOegt3aNJ7mD6UB5EGeepv3gd8LZ7WwkoBXp8ppd1T3HeV2iUtohz3PoCRW0fKXV5kus9itLfoKPHXYCKZQF7h5zK6IG44UMhsigHOqHj22xzORKk31Xh9RMtXhTntqf6ISvM2K6UwVhoQWgqqPlziGZ1I4Dzn7rwbmNmZDG9aOOY2PDRmlA159hg5zRiIJs15Zifl4ML7dZdxDEZKTT0nB7DblBNsqWrJ5DHyjia8IfoWiqf9rh37IlRIgI6hi6ID3obuvTs2SpyK8UX0uToNIphwlbMr2LDdh8Trivdl5zYZOTDGQkOBUJLcL0sk4ViqGN9rzGJVjpA6F0YuNhPHQMJUHG4PXirXOJPjTd3hCd2SksPeiLoDazkb5gL8K61jPeqHtBSEgqFMrqCK9DE13db12XD40UbqR8TqnolDwabnIbNj24LQRZbYyYhH9SyxC0Up7igUVWDNitcWQd74MdDlJArFcZtVHsCrcBkwfvMFysvz29pcdrsh85LUXpGSX20z1n31wJLtUhAPYLwvEWnOLVzY91ASPQzkISpzkDey9rkm9pPrv6UukkhY563GpfbWEjmmufjlgHFbpugZjj2Cc6UrRhKPENGCep4UBFLbxOp4pa5qcfOwcBvwHlrMuW9fUNOGPaNWVPXwD8AWlnMnmRc1l7arH9YVUncAFcYcXmwZM2p1ZHZ9JpCQ0qjhSo7W0Om7TKq9t1Dyqip77CAh76j85AX9oG6n2cWVMNYmORXQiO3mPZJljtHIJjFg8ZOFJkBbmNkPFR84E19vV8Uqxr70RUQPNasoqEFXTWYCLXBTAfGhaWqTvmO2KFQ5nttfVZK8M3WfHXQmKUXbk9WG1R4mC7UsQPAsH7MhZvlW0tKNmkI61u3eAprvkWdHdYQoo3bkuZuyQpTW88DfWuAyKZlRSOYj6nfdUuzRcokCig0AoMlnNptWhxyAJ70ZRwKHRM7qQ3zZFIyAcEPmEbzzJe4CeMnuWMThYFkQG01CBCZ9uSClFzz1Xm1rBYjvflLjJyyxhcy9QbBs2NY7rJBjn42xtXd1K9a1C9XyPNuI2fyzTUeZSOKaHo4R4LjVpaz2hbEXMBPeNvKYxYH7Gw7SrGlegnDTTZpGD8zgoxmtIQIUnMoktbxzMphgZoU5Is0tSHyP9ikBH6CtKf5awYiWEVn3Lw2JT8asj7LIp89Lzr9LhJgYT7EzG4N3xHosCOs0xdBaJAXg6e3EtzjqUa8MlZFaFha35EbLjaxCqGGSeg09dBuCrzEYiFVihXrSL4fKZhbA6bmsLmzn64uqij4IB2VJwnAtl3JrNtm10ca3gPQCUVxQjWHjpCBRKYiw7MgcziBgzxgWHGUvDuGaJOGroPXMUH41nAR3piqbf3FHzwmM311tAWDPEynSkCp9b99JGoxZjG2rLJKyCogWYH1FywpMziSB1bLIe53B1ESNHj8oBtQpgkkA3lKBVJhm5kOy33GXwB0lHAZuEEUWWUDbvc4n4DTK4KGHALu9CQzn2GDv791c7u5Gx6eZF7AYk78DblUX9qPjIu4jgn4W6TGPpARxkd4GromUcn1goDOhT6BfugGUlsVKGxJLSR4nIoDHpScgSY43VYUEyd9VBjoTSFayVkqLM9SE5kAaC4eLjaokHzqvt6Z6j6xogatu98gdRvj1HwToYK2d8pnpN89AjtyYa4wtK7to1y0zTNAJHBxew3L5cFFYO5BEFEmpRvVEkWouLipyxdRKFcnkfEO9x73ZeDJXGYBPkiOZJc7ZxlbpFdZxFQHLjaAXmCpUL96JqkjgeJ8L5onNeAKGCWAPQcx78GUj4dWB3S1ldrNIzQfNcHpFLJ0Asm87Lccei1StUxalEb5TlYcbq2rgjW9MKdDYtN2ohcBej17eoVoSvwy47K2pftPDXrFVLhetnplEcIjMz3jWpVzlspxIu4NFzgaSDxHKePqbdofpZahZG1tqm6nj9kijlokk9rtneBoFVeJe4Ah3zscqAodWa9jW5aNfCb4wJydOIaOipWtjombk5N4J46kQP96ASP4LFznct6tShCCAz6uuXslnW9ANffqBWKGwHWdCUSX6vCuyHXQYEXyRZzRZhcpmQ8yH1VEUAcgcXDH0lmj0coiT2gagYwY0CWu2GRklSg60l9MWXKjq6csddK0WUmIkpN9D0xPQEeFyZ0XBi6nhR6qx4xPIMRVkhLOXuTtxA07GWoJ8d3ldsbHbRjxDwWwey7LKrRNETTn4N1RckqUujTitdohs8pVoA42p0i92lktyzWS1LB4O2u2ZAEvb8l4MwRmBM0xRnoE7FQwdyYpGdzSnU4yt8u97I1zE3UcZCONCKY5sfX4FekbM48HoOHXaTfPUanGtvFiPOI1F8EezbgZEJIYzuJKeiLVXnQJThW1KNtMxfZ358zHgUKVoK2PFmGPvxdSNPZFyyR72cvKysGMNo7AiZ2EPAEvC0JCMc0pB727H5UJnWjz68hzNozhsyps47YPojyVmfmDRm8R6PigQArtP4Wo2XAgjhX7ICxKBtLOQ4ZZOm826MXp7YGnQD743Sf9Wia9iMlnghRXuSq79Xwp68SmIghDOBt1NQQiMmAfbA58w7LarRsE4jLXYst7c9feB7rnvvwZnYutMf3oXeJNM0QlILcZOldJz3jGiLb3YS2ywuXs2gbwKkOLRdy5KhHRwjzt6yovTTw7KV2P0ybBpSnRITGdHZ8730uh7DmNC1FeFvIht3OqKjCzHg6lZkTZytNHpBsh0zkWfajYhuXssjOPbNJ8JqmkQghxUCwKSOlpxiW7mFauRSQ8AFGSrXFl68nVhoMcO8a1N9FrLnuCifeOlJ2KqlrnbSl9j8DCBEeGRrHlEhsevcblWrteJJmKHgrVC00DkjARAdovektSuSPSmt852JaIaf9KoOT8nDRn8r7wKhaCJQDbvN4rz7XQ13cBrZivgkMpqFuq4jmJcXhKskviMuDzisQ9xxOEQdtGQws44yirFCyg6dfAVAMMHTIBpvjzwqdRFmyI5zWZA1odm0Gd4kDUDikAY8SDTLA4CLU7vheXalLHmew58YqkED0rofBcRVeKTetswbLvampvwwFjKJ2jSwFdOfgrbqyyWkIGNVC1eSPqcF6MGit0L8Xk7XqObnohyGhrGTaiTAxVeo6Z4IKAUEP3JqiZQ2QRoojq2UhTqV88i60sdtzxkkfzjLA8XgUMVofpaFvFmtTaLQcAhw0LuSuVk4kFDJxm4PSiuPj3jCHokm6pwCtxGJZx8OqnlEdC7ftZFr6WcNzpLQo30KO1zycNgDmIaobTnPl8bTJtPNkKd3nErjHUgRume1fe3EOpdUl9T728FNaGxre7kdSnMVRz06HigallZEzvH56qAQLwwMCfCWJ6dX48rOFvhuT5EABOTVM0p67zu02wKsraSvLdsqE9uoR8gzIJoUFt50eyKrnoC6lXNGSES5nFRqRj2wLBsX5KTAMzPCJyAuaNOfMCNJyP3wLj3dFZhkOaVZ5n9XLsuuEY9tiEbgOzhz6150COEn6AAIbS3D1bBV3U1SHmW60qsZFaiEyZk6AZsiKuVDuAGbdpzhww7sfmbs0eSOiCOWWkfixmzqBBEwS8aaXkYBUIFJ19sX8EYJFZlwwbPx5iNsi55QNtuRKboSLzxKDwgVTFFalqEGX1dOUIVYw8LVOdMxdzmSCKIX0oE13xCN6liJDCMqKyf8N1JdlcKzA0xYr60E8EfWTQhIHSmGZGNehAgpXXdCkaFfPLIuSNh86KKRMiZXZQHkZISNu12AT78woHto5ssMLy8ms2QPOB9Py4wwotAu0Bdkk4hKQGOkH7g1n2r4eIj3QWhgKx16eig8U2ApwoxJouoJyIR0sOrusQ7u5O54ky08IHNHxDwIlR7FqpQrLsw2mEaNg4lEWOTFffAx5zK34vxnmWa5Ng0pmebdIrFsdeyv7jUiI4i1srfonpVSnCCfj8R3hQKLw07oUTUBn3t49rYFrcxTer1tsO8EbA2oiIO31AfagspBBxJcpCdFaJiKcR1vQsZG1I0LYNzB4ToFnuYSDsGi80n0uIyg6mgz0SamU0aS3R7VroHcWJJwRtp0jZJGjMaSifMGtEaU0NIvUHdKmKh2k2bXNeAdyUsMR33Trj1d3JV2pNlRL39n7gv3M5N7AllN12rWid5TvQ8cfo9zdSJ2UBwT4upwu4pGmEIxm9Cl5fp2xiimhQT9qCRIA2Ym8xLMsND51Dql2mZQTTYxp5ioww3S5PkotmAox3MrnD39gwvupV37GxbBw9bkNRAv92krI7Cd6MFrNnm8AsAD4Sex23WUDIln2cMlNwhN3qi7oeo0RYYXZ6INuaBCoYChxzvCvAqhlo25irhWJkoap9ODUBgaEuWLeCyXnTOpEOc7gW10NkTALaN1poWHu9UxOFnuUz8se0EXoVxih1OYujQ6Q5i369IxNRncaTOVFmpWn5thDEokxaliQOeJtCoffZdE6DEkXbumcMgX3cY74M5STy89GTgyp1J9mwjgk21QuhP9A1UkEJXO9DpxXyNzPV4E9CW4kwoAbWM1luTycTyEj0JOutbTlj2dEKo5Ge1w36MsiDiqeC5RGFqdUqdoq3GEjtqqgV4m3Lvoauh0NNZoDmwP3Hlo0skHZDIeONtBwDKGjoLrdGab5wWCU0Di2mhgMQHEUU6buNiBBUrjNTxw9vIxEBjvlPBRRg3Mv0yrmVMLLQHrANS9tLdGtGGLR2oAfqMjNFJueA5NQBWgeMvxnI2CIWyhGBqa78Ib0i6gAqNvUvGUPkiVdc53kqIPRike2b8o4DSIgMemTlz3tD5umh4vXypcvSwxQ6s8wP7a9W4ovHJgi4Wws0bhFsud9pXNvw5Tycn2bXpGnwHFj9MZJVebVS2XwZk6rT5AFXlBWInb2sMZMXa38aR05FlFSFfgue39OzLNMM3yKNDPf9CKINoyKehoY1wuhLz7wtrCMZGfvPHGtBvkbQKMBIUjKmd6RuyNHL2eNYvpKb19jddbXlDx4rPhe23BvHxuAyZHzdGyOqGnfxsC7SFqZFBB7BHZphoHFu0th4oDMgxeF48voezif5ZgL9VhTI0W66ZOKpZMDvq4QUPIz4qKSNYRPxjaf3LHP2vxxMnKwktK7hcZvZSjR9Id8niKGamU1ueI3YDUr9h1vobvVml8DAoc5IEtHk8oe0PQ9tbynxB5ujAshgH3fw9kr7AAlhQiqIau49oUWC0egEK1Hn4nLFkdvBs9dUGccBOKxEKZBMjc0BCCT94sX7YjGMRDKDKtFdEyBDz1IYCLwRWDNiodTtGXnmkCslrt34qVWRrfphAhTekp9jneiTa4j4NhpQ3w1nnAK87YnQ0icYLDX5O5Vj0gapFB3X95oOtaoofbCypwoVg0lrg32WWfpcwF2LGgELNdSFFWt4CXoyc7VsK7YK53GnlgBt6mbU8XNHMpfm8XWcssVWowAJOEZIJjnvY8to1ifizLY8950WhH1ML80cfC18fDX4NTEVN3iaUr21GhXWzkH4TNRJLx1LYDQs5JMUvwKLRwkJAZOzd22o7USYbsYDf7u0SffZ3jOx9ArAhnt9Fa1F9opmZZEajtC9qPRJDhNprjlxXZo8uXfyjhUbjm3Rg2zx04Lk8T59FIViIZLfLU8gc1372vMHAh0ndHtPjfGsv0agBtjtTkn2iQSIcr8skwdymGDGXgGqwLQ8vyqpoRT9xlSDyxmbBEsRvMteNLoSSulepqUs7YCTOpDW0GOlCLmAp3NMSKJNa8u8WndksQWBcTE8ELSGi2THwmwQXLj5QNPiqJBqVfjdAa35TYbhS2cAKqQ1OCW3aPrjzSlHiLKeGAtPpCU5BAk0dMScgTQvdbyxnKbJshPJeqJ2CDyvZ02NGYuxKG82MbZARuh0hKQh044PL6k2PbfXGzZCsdFqi06ODv9boI08lv5x6AMcJvV7rWgCZGD96A2KaC6mK3QNTAYnV4o03x4LgZtRIdUE6xKxESCW46pC5JxqLpxMeLYzJA1il6qk7gw37lc9asKceTTtyO8jdFp9pwuQqpdkgm4woKYXTgruX4W6OvBlMcUerGqZDUFC6dBdTkOuAS7FibvydwqCuL3ntWvRJWldqCaLJO5fe87wN3D0vc1h6qt4rPSc5AZSqpXi147adkjoHwz6FOvQwBN6MVUzUFWtI0mgL3ao1LjfBuCeDaRriNIFeeuaHtj2YMOV1HHm0JbVL7xrH14wydVN30ejmxWq6OIndYyEb8CAxStQN6JOVU49gy00l4b4qRD73TdsMw8mBOosr89ZOfpfIvDqNJnENgD2sXlaq7R5lBKMx4Xz3NwoosEWxR9Seab3DNVaygAAmjrjZ0LNMDtBTeUmghBp5IGhFOMxzUiaFiqNRRWfdbpiE85eLHHnvpWcWVwiGN6tty5ftsahD03WlYg135jZFXpRsId8HyGGHI8yAZRdWszuBJrZVPGYhjgJyzhaSNevFkAv3DuxXuBbTfsvlFOnQDRvBMeTKUueokLnEpht2D17c2bfgLemRi3vv5LNnedmcNAlOEVwpCvHtDUInzKpCCjgCtwaXxqc6hMk3KPs5aDxLzALgoS7wL8Y9Au0EAYyqZlEJ0IrRfQwv5yHO3VwXksFQI8kI0wvyEkzkfJbtu3q6bmUcN1J2X6PZLo87XoNXrOs6c9PbG5PoxF2myrWdid33I5MLOYUULphfhkB4eTh2Shc84Vh2dBXEtwBi5XJIzqCSykw6wyuHoUYysqChgziyCPUSoX77dnG6l4EvFseg5yxOdCr9G0xT16Gymi1noQ664WHVwcETZX1HdDzzLQJizsAp5nHgDXEAJShzK97LzcHLBvDtWU33nhVEewSqGRiKJkCUHwWYZcxCakSwbcqnOaGoUNqafc47e3HuUSYH4N4S0KOdvB8El06tIHLy57BoZAUcYO5tp6iaxoLsZSfNaYcAFUwDLMixqeRkrsIdAfPxetrUpQChoGCoNFYfdyZQpAq77eyxVU0Nmg5sSG0norMR8LzrF7S8QhpY1sfLtRtyY9BB9ZgXFhDBFKkGXMXUjemVTaAoSllOrrwOXCT2rPQJJoIVWDWCV5uNmv6Cose21L6d2rLSSYC3gPceF3BVPfz9SWj6g59ANyE00BHwS15RBvVqnXhma0SoPIG3DTJpDzcXJ6XjEtRrTjuTUFvuJSymRIFCxtMMxXUmZokCz5s9ppcZxNnCVaa2zZwvVo19BmJ6lBLVyO9VGwZUTKKmtmT5qGHVDW7XcvGHnNXRB1tDbax8wccVpRhlSxKHA3EFPWLn495DtchYNJLNOUMRQm6o62iYEx6v4UGmPFw1CONVXofoV61668qaJ6jvSoLhwfUYzev3pjvsw59EebAFhyzWvJmJAlTxJqFFfVj0DmkVTa0CpqeI5GLL4Aa84W5Oh2VWCgG20SGEMODCJOftfozt5CoCmcxWs6QDDw2Tra9Tsui90NPEQlO7YKnJiauhaSMfim1YQXi0fg1lNJLuJKLd98si3nt3I9r6HRHL38tnWR1bjzxH6PMxgysbivWgiAGO9Ovo6MV8MhAK19mUQGEJVgrTXsO9CAVivU0HzvIEeZwFDBWp5v4zv11JBKv9eNMoOdd1pqr9mtXnMMPAIpJWcvuUgbYys7tRVUdKn1a4PFgnftzgm to localhost on port 9000
Full contents sent:
abcdefg
hijklmnop
1234567890
9876543210

Tests complete with success!
~/assignment-2-jainaneesh/server ~/assignment-2-jainaneesh/assignment-autotest/test/assignment5 ~/assignment-2-jainaneesh
~/assignment-2-jainaneesh/assignment-autotest/test/assignment5 ~/assignment-2-jainaneesh
Waiting for aesdsocket application with pid 10877 to terminate
Re-running sockettest.sh with valgrind
~/assignment-2-jainaneesh/server ~/assignment-2-jainaneesh/assignment-autotest/test/assignment5 ~/assignment-2-jainaneesh
~/assignment-2-jainaneesh/assignment-autotest/test/assignment5 ~/assignment-2-jainaneesh/server ~/assignment-2-jainaneesh/assignment-autotest/test/assignment5 ~/assignment-2-jainaneesh
Waiting for aesdsocket application to start
Starting valgrind
Valgrind and aesdsocket complete
[0;31mValidation Error:Valgrind failed with 1[0m
Valgrind output error log:
==10933== Memcheck, a memory error detector
==10933== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==10933== Using Valgrind-3.15.0-608cb11914-20190413 and LibVEX; rerun with -h for copyright info
==10933== Command: ./aesdsocket
==10933== Parent PID: 10931
==10933== 
--10933-- 
--10933-- Valgrind options:
--10933--    --error-exitcode=1
--10933--    --leak-check=full
--10933--    --show-leak-kinds=all
--10933--    --track-origins=yes
--10933--    --errors-for-leak-kinds=definite
--10933--    --verbose
--10933--    --log-file=valgrind-out.txt
--10933-- Contents of /proc/version:
--10933--   Linux version 5.15.0-131-generic (buildd@lcy02-amd64-072) (gcc (Ubuntu 9.4.0-1ubuntu1~20.04.2) 9.4.0, GNU ld (GNU Binutils for Ubuntu) 2.34) #141~20.04.1-Ubuntu SMP Thu Jan 16 18:38:51 UTC 2025
--10933-- 
--10933-- Arch and hwcaps: AMD64, LittleEndian, amd64-cx16-lzcnt-rdtscp-sse3-ssse3-avx-avx2-bmi-f16c-rdrand
--10933-- Page sizes: currently 4096, max supported 4096
--10933-- Valgrind library directory: /usr/lib/x86_64-linux-gnu/valgrind
--10933-- Reading syms from /home/linux-o-phile/assignment-2-jainaneesh/server/aesdsocket
--10933-- Reading syms from /usr/lib/x86_64-linux-gnu/ld-2.31.so
--10933--   Considering /usr/lib/debug/.build-id/cb/904567e1b2a460b6fc20817776ad590d265686.debug ..
--10933--   .. build-id is valid
--10933-- Reading syms from /usr/lib/x86_64-linux-gnu/valgrind/memcheck-amd64-linux
--10933--    object doesn't have a symbol table
--10933--    object doesn't have a dynamic symbol table
--10933-- Scheduler: using generic scheduler lock implementation.
--10933-- Reading suppressions file: /usr/lib/x86_64-linux-gnu/valgrind/default.supp
==10933== embedded gdbserver: reading from /tmp/vgdb-pipe-from-vgdb-to-10933-by-linux-o-phile-on-???
==10933== embedded gdbserver: writing to   /tmp/vgdb-pipe-to-vgdb-from-10933-by-linux-o-phile-on-???
==10933== embedded gdbserver: shared mem   /tmp/vgdb-pipe-shared-mem-vgdb-10933-by-linux-o-phile-on-???
==10933== 
==10933== TO CONTROL THIS PROCESS USING vgdb (which you probably
==10933== don't want to do, unless you know exactly what you're doing,
==10933== or are doing some strange experiment):
==10933==   /usr/lib/x86_64-linux-gnu/valgrind/../../bin/vgdb --pid=10933 ...command...
==10933== 
==10933== TO DEBUG THIS PROCESS USING GDB: start GDB like this
==10933==   /path/to/gdb ./aesdsocket
==10933== and then give GDB the following command
==10933==   target remote | /usr/lib/x86_64-linux-gnu/valgrind/../../bin/vgdb --pid=10933
==10933== --pid is optional if only one valgrind process is running
==10933== 
--10933-- REDIR: 0x4022e20 (ld-linux-x86-64.so.2:strlen) redirected to 0x580c9ce2 (???)
--10933-- REDIR: 0x4022bf0 (ld-linux-x86-64.so.2:index) redirected to 0x580c9cfc (???)
--10933-- Reading syms from /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_core-amd64-linux.so
--10933--    object doesn't have a symbol table
--10933-- Reading syms from /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so
--10933--    object doesn't have a symbol table
==10933== WARNING: new redirection conflicts with existing -- ignoring it
--10933--     old: 0x04022e20 (strlen              ) R-> (0000.0) 0x580c9ce2 ???
--10933--     new: 0x04022e20 (strlen              ) R-> (2007.0) 0x0483f060 strlen
--10933-- REDIR: 0x401f600 (ld-linux-x86-64.so.2:strcmp) redirected to 0x483ffd0 (strcmp)
--10933-- REDIR: 0x4023380 (ld-linux-x86-64.so.2:mempcpy) redirected to 0x4843a20 (mempcpy)
--10933-- Reading syms from /usr/lib/x86_64-linux-gnu/libc-2.31.so
--10933--   Considering /usr/lib/debug/.build-id/03/23ab4806bee6f846d9ad4bccfc29afdca49a58.debug ..
--10933--   .. build-id is valid
--10933-- REDIR: 0x48fd480 (libc.so.6:memmove) redirected to 0x48311d0 (_vgnU_ifunc_wrapper)
--10933-- REDIR: 0x48fc780 (libc.so.6:strncpy) redirected to 0x48311d0 (_vgnU_ifunc_wrapper)
--10933-- REDIR: 0x48fd7b0 (libc.so.6:strcasecmp) redirected to 0x48311d0 (_vgnU_ifunc_wrapper)
--10933-- REDIR: 0x48fc0a0 (libc.so.6:strcat) redirected to 0x48311d0 (_vgnU_ifunc_wrapper)
--10933-- REDIR: 0x48fc7e0 (libc.so.6:rindex) redirected to 0x48311d0 (_vgnU_ifunc_wrapper)
--10933-- REDIR: 0x48fec50 (libc.so.6:rawmemchr) redirected to 0x48311d0 (_vgnU_ifunc_wrapper)
--10933-- REDIR: 0x4919ce0 (libc.so.6:wmemchr) redirected to 0x48311d0 (_vgnU_ifunc_wrapper)
--10933-- REDIR: 0x4919820 (libc.so.6:wcscmp) redirected to 0x48311d0 (_vgnU_ifunc_wrapper)
--10933-- REDIR: 0x48fd5e0 (libc.so.6:mempcpy) redirected to 0x48311d0 (_vgnU_ifunc_wrapper)
--10933-- REDIR: 0x48fd410 (libc.so.6:bcmp) redirected to 0x48311d0 (_vgnU_ifunc_wrapper)
--10933-- REDIR: 0x48fc710 (libc.so.6:strncmp) redirected to 0x48311d0 (_vgnU_ifunc_wrapper)
--10933-- REDIR: 0x48fc150 (libc.so.6:strcmp) redirected to 0x48311d0 (_vgnU_ifunc_wrapper)
--10933-- REDIR: 0x48fd540 (libc.so.6:memset) redirected to 0x48311d0 (_vgnU_ifunc_wrapper)
--10933-- REDIR: 0x49197e0 (libc.so.6:wcschr) redirected to 0x48311d0 (_vgnU_ifunc_wrapper)
--10933-- REDIR: 0x48fc670 (libc.so.6:strnlen) redirected to 0x48311d0 (_vgnU_ifunc_wrapper)
--10933-- REDIR: 0x48fc230 (libc.so.6:strcspn) redirected to 0x48311d0 (_vgnU_ifunc_wrapper)
--10933-- REDIR: 0x48fd800 (libc.so.6:strncasecmp) redirected to 0x48311d0 (_vgnU_ifunc_wrapper)
--10933-- REDIR: 0x48fc1d0 (libc.so.6:strcpy) redirected to 0x48311d0 (_vgnU_ifunc_wrapper)
--10933-- REDIR: 0x48fd950 (libc.so.6:memcpy@@GLIBC_2.14) redirected to 0x48311d0 (_vgnU_ifunc_wrapper)
--10933-- REDIR: 0x491af50 (libc.so.6:wcsnlen) redirected to 0x48311d0 (_vgnU_ifunc_wrapper)
--10933-- REDIR: 0x4919860 (libc.so.6:wcscpy) redirected to 0x48311d0 (_vgnU_ifunc_wrapper)
--10933-- REDIR: 0x48fc820 (libc.so.6:strpbrk) redirected to 0x48311d0 (_vgnU_ifunc_wrapper)
--10933-- REDIR: 0x48fc100 (libc.so.6:index) redirected to 0x48311d0 (_vgnU_ifunc_wrapper)
--10933-- REDIR: 0x48fc630 (libc.so.6:strlen) redirected to 0x48311d0 (_vgnU_ifunc_wrapper)
--10933-- REDIR: 0x4905bb0 (libc.so.6:memrchr) redirected to 0x48311d0 (_vgnU_ifunc_wrapper)
--10933-- REDIR: 0x48fd850 (libc.so.6:strcasecmp_l) redirected to 0x48311d0 (_vgnU_ifunc_wrapper)
--10933-- REDIR: 0x48fd3d0 (libc.so.6:memchr) redirected to 0x48311d0 (_vgnU_ifunc_wrapper)
--10933-- REDIR: 0x4919930 (libc.so.6:wcslen) redirected to 0x48311d0 (_vgnU_ifunc_wrapper)
--10933-- REDIR: 0x48fcae0 (libc.so.6:strspn) redirected to 0x48311d0 (_vgnU_ifunc_wrapper)
--10933-- REDIR: 0x48fd750 (libc.so.6:stpncpy) redirected to 0x48311d0 (_vgnU_ifunc_wrapper)
--10933-- REDIR: 0x48fd6f0 (libc.so.6:stpcpy) redirected to 0x48311d0 (_vgnU_ifunc_wrapper)
--10933-- REDIR: 0x48fec90 (libc.so.6:strchrnul) redirected to 0x48311d0 (_vgnU_ifunc_wrapper)
--10933-- REDIR: 0x48fd8a0 (libc.so.6:strncasecmp_l) redirected to 0x48311d0 (_vgnU_ifunc_wrapper)
--10933-- REDIR: 0x49e5730 (libc.so.6:__strrchr_avx2) redirected to 0x483ea10 (rindex)
--10933-- REDIR: 0x48f70e0 (libc.so.6:malloc) redirected to 0x483b780 (malloc)
--10933-- REDIR: 0x48f8b10 (libc.so.6:calloc) redirected to 0x483dce0 (calloc)
--10933-- REDIR: 0x49e5540 (libc.so.6:__strchrnul_avx2) redirected to 0x4843540 (strchrnul)
--10933-- REDIR: 0x49e5900 (libc.so.6:__strlen_avx2) redirected to 0x483ef40 (strlen)
--10933-- REDIR: 0x48f76d0 (libc.so.6:free) redirected to 0x483c9d0 (free)
--10933-- REDIR: 0x49e8910 (libc.so.6:__memcpy_avx_unaligned_erms) redirected to 0x48429f0 (memmove)
--10933-- REDIR: 0x48fcfa0 (libc.so.6:__GI_strstr) redirected to 0x4843ca0 (__strstr_sse2)
--10933-- REDIR: 0x49e1ef0 (libc.so.6:__memcmp_avx2_movbe) redirected to 0x48421e0 (bcmp)
--10933-- REDIR: 0x49e0df0 (libc.so.6:__strcmp_avx2) redirected to 0x483fed0 (strcmp)
--10933-- REDIR: 0x49e8d90 (libc.so.6:__memset_avx2_unaligned_erms) redirected to 0x48428e0 (memset)
--10933-- REDIR: 0x48f7e80 (libc.so.6:realloc) redirected to 0x483df30 (realloc)
==10933== 
==10933== HEAP SUMMARY:
==10933==     in use at exit: 0 bytes in 0 blocks
==10933==   total heap usage: 12 allocs, 12 frees, 15,648 bytes allocated
==10933== 
==10933== All heap blocks were freed -- no leaks are possible
==10933== 
==10933== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
deleting marker file /tmp/tmp.8M1toAwoMB
~/assignment-2-jainaneesh/assignment-autotest/test/assignment5 ~/assignment-2-jainaneesh/assignment-autotest/test/assignment5 ~/assignment-2-jainaneesh/server ~/assignment-2-jainaneesh/assignment-autotest/test/assignment5 ~/assignment-2-jainaneesh
Testing target localhost on port 9000
sending string abcdefg to localhost on port 9000
Differences found after sending abcdefg to localhost on port 9000
Expected contents to match:
abcdefg
But found contents:
With differences
--- /tmp/tmp.tnlPkwcoiQ	2025-02-08 15:54:14.341170094 -0500
+++ /tmp/tmp.mT3CJXgAgU	2025-02-08 15:54:14.337170115 -0500
@@ -1 +0,0 @@
-abcdefg
Test complete with failure
[0;31mValidation Error:sockettest.sh returned 1 attempting to run against native compiled aesdsocket instance running under valgrind[0m
Stopping valgrind and aesdsocket process at pid 
kill: usage: kill [-s sigspec | -n signum | -sigspec] pid | jobspec ... or kill -l [sigspec]
Validation failed with error list :sockettest.sh returned 1 attempting to run against native compiled aesdsocket instance running under valgrind
Test of assignment assignment5 failed with rc=1
Running test with user linux-o-phile
-- Generating ;/home/linux-o-phile/assignment-2-jainaneesh/assignment-autotest/test/assignment1/Test_hello_Runner.c;/home/linux-o-phile/assignment-2-jainaneesh/assignment-autotest/test/assignment1/Test_assignment_validate_Runner.c from test/assignment1/Test_hello.c;test/assignment1/Test_assignment_validate.c
-- Building executable including ;/home/linux-o-phile/assignment-2-jainaneesh/assignment-autotest/test/assignment1/Test_hello_Runner.c;/home/linux-o-phile/assignment-2-jainaneesh/assignment-autotest/test/assignment1/Test_assignment_validate_Runner.c test/assignment1/Test_hello.c;test/assignment1/Test_assignment_validate.c and ../examples/autotest-validate/autotest-validate.c
-- Configuring done
-- Generating done
-- Build files have been written to: /home/linux-o-phile/assignment-2-jainaneesh/build
[ 10%] Building C object assignment-autotest/Unity/src/CMakeFiles/unity.dir/unity.c.o
[ 20%] Linking C static library libunity.a
[ 20%] Built target unity
[ 30%] Generating ../../assignment-autotest/test/assignment1/Test_hello_Runner.c, ../../assignment-autotest/test/assignment1/Test_assignment_validate_Runner.c, ../../assignment-autotest/test/unity_runner.c
Test files for auto dependency generation test/assignment1/Test_hello.c test/assignment1/Test_assignment_validate.c
Autogenerating runner for test/assignment1/Test_hello.c
Autogenerating runner for test/assignment1/Test_assignment_validate.c
Autogenerating test/unity_runner.c
Scanning dependencies of target assignment-autotest
[ 40%] Building C object assignment-autotest/CMakeFiles/assignment-autotest.dir/test/assignment1/Test_hello.c.o
[ 50%] Building C object assignment-autotest/CMakeFiles/assignment-autotest.dir/test/assignment1/Test_assignment_validate.c.o
[ 60%] Building C object assignment-autotest/CMakeFiles/assignment-autotest.dir/test/assignment1/Test_hello_Runner.c.o
[ 70%] Building C object assignment-autotest/CMakeFiles/assignment-autotest.dir/test/assignment1/Test_assignment_validate_Runner.c.o
[ 80%] Building C object assignment-autotest/CMakeFiles/assignment-autotest.dir/__/examples/autotest-validate/autotest-validate.c.o
[ 90%] Building C object assignment-autotest/CMakeFiles/assignment-autotest.dir/test/unity_runner.c.o
[100%] Linking C executable assignment-autotest
[100%] Built target assignment-autotest
/home/linux-o-phile/assignment-2-jainaneesh/assignment-autotest/test/assignment1/Test_hello.c:6:test_hello:INFO: Hello!  Your unity setup is working!
/home/linux-o-phile/assignment-2-jainaneesh/assignment-autotest/test/assignment1/Test_hello.c:4:test_hello:PASS

-----------------------
1 Tests 0 Failures 0 Ignored 
OK
/home/linux-o-phile/assignment-2-jainaneesh/assignment-autotest/test/assignment1/Test_assignment_validate.c:9:test_assignment_validate:PASS

-----------------------
1 Tests 0 Failures 0 Ignored 
OK
Executing assignment test script
~/assignment-2-jainaneesh/assignment-autotest/test/assignment5 ~/assignment-2-jainaneesh
~/assignment-2-jainaneesh/server ~/assignment-2-jainaneesh/assignment-autotest/test/assignment5 ~/assignment-2-jainaneesh
rm -f aesdsocket aesdsocket.o
gcc -Wall -Wextra -g -o aesdsocket aesdsocket.c
aesdsocket.c: In function ‘main’:
aesdsocket.c:108:4: warning: ‘return’ with no value, in function returning non-void [-Wreturn-type]
  108 |    return;
      |    ^~~~~~
aesdsocket.c:61:5: note: declared here
   61 | int main(int argc, char *argv[])
      |     ^~~~
~/assignment-2-jainaneesh/assignment-autotest/test/assignment5 ~/assignment-2-jainaneesh/server ~/assignment-2-jainaneesh/assignment-autotest/test/assignment5 ~/assignment-2-jainaneesh
~/assignment-2-jainaneesh/assignment-autotest/test/assignment5 ~/assignment-2-jainaneesh/assignment-autotest/test/assignment5 ~/assignment-2-jainaneesh/server ~/assignment-2-jainaneesh/assignment-autotest/test/assignment5 ~/assignment-2-jainaneesh
Testing target localhost on port 9000
sending string abcdefg to localhost on port 9000
sending string hijklmnop to localhost on port 9000
sending string 1234567890 to localhost on port 9000
sending string 9876543210 to localhost on port 9000
Sending long string from long_string.txt file
sending string  to localhost on port 9000
Full contents sent:
abcdefg
hijklmnop
1234567890
9876543210

Tests complete with success!
~/assignment-2-jainaneesh/server ~/assignment-2-jainaneesh/assignment-autotest/test/assignment5 ~/assignment-2-jainaneesh
~/assignment-2-jainaneesh/assignment-autotest/test/assignment5 ~/assignment-2-jainaneesh
Waiting for aesdsocket application with pid 11106 to terminate
Re-running sockettest.sh with valgrind
~/assignment-2-jainaneesh/server ~/assignment-2-jainaneesh/assignment-autotest/test/assignment5 ~/assignment-2-jainaneesh
~/assignment-2-jainaneesh/assignment-autotest/test/assignment5 ~/assignment-2-jainaneesh/server ~/assignment-2-jainaneesh/assignment-autotest/test/assignment5 ~/assignment-2-jainaneesh
Waiting for aesdsocket application to start
Starting valgrind
Valgrind and aesdsocket complete
[0;31mValidation Error:Valgrind failed with 1[0m
Valgrind output error log:
==11162== Memcheck, a memory error detector
==11162== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==11162== Using Valgrind-3.15.0-608cb11914-20190413 and LibVEX; rerun with -h for copyright info
==11162== Command: ./aesdsocket
==11162== Parent PID: 11160
==11162== 
--11162-- 
--11162-- Valgrind options:
--11162--    --error-exitcode=1
--11162--    --leak-check=full
--11162--    --show-leak-kinds=all
--11162--    --track-origins=yes
--11162--    --errors-for-leak-kinds=definite
--11162--    --verbose
--11162--    --log-file=valgrind-out.txt
--11162-- Contents of /proc/version:
--11162--   Linux version 5.15.0-131-generic (buildd@lcy02-amd64-072) (gcc (Ubuntu 9.4.0-1ubuntu1~20.04.2) 9.4.0, GNU ld (GNU Binutils for Ubuntu) 2.34) #141~20.04.1-Ubuntu SMP Thu Jan 16 18:38:51 UTC 2025
--11162-- 
--11162-- Arch and hwcaps: AMD64, LittleEndian, amd64-cx16-lzcnt-rdtscp-sse3-ssse3-avx-avx2-bmi-f16c-rdrand
--11162-- Page sizes: currently 4096, max supported 4096
--11162-- Valgrind library directory: /usr/lib/x86_64-linux-gnu/valgrind
--11162-- Reading syms from /home/linux-o-phile/assignment-2-jainaneesh/server/aesdsocket
--11162-- Reading syms from /usr/lib/x86_64-linux-gnu/ld-2.31.so
--11162--   Considering /usr/lib/debug/.build-id/cb/904567e1b2a460b6fc20817776ad590d265686.debug ..
--11162--   .. build-id is valid
--11162-- Reading syms from /usr/lib/x86_64-linux-gnu/valgrind/memcheck-amd64-linux
--11162--    object doesn't have a symbol table
--11162--    object doesn't have a dynamic symbol table
--11162-- Scheduler: using generic scheduler lock implementation.
--11162-- Reading suppressions file: /usr/lib/x86_64-linux-gnu/valgrind/default.supp
==11162== embedded gdbserver: reading from /tmp/vgdb-pipe-from-vgdb-to-11162-by-linux-o-phile-on-???
==11162== embedded gdbserver: writing to   /tmp/vgdb-pipe-to-vgdb-from-11162-by-linux-o-phile-on-???
==11162== embedded gdbserver: shared mem   /tmp/vgdb-pipe-shared-mem-vgdb-11162-by-linux-o-phile-on-???
==11162== 
==11162== TO CONTROL THIS PROCESS USING vgdb (which you probably
==11162== don't want to do, unless you know exactly what you're doing,
==11162== or are doing some strange experiment):
==11162==   /usr/lib/x86_64-linux-gnu/valgrind/../../bin/vgdb --pid=11162 ...command...
==11162== 
==11162== TO DEBUG THIS PROCESS USING GDB: start GDB like this
==11162==   /path/to/gdb ./aesdsocket
==11162== and then give GDB the following command
==11162==   target remote | /usr/lib/x86_64-linux-gnu/valgrind/../../bin/vgdb --pid=11162
==11162== --pid is optional if only one valgrind process is running
==11162== 
--11162-- REDIR: 0x4022e20 (ld-linux-x86-64.so.2:strlen) redirected to 0x580c9ce2 (???)
--11162-- REDIR: 0x4022bf0 (ld-linux-x86-64.so.2:index) redirected to 0x580c9cfc (???)
--11162-- Reading syms from /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_core-amd64-linux.so
--11162--    object doesn't have a symbol table
--11162-- Reading syms from /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so
--11162--    object doesn't have a symbol table
==11162== WARNING: new redirection conflicts with existing -- ignoring it
--11162--     old: 0x04022e20 (strlen              ) R-> (0000.0) 0x580c9ce2 ???
--11162--     new: 0x04022e20 (strlen              ) R-> (2007.0) 0x0483f060 strlen
--11162-- REDIR: 0x401f600 (ld-linux-x86-64.so.2:strcmp) redirected to 0x483ffd0 (strcmp)
--11162-- REDIR: 0x4023380 (ld-linux-x86-64.so.2:mempcpy) redirected to 0x4843a20 (mempcpy)
--11162-- Reading syms from /usr/lib/x86_64-linux-gnu/libc-2.31.so
--11162--   Considering /usr/lib/debug/.build-id/03/23ab4806bee6f846d9ad4bccfc29afdca49a58.debug ..
--11162--   .. build-id is valid
--11162-- REDIR: 0x48fd480 (libc.so.6:memmove) redirected to 0x48311d0 (_vgnU_ifunc_wrapper)
--11162-- REDIR: 0x48fc780 (libc.so.6:strncpy) redirected to 0x48311d0 (_vgnU_ifunc_wrapper)
--11162-- REDIR: 0x48fd7b0 (libc.so.6:strcasecmp) redirected to 0x48311d0 (_vgnU_ifunc_wrapper)
--11162-- REDIR: 0x48fc0a0 (libc.so.6:strcat) redirected to 0x48311d0 (_vgnU_ifunc_wrapper)
--11162-- REDIR: 0x48fc7e0 (libc.so.6:rindex) redirected to 0x48311d0 (_vgnU_ifunc_wrapper)
--11162-- REDIR: 0x48fec50 (libc.so.6:rawmemchr) redirected to 0x48311d0 (_vgnU_ifunc_wrapper)
--11162-- REDIR: 0x4919ce0 (libc.so.6:wmemchr) redirected to 0x48311d0 (_vgnU_ifunc_wrapper)
--11162-- REDIR: 0x4919820 (libc.so.6:wcscmp) redirected to 0x48311d0 (_vgnU_ifunc_wrapper)
--11162-- REDIR: 0x48fd5e0 (libc.so.6:mempcpy) redirected to 0x48311d0 (_vgnU_ifunc_wrapper)
--11162-- REDIR: 0x48fd410 (libc.so.6:bcmp) redirected to 0x48311d0 (_vgnU_ifunc_wrapper)
--11162-- REDIR: 0x48fc710 (libc.so.6:strncmp) redirected to 0x48311d0 (_vgnU_ifunc_wrapper)
--11162-- REDIR: 0x48fc150 (libc.so.6:strcmp) redirected to 0x48311d0 (_vgnU_ifunc_wrapper)
--11162-- REDIR: 0x48fd540 (libc.so.6:memset) redirected to 0x48311d0 (_vgnU_ifunc_wrapper)
--11162-- REDIR: 0x49197e0 (libc.so.6:wcschr) redirected to 0x48311d0 (_vgnU_ifunc_wrapper)
--11162-- REDIR: 0x48fc670 (libc.so.6:strnlen) redirected to 0x48311d0 (_vgnU_ifunc_wrapper)
--11162-- REDIR: 0x48fc230 (libc.so.6:strcspn) redirected to 0x48311d0 (_vgnU_ifunc_wrapper)
--11162-- REDIR: 0x48fd800 (libc.so.6:strncasecmp) redirected to 0x48311d0 (_vgnU_ifunc_wrapper)
--11162-- REDIR: 0x48fc1d0 (libc.so.6:strcpy) redirected to 0x48311d0 (_vgnU_ifunc_wrapper)
--11162-- REDIR: 0x48fd950 (libc.so.6:memcpy@@GLIBC_2.14) redirected to 0x48311d0 (_vgnU_ifunc_wrapper)
--11162-- REDIR: 0x491af50 (libc.so.6:wcsnlen) redirected to 0x48311d0 (_vgnU_ifunc_wrapper)
--11162-- REDIR: 0x4919860 (libc.so.6:wcscpy) redirected to 0x48311d0 (_vgnU_ifunc_wrapper)
--11162-- REDIR: 0x48fc820 (libc.so.6:strpbrk) redirected to 0x48311d0 (_vgnU_ifunc_wrapper)
--11162-- REDIR: 0x48fc100 (libc.so.6:index) redirected to 0x48311d0 (_vgnU_ifunc_wrapper)
--11162-- REDIR: 0x48fc630 (libc.so.6:strlen) redirected to 0x48311d0 (_vgnU_ifunc_wrapper)
--11162-- REDIR: 0x4905bb0 (libc.so.6:memrchr) redirected to 0x48311d0 (_vgnU_ifunc_wrapper)
--11162-- REDIR: 0x48fd850 (libc.so.6:strcasecmp_l) redirected to 0x48311d0 (_vgnU_ifunc_wrapper)
--11162-- REDIR: 0x48fd3d0 (libc.so.6:memchr) redirected to 0x48311d0 (_vgnU_ifunc_wrapper)
--11162-- REDIR: 0x4919930 (libc.so.6:wcslen) redirected to 0x48311d0 (_vgnU_ifunc_wrapper)
--11162-- REDIR: 0x48fcae0 (libc.so.6:strspn) redirected to 0x48311d0 (_vgnU_ifunc_wrapper)
--11162-- REDIR: 0x48fd750 (libc.so.6:stpncpy) redirected to 0x48311d0 (_vgnU_ifunc_wrapper)
--11162-- REDIR: 0x48fd6f0 (libc.so.6:stpcpy) redirected to 0x48311d0 (_vgnU_ifunc_wrapper)
--11162-- REDIR: 0x48fec90 (libc.so.6:strchrnul) redirected to 0x48311d0 (_vgnU_ifunc_wrapper)
--11162-- REDIR: 0x48fd8a0 (libc.so.6:strncasecmp_l) redirected to 0x48311d0 (_vgnU_ifunc_wrapper)
--11162-- REDIR: 0x49e5730 (libc.so.6:__strrchr_avx2) redirected to 0x483ea10 (rindex)
--11162-- REDIR: 0x48f70e0 (libc.so.6:malloc) redirected to 0x483b780 (malloc)
--11162-- REDIR: 0x48f8b10 (libc.so.6:calloc) redirected to 0x483dce0 (calloc)
--11162-- REDIR: 0x49e5540 (libc.so.6:__strchrnul_avx2) redirected to 0x4843540 (strchrnul)
--11162-- REDIR: 0x49e5900 (libc.so.6:__strlen_avx2) redirected to 0x483ef40 (strlen)
--11162-- REDIR: 0x48f76d0 (libc.so.6:free) redirected to 0x483c9d0 (free)
--11162-- REDIR: 0x49e8910 (libc.so.6:__memcpy_avx_unaligned_erms) redirected to 0x48429f0 (memmove)
--11162-- REDIR: 0x48fcfa0 (libc.so.6:__GI_strstr) redirected to 0x4843ca0 (__strstr_sse2)
--11162-- REDIR: 0x49e1ef0 (libc.so.6:__memcmp_avx2_movbe) redirected to 0x48421e0 (bcmp)
--11162-- REDIR: 0x49e0df0 (libc.so.6:__strcmp_avx2) redirected to 0x483fed0 (strcmp)
--11162-- REDIR: 0x49e8d90 (libc.so.6:__memset_avx2_unaligned_erms) redirected to 0x48428e0 (memset)
--11162-- REDIR: 0x48f7e80 (libc.so.6:realloc) redirected to 0x483df30 (realloc)
==11162== 
==11162== HEAP SUMMARY:
==11162==     in use at exit: 0 bytes in 0 blocks
==11162==   total heap usage: 12 allocs, 12 frees, 15,648 bytes allocated
==11162== 
==11162== All heap blocks were freed -- no leaks are possible
==11162== 
==11162== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
deleting marker file /tmp/tmp.BsMh7EB9uc
~/assignment-2-jainaneesh/assignment-autotest/test/assignment5 ~/assignment-2-jainaneesh/assignment-autotest/test/assignment5 ~/assignment-2-jainaneesh/server ~/assignment-2-jainaneesh/assignment-autotest/test/assignment5 ~/assignment-2-jainaneesh
Testing target localhost on port 9000
sending string abcdefg to localhost on port 9000
Differences found after sending abcdefg to localhost on port 9000
Expected contents to match:
abcdefg
But found contents:
With differences
--- /tmp/tmp.FwGLEnpYkg	2025-02-08 16:02:23.520555059 -0500
+++ /tmp/tmp.ulDz6YPQXw	2025-02-08 16:02:23.512555046 -0500
@@ -1 +0,0 @@
-abcdefg
Test complete with failure
[0;31mValidation Error:sockettest.sh returned 1 attempting to run against native compiled aesdsocket instance running under valgrind[0m
Stopping valgrind and aesdsocket process at pid 
kill: usage: kill [-s sigspec | -n signum | -sigspec] pid | jobspec ... or kill -l [sigspec]
Validation failed with error list :sockettest.sh returned 1 attempting to run against native compiled aesdsocket instance running under valgrind
Test of assignment assignment5 failed with rc=1
Running test with user linux-o-phile
-- Generating ;/home/linux-o-phile/assignment-2-jainaneesh/assignment-autotest/test/assignment1/Test_hello_Runner.c;/home/linux-o-phile/assignment-2-jainaneesh/assignment-autotest/test/assignment1/Test_assignment_validate_Runner.c from test/assignment1/Test_hello.c;test/assignment1/Test_assignment_validate.c
-- Building executable including ;/home/linux-o-phile/assignment-2-jainaneesh/assignment-autotest/test/assignment1/Test_hello_Runner.c;/home/linux-o-phile/assignment-2-jainaneesh/assignment-autotest/test/assignment1/Test_assignment_validate_Runner.c test/assignment1/Test_hello.c;test/assignment1/Test_assignment_validate.c and ../examples/autotest-validate/autotest-validate.c
-- Configuring done
-- Generating done
-- Build files have been written to: /home/linux-o-phile/assignment-2-jainaneesh/build
[ 10%] Building C object assignment-autotest/Unity/src/CMakeFiles/unity.dir/unity.c.o
[ 20%] Linking C static library libunity.a
[ 20%] Built target unity
[ 30%] Generating ../../assignment-autotest/test/assignment1/Test_hello_Runner.c, ../../assignment-autotest/test/assignment1/Test_assignment_validate_Runner.c, ../../assignment-autotest/test/unity_runner.c
Test files for auto dependency generation test/assignment1/Test_hello.c test/assignment1/Test_assignment_validate.c
Autogenerating runner for test/assignment1/Test_hello.c
Autogenerating runner for test/assignment1/Test_assignment_validate.c
Autogenerating test/unity_runner.c
Scanning dependencies of target assignment-autotest
[ 40%] Building C object assignment-autotest/CMakeFiles/assignment-autotest.dir/test/assignment1/Test_hello.c.o
[ 50%] Building C object assignment-autotest/CMakeFiles/assignment-autotest.dir/test/assignment1/Test_assignment_validate.c.o
[ 60%] Building C object assignment-autotest/CMakeFiles/assignment-autotest.dir/test/assignment1/Test_hello_Runner.c.o
[ 70%] Building C object assignment-autotest/CMakeFiles/assignment-autotest.dir/test/assignment1/Test_assignment_validate_Runner.c.o
[ 80%] Building C object assignment-autotest/CMakeFiles/assignment-autotest.dir/__/examples/autotest-validate/autotest-validate.c.o
[ 90%] Building C object assignment-autotest/CMakeFiles/assignment-autotest.dir/test/unity_runner.c.o
[100%] Linking C executable assignment-autotest
[100%] Built target assignment-autotest
/home/linux-o-phile/assignment-2-jainaneesh/assignment-autotest/test/assignment1/Test_hello.c:6:test_hello:INFO: Hello!  Your unity setup is working!
/home/linux-o-phile/assignment-2-jainaneesh/assignment-autotest/test/assignment1/Test_hello.c:4:test_hello:PASS

-----------------------
1 Tests 0 Failures 0 Ignored 
OK
/home/linux-o-phile/assignment-2-jainaneesh/assignment-autotest/test/assignment1/Test_assignment_validate.c:9:test_assignment_validate:PASS

-----------------------
1 Tests 0 Failures 0 Ignored 
OK
Executing assignment test script
~/assignment-2-jainaneesh/assignment-autotest/test/assignment5 ~/assignment-2-jainaneesh
~/assignment-2-jainaneesh/server ~/assignment-2-jainaneesh/assignment-autotest/test/assignment5 ~/assignment-2-jainaneesh
rm -f aesdsocket aesdsocket.o
gcc -Wall -Wextra -g -o aesdsocket aesdsocket.c
aesdsocket.c: In function ‘main’:
aesdsocket.c:108:4: warning: ‘return’ with no value, in function returning non-void [-Wreturn-type]
  108 |    return;
      |    ^~~~~~
aesdsocket.c:61:5: note: declared here
   61 | int main(int argc, char *argv[])
      |     ^~~~
[0;31mValidation Error:starting aesdocket failed with 1[0m
~/assignment-2-jainaneesh/assignment-autotest/test/assignment5 ~/assignment-2-jainaneesh/server ~/assignment-2-jainaneesh/assignment-autotest/test/assignment5 ~/assignment-2-jainaneesh
~/assignment-2-jainaneesh/assignment-autotest/test/assignment5 ~/assignment-2-jainaneesh/assignment-autotest/test/assignment5 ~/assignment-2-jainaneesh/server ~/assignment-2-jainaneesh/assignment-autotest/test/assignment5 ~/assignment-2-jainaneesh
Testing target localhost on port 9000
sending string abcdefg to localhost on port 9000
sending string hijklmnop to localhost on port 9000
sending string 1234567890 to localhost on port 9000
sending string 9876543210 to localhost on port 9000
Sending long string from long_string.txt file
sending string  to localhost on port 9000
Full contents sent:
abcdefg
hijklmnop
1234567890
9876543210

Tests complete with success!
~/assignment-2-jainaneesh/server ~/assignment-2-jainaneesh/assignment-autotest/test/assignment5 ~/assignment-2-jainaneesh
~/assignment-2-jainaneesh/assignment-autotest/test/assignment5 ~/assignment-2-jainaneesh
Waiting for aesdsocket application with pid 11185 to terminate
Re-running sockettest.sh with valgrind
~/assignment-2-jainaneesh/server ~/assignment-2-jainaneesh/assignment-autotest/test/assignment5 ~/assignment-2-jainaneesh
~/assignment-2-jainaneesh/assignment-autotest/test/assignment5 ~/assignment-2-jainaneesh/server ~/assignment-2-jainaneesh/assignment-autotest/test/assignment5 ~/assignment-2-jainaneesh
Waiting for aesdsocket application to start
Starting valgrind
Valgrind and aesdsocket complete
[0;31mValidation Error:Valgrind failed with 1[0m
Valgrind output error log:
==11363== Memcheck, a memory error detector
==11363== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==11363== Using Valgrind-3.15.0-608cb11914-20190413 and LibVEX; rerun with -h for copyright info
==11363== Command: ./aesdsocket
==11363== Parent PID: 11361
==11363== 
--11363-- 
--11363-- Valgrind options:
--11363--    --error-exitcode=1
--11363--    --leak-check=full
--11363--    --show-leak-kinds=all
--11363--    --track-origins=yes
--11363--    --errors-for-leak-kinds=definite
--11363--    --verbose
--11363--    --log-file=valgrind-out.txt
--11363-- Contents of /proc/version:
--11363--   Linux version 5.15.0-131-generic (buildd@lcy02-amd64-072) (gcc (Ubuntu 9.4.0-1ubuntu1~20.04.2) 9.4.0, GNU ld (GNU Binutils for Ubuntu) 2.34) #141~20.04.1-Ubuntu SMP Thu Jan 16 18:38:51 UTC 2025
--11363-- 
--11363-- Arch and hwcaps: AMD64, LittleEndian, amd64-cx16-lzcnt-rdtscp-sse3-ssse3-avx-avx2-bmi-f16c-rdrand
--11363-- Page sizes: currently 4096, max supported 4096
--11363-- Valgrind library directory: /usr/lib/x86_64-linux-gnu/valgrind
--11363-- Reading syms from /home/linux-o-phile/assignment-2-jainaneesh/server/aesdsocket
--11363-- Reading syms from /usr/lib/x86_64-linux-gnu/ld-2.31.so
--11363--   Considering /usr/lib/debug/.build-id/cb/904567e1b2a460b6fc20817776ad590d265686.debug ..
--11363--   .. build-id is valid
--11363-- Reading syms from /usr/lib/x86_64-linux-gnu/valgrind/memcheck-amd64-linux
--11363--    object doesn't have a symbol table
--11363--    object doesn't have a dynamic symbol table
--11363-- Scheduler: using generic scheduler lock implementation.
--11363-- Reading suppressions file: /usr/lib/x86_64-linux-gnu/valgrind/default.supp
==11363== embedded gdbserver: reading from /tmp/vgdb-pipe-from-vgdb-to-11363-by-linux-o-phile-on-???
==11363== embedded gdbserver: writing to   /tmp/vgdb-pipe-to-vgdb-from-11363-by-linux-o-phile-on-???
==11363== embedded gdbserver: shared mem   /tmp/vgdb-pipe-shared-mem-vgdb-11363-by-linux-o-phile-on-???
==11363== 
==11363== TO CONTROL THIS PROCESS USING vgdb (which you probably
==11363== don't want to do, unless you know exactly what you're doing,
==11363== or are doing some strange experiment):
==11363==   /usr/lib/x86_64-linux-gnu/valgrind/../../bin/vgdb --pid=11363 ...command...
==11363== 
==11363== TO DEBUG THIS PROCESS USING GDB: start GDB like this
==11363==   /path/to/gdb ./aesdsocket
==11363== and then give GDB the following command
==11363==   target remote | /usr/lib/x86_64-linux-gnu/valgrind/../../bin/vgdb --pid=11363
==11363== --pid is optional if only one valgrind process is running
==11363== 
--11363-- REDIR: 0x4022e20 (ld-linux-x86-64.so.2:strlen) redirected to 0x580c9ce2 (???)
--11363-- REDIR: 0x4022bf0 (ld-linux-x86-64.so.2:index) redirected to 0x580c9cfc (???)
--11363-- Reading syms from /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_core-amd64-linux.so
--11363--    object doesn't have a symbol table
--11363-- Reading syms from /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so
--11363--    object doesn't have a symbol table
==11363== WARNING: new redirection conflicts with existing -- ignoring it
--11363--     old: 0x04022e20 (strlen              ) R-> (0000.0) 0x580c9ce2 ???
--11363--     new: 0x04022e20 (strlen              ) R-> (2007.0) 0x0483f060 strlen
--11363-- REDIR: 0x401f600 (ld-linux-x86-64.so.2:strcmp) redirected to 0x483ffd0 (strcmp)
--11363-- REDIR: 0x4023380 (ld-linux-x86-64.so.2:mempcpy) redirected to 0x4843a20 (mempcpy)
--11363-- Reading syms from /usr/lib/x86_64-linux-gnu/libc-2.31.so
--11363--   Considering /usr/lib/debug/.build-id/03/23ab4806bee6f846d9ad4bccfc29afdca49a58.debug ..
--11363--   .. build-id is valid
--11363-- REDIR: 0x48fd480 (libc.so.6:memmove) redirected to 0x48311d0 (_vgnU_ifunc_wrapper)
--11363-- REDIR: 0x48fc780 (libc.so.6:strncpy) redirected to 0x48311d0 (_vgnU_ifunc_wrapper)
--11363-- REDIR: 0x48fd7b0 (libc.so.6:strcasecmp) redirected to 0x48311d0 (_vgnU_ifunc_wrapper)
--11363-- REDIR: 0x48fc0a0 (libc.so.6:strcat) redirected to 0x48311d0 (_vgnU_ifunc_wrapper)
--11363-- REDIR: 0x48fc7e0 (libc.so.6:rindex) redirected to 0x48311d0 (_vgnU_ifunc_wrapper)
--11363-- REDIR: 0x48fec50 (libc.so.6:rawmemchr) redirected to 0x48311d0 (_vgnU_ifunc_wrapper)
--11363-- REDIR: 0x4919ce0 (libc.so.6:wmemchr) redirected to 0x48311d0 (_vgnU_ifunc_wrapper)
--11363-- REDIR: 0x4919820 (libc.so.6:wcscmp) redirected to 0x48311d0 (_vgnU_ifunc_wrapper)
--11363-- REDIR: 0x48fd5e0 (libc.so.6:mempcpy) redirected to 0x48311d0 (_vgnU_ifunc_wrapper)
--11363-- REDIR: 0x48fd410 (libc.so.6:bcmp) redirected to 0x48311d0 (_vgnU_ifunc_wrapper)
--11363-- REDIR: 0x48fc710 (libc.so.6:strncmp) redirected to 0x48311d0 (_vgnU_ifunc_wrapper)
--11363-- REDIR: 0x48fc150 (libc.so.6:strcmp) redirected to 0x48311d0 (_vgnU_ifunc_wrapper)
--11363-- REDIR: 0x48fd540 (libc.so.6:memset) redirected to 0x48311d0 (_vgnU_ifunc_wrapper)
--11363-- REDIR: 0x49197e0 (libc.so.6:wcschr) redirected to 0x48311d0 (_vgnU_ifunc_wrapper)
--11363-- REDIR: 0x48fc670 (libc.so.6:strnlen) redirected to 0x48311d0 (_vgnU_ifunc_wrapper)
--11363-- REDIR: 0x48fc230 (libc.so.6:strcspn) redirected to 0x48311d0 (_vgnU_ifunc_wrapper)
--11363-- REDIR: 0x48fd800 (libc.so.6:strncasecmp) redirected to 0x48311d0 (_vgnU_ifunc_wrapper)
--11363-- REDIR: 0x48fc1d0 (libc.so.6:strcpy) redirected to 0x48311d0 (_vgnU_ifunc_wrapper)
--11363-- REDIR: 0x48fd950 (libc.so.6:memcpy@@GLIBC_2.14) redirected to 0x48311d0 (_vgnU_ifunc_wrapper)
--11363-- REDIR: 0x491af50 (libc.so.6:wcsnlen) redirected to 0x48311d0 (_vgnU_ifunc_wrapper)
--11363-- REDIR: 0x4919860 (libc.so.6:wcscpy) redirected to 0x48311d0 (_vgnU_ifunc_wrapper)
--11363-- REDIR: 0x48fc820 (libc.so.6:strpbrk) redirected to 0x48311d0 (_vgnU_ifunc_wrapper)
--11363-- REDIR: 0x48fc100 (libc.so.6:index) redirected to 0x48311d0 (_vgnU_ifunc_wrapper)
--11363-- REDIR: 0x48fc630 (libc.so.6:strlen) redirected to 0x48311d0 (_vgnU_ifunc_wrapper)
--11363-- REDIR: 0x4905bb0 (libc.so.6:memrchr) redirected to 0x48311d0 (_vgnU_ifunc_wrapper)
--11363-- REDIR: 0x48fd850 (libc.so.6:strcasecmp_l) redirected to 0x48311d0 (_vgnU_ifunc_wrapper)
--11363-- REDIR: 0x48fd3d0 (libc.so.6:memchr) redirected to 0x48311d0 (_vgnU_ifunc_wrapper)
--11363-- REDIR: 0x4919930 (libc.so.6:wcslen) redirected to 0x48311d0 (_vgnU_ifunc_wrapper)
--11363-- REDIR: 0x48fcae0 (libc.so.6:strspn) redirected to 0x48311d0 (_vgnU_ifunc_wrapper)
--11363-- REDIR: 0x48fd750 (libc.so.6:stpncpy) redirected to 0x48311d0 (_vgnU_ifunc_wrapper)
--11363-- REDIR: 0x48fd6f0 (libc.so.6:stpcpy) redirected to 0x48311d0 (_vgnU_ifunc_wrapper)
--11363-- REDIR: 0x48fec90 (libc.so.6:strchrnul) redirected to 0x48311d0 (_vgnU_ifunc_wrapper)
--11363-- REDIR: 0x48fd8a0 (libc.so.6:strncasecmp_l) redirected to 0x48311d0 (_vgnU_ifunc_wrapper)
--11363-- REDIR: 0x49e5730 (libc.so.6:__strrchr_avx2) redirected to 0x483ea10 (rindex)
--11363-- REDIR: 0x48f70e0 (libc.so.6:malloc) redirected to 0x483b780 (malloc)
--11363-- REDIR: 0x48f8b10 (libc.so.6:calloc) redirected to 0x483dce0 (calloc)
--11363-- REDIR: 0x49e5540 (libc.so.6:__strchrnul_avx2) redirected to 0x4843540 (strchrnul)
--11363-- REDIR: 0x49e5900 (libc.so.6:__strlen_avx2) redirected to 0x483ef40 (strlen)
--11363-- REDIR: 0x48f76d0 (libc.so.6:free) redirected to 0x483c9d0 (free)
--11363-- REDIR: 0x49e8910 (libc.so.6:__memcpy_avx_unaligned_erms) redirected to 0x48429f0 (memmove)
--11363-- REDIR: 0x48fcfa0 (libc.so.6:__GI_strstr) redirected to 0x4843ca0 (__strstr_sse2)
--11363-- REDIR: 0x49e1ef0 (libc.so.6:__memcmp_avx2_movbe) redirected to 0x48421e0 (bcmp)
--11363-- REDIR: 0x49e0df0 (libc.so.6:__strcmp_avx2) redirected to 0x483fed0 (strcmp)
--11363-- REDIR: 0x49e8d90 (libc.so.6:__memset_avx2_unaligned_erms) redirected to 0x48428e0 (memset)
--11363-- REDIR: 0x48f7e80 (libc.so.6:realloc) redirected to 0x483df30 (realloc)
==11363== 
==11363== HEAP SUMMARY:
==11363==     in use at exit: 0 bytes in 0 blocks
==11363==   total heap usage: 12 allocs, 12 frees, 15,648 bytes allocated
==11363== 
==11363== All heap blocks were freed -- no leaks are possible
==11363== 
==11363== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
deleting marker file /tmp/tmp.nurupt5xWo
~/assignment-2-jainaneesh/assignment-autotest/test/assignment5 ~/assignment-2-jainaneesh/assignment-autotest/test/assignment5 ~/assignment-2-jainaneesh/server ~/assignment-2-jainaneesh/assignment-autotest/test/assignment5 ~/assignment-2-jainaneesh
Testing target localhost on port 9000
sending string abcdefg to localhost on port 9000
Differences found after sending abcdefg to localhost on port 9000
Expected contents to match:
abcdefg
But found contents:
With differences
--- /tmp/tmp.Az2cTLhEij	2025-02-08 16:07:19.129334982 -0500
+++ /tmp/tmp.bUuVMHltak	2025-02-08 16:07:19.117334940 -0500
@@ -1 +0,0 @@
-abcdefg
Test complete with failure
[0;31mValidation Error:sockettest.sh returned 1 attempting to run against native compiled aesdsocket instance running under valgrind[0m
Stopping valgrind and aesdsocket process at pid 
kill: usage: kill [-s sigspec | -n signum | -sigspec] pid | jobspec ... or kill -l [sigspec]
Validation failed with error list :starting aesdocket failed with 1:sockettest.sh returned 1 attempting to run against native compiled aesdsocket instance running under valgrind
Test of assignment assignment5 failed with rc=1
Running test with user linux-o-phile
-- Generating ;/home/linux-o-phile/assignment-2-jainaneesh/assignment-autotest/test/assignment1/Test_hello_Runner.c;/home/linux-o-phile/assignment-2-jainaneesh/assignment-autotest/test/assignment1/Test_assignment_validate_Runner.c from test/assignment1/Test_hello.c;test/assignment1/Test_assignment_validate.c
-- Building executable including ;/home/linux-o-phile/assignment-2-jainaneesh/assignment-autotest/test/assignment1/Test_hello_Runner.c;/home/linux-o-phile/assignment-2-jainaneesh/assignment-autotest/test/assignment1/Test_assignment_validate_Runner.c test/assignment1/Test_hello.c;test/assignment1/Test_assignment_validate.c and ../examples/autotest-validate/autotest-validate.c
-- Configuring done
-- Generating done
-- Build files have been written to: /home/linux-o-phile/assignment-2-jainaneesh/build
[ 10%] Building C object assignment-autotest/Unity/src/CMakeFiles/unity.dir/unity.c.o
[ 20%] Linking C static library libunity.a
[ 20%] Built target unity
[ 30%] Generating ../../assignment-autotest/test/assignment1/Test_hello_Runner.c, ../../assignment-autotest/test/assignment1/Test_assignment_validate_Runner.c, ../../assignment-autotest/test/unity_runner.c
Test files for auto dependency generation test/assignment1/Test_hello.c test/assignment1/Test_assignment_validate.c
Autogenerating runner for test/assignment1/Test_hello.c
Autogenerating runner for test/assignment1/Test_assignment_validate.c
Autogenerating test/unity_runner.c
Scanning dependencies of target assignment-autotest
[ 40%] Building C object assignment-autotest/CMakeFiles/assignment-autotest.dir/test/assignment1/Test_hello.c.o
[ 50%] Building C object assignment-autotest/CMakeFiles/assignment-autotest.dir/test/assignment1/Test_assignment_validate.c.o
[ 60%] Building C object assignment-autotest/CMakeFiles/assignment-autotest.dir/test/assignment1/Test_hello_Runner.c.o
[ 70%] Building C object assignment-autotest/CMakeFiles/assignment-autotest.dir/test/assignment1/Test_assignment_validate_Runner.c.o
[ 80%] Building C object assignment-autotest/CMakeFiles/assignment-autotest.dir/__/examples/autotest-validate/autotest-validate.c.o
[ 90%] Building C object assignment-autotest/CMakeFiles/assignment-autotest.dir/test/unity_runner.c.o
[100%] Linking C executable assignment-autotest
[100%] Built target assignment-autotest
/home/linux-o-phile/assignment-2-jainaneesh/assignment-autotest/test/assignment1/Test_hello.c:6:test_hello:INFO: Hello!  Your unity setup is working!
/home/linux-o-phile/assignment-2-jainaneesh/assignment-autotest/test/assignment1/Test_hello.c:4:test_hello:PASS

-----------------------
1 Tests 0 Failures 0 Ignored 
OK
/home/linux-o-phile/assignment-2-jainaneesh/assignment-autotest/test/assignment1/Test_assignment_validate.c:9:test_assignment_validate:PASS

-----------------------
1 Tests 0 Failures 0 Ignored 
OK
Executing assignment test script
~/assignment-2-jainaneesh/assignment-autotest/test/assignment5 ~/assignment-2-jainaneesh
~/assignment-2-jainaneesh/server ~/assignment-2-jainaneesh/assignment-autotest/test/assignment5 ~/assignment-2-jainaneesh
rm -f aesdsocket aesdsocket.o
gcc -Wall -Wextra -g -o aesdsocket aesdsocket.c
aesdsocket.c: In function ‘main’:
aesdsocket.c:108:4: warning: ‘return’ with no value, in function returning non-void [-Wreturn-type]
  108 |    return;
      |    ^~~~~~
aesdsocket.c:61:5: note: declared here
   61 | int main(int argc, char *argv[])
      |     ^~~~
[0;31mValidation Error:starting aesdocket failed with 1[0m
~/assignment-2-jainaneesh/assignment-autotest/test/assignment5 ~/assignment-2-jainaneesh/server ~/assignment-2-jainaneesh/assignment-autotest/test/assignment5 ~/assignment-2-jainaneesh
~/assignment-2-jainaneesh/assignment-autotest/test/assignment5 ~/assignment-2-jainaneesh/assignment-autotest/test/assignment5 ~/assignment-2-jainaneesh/server ~/assignment-2-jainaneesh/assignment-autotest/test/assignment5 ~/assignment-2-jainaneesh
Testing target localhost on port 9000
sending string abcdefg to localhost on port 9000
Differences found after sending abcdefg to localhost on port 9000
Expected contents to match:
abcdefg
But found contents:
With differences
--- /tmp/tmp.IN0SsSNz03	2025-02-08 16:07:39.193405783 -0500
+++ /tmp/tmp.2caGO1D2Q8	2025-02-08 16:07:39.193405783 -0500
@@ -1 +0,0 @@
-abcdefg
Test complete with failure
[0;31mValidation Error:sockettest.sh returned 1 attempting to run against native compiled aesdsocket instance[0m
kill: usage: kill [-s sigspec | -n signum | -sigspec] pid | jobspec ... or kill -l [sigspec]
~/assignment-2-jainaneesh/server ~/assignment-2-jainaneesh/assignment-autotest/test/assignment5 ~/assignment-2-jainaneesh
~/assignment-2-jainaneesh/assignment-autotest/test/assignment5 ~/assignment-2-jainaneesh
Waiting for aesdsocket application with pid  to terminate
kill: usage: kill [-s sigspec | -n signum | -sigspec] pid | jobspec ... or kill -l [sigspec]
error: List of process IDs must follow -q.

Usage:
 ps [options]

 Try 'ps --help <simple|list|output|threads|misc|all>'
  or 'ps --help <s|l|o|t|m|a>'
 for additional help text.

For more details see ps(1).
aesdsocket still running
kill: usage: kill [-s sigspec | -n signum | -sigspec] pid | jobspec ... or kill -l [sigspec]
error: List of process IDs must follow -q.

Usage:
 ps [options]

 Try 'ps --help <simple|list|output|threads|misc|all>'
  or 'ps --help <s|l|o|t|m|a>'
 for additional help text.

For more details see ps(1).
aesdsocket still running
kill: usage: kill [-s sigspec | -n signum | -sigspec] pid | jobspec ... or kill -l [sigspec]
error: List of process IDs must follow -q.

Usage:
 ps [options]

 Try 'ps --help <simple|list|output|threads|misc|all>'
  or 'ps --help <s|l|o|t|m|a>'
 for additional help text.

For more details see ps(1).
aesdsocket still running
kill: usage: kill [-s sigspec | -n signum | -sigspec] pid | jobspec ... or kill -l [sigspec]
error: List of process IDs must follow -q.

Usage:
 ps [options]

 Try 'ps --help <simple|list|output|threads|misc|all>'
  or 'ps --help <s|l|o|t|m|a>'
 for additional help text.

For more details see ps(1).
aesdsocket still running
kill: usage: kill [-s sigspec | -n signum | -sigspec] pid | jobspec ... or kill -l [sigspec]
error: List of process IDs must follow -q.

Usage:
 ps [options]

 Try 'ps --help <simple|list|output|threads|misc|all>'
  or 'ps --help <s|l|o|t|m|a>'
 for additional help text.

For more details see ps(1).
aesdsocket still running
kill: usage: kill [-s sigspec | -n signum | -sigspec] pid | jobspec ... or kill -l [sigspec]
error: List of process IDs must follow -q.

Usage:
 ps [options]

 Try 'ps --help <simple|list|output|threads|misc|all>'
  or 'ps --help <s|l|o|t|m|a>'
 for additional help text.

For more details see ps(1).
aesdsocket still running
kill: usage: kill [-s sigspec | -n signum | -sigspec] pid | jobspec ... or kill -l [sigspec]
error: List of process IDs must follow -q.

Usage:
 ps [options]

 Try 'ps --help <simple|list|output|threads|misc|all>'
  or 'ps --help <s|l|o|t|m|a>'
 for additional help text.

For more details see ps(1).
aesdsocket still running
kill: usage: kill [-s sigspec | -n signum | -sigspec] pid | jobspec ... or kill -l [sigspec]
error: List of process IDs must follow -q.

Usage:
 ps [options]

 Try 'ps --help <simple|list|output|threads|misc|all>'
  or 'ps --help <s|l|o|t|m|a>'
 for additional help text.

For more details see ps(1).
aesdsocket still running
kill: usage: kill [-s sigspec | -n signum | -sigspec] pid | jobspec ... or kill -l [sigspec]
error: List of process IDs must follow -q.

Usage:
 ps [options]

 Try 'ps --help <simple|list|output|threads|misc|all>'
  or 'ps --help <s|l|o|t|m|a>'
 for additional help text.

For more details see ps(1).
aesdsocket still running
kill: usage: kill [-s sigspec | -n signum | -sigspec] pid | jobspec ... or kill -l [sigspec]
error: List of process IDs must follow -q.

Usage:
 ps [options]

 Try 'ps --help <simple|list|output|threads|misc|all>'
  or 'ps --help <s|l|o|t|m|a>'
 for additional help text.

For more details see ps(1).
aesdsocket still running
kill: usage: kill [-s sigspec | -n signum | -sigspec] pid | jobspec ... or kill -l [sigspec]
error: List of process IDs must follow -q.

Usage:
 ps [options]

 Try 'ps --help <simple|list|output|threads|misc|all>'
  or 'ps --help <s|l|o|t|m|a>'
 for additional help text.

For more details see ps(1).
aesdsocket still running
Running test with user linux-o-phile
-- Generating ;/home/linux-o-phile/assignment-2-jainaneesh/assignment-autotest/test/assignment1/Test_hello_Runner.c;/home/linux-o-phile/assignment-2-jainaneesh/assignment-autotest/test/assignment1/Test_assignment_validate_Runner.c from test/assignment1/Test_hello.c;test/assignment1/Test_assignment_validate.c
-- Building executable including ;/home/linux-o-phile/assignment-2-jainaneesh/assignment-autotest/test/assignment1/Test_hello_Runner.c;/home/linux-o-phile/assignment-2-jainaneesh/assignment-autotest/test/assignment1/Test_assignment_validate_Runner.c test/assignment1/Test_hello.c;test/assignment1/Test_assignment_validate.c and ../examples/autotest-validate/autotest-validate.c
-- Configuring done
-- Generating done
-- Build files have been written to: /home/linux-o-phile/assignment-2-jainaneesh/build
[ 10%] Building C object assignment-autotest/Unity/src/CMakeFiles/unity.dir/unity.c.o
[ 20%] Linking C static library libunity.a
[ 20%] Built target unity
[ 30%] Generating ../../assignment-autotest/test/assignment1/Test_hello_Runner.c, ../../assignment-autotest/test/assignment1/Test_assignment_validate_Runner.c, ../../assignment-autotest/test/unity_runner.c
Test files for auto dependency generation test/assignment1/Test_hello.c test/assignment1/Test_assignment_validate.c
Autogenerating runner for test/assignment1/Test_hello.c
Autogenerating runner for test/assignment1/Test_assignment_validate.c
Autogenerating test/unity_runner.c
Scanning dependencies of target assignment-autotest
[ 40%] Building C object assignment-autotest/CMakeFiles/assignment-autotest.dir/test/assignment1/Test_hello.c.o
[ 50%] Building C object assignment-autotest/CMakeFiles/assignment-autotest.dir/test/assignment1/Test_assignment_validate.c.o
[ 60%] Building C object assignment-autotest/CMakeFiles/assignment-autotest.dir/test/assignment1/Test_hello_Runner.c.o
[ 70%] Building C object assignment-autotest/CMakeFiles/assignment-autotest.dir/test/assignment1/Test_assignment_validate_Runner.c.o
[ 80%] Building C object assignment-autotest/CMakeFiles/assignment-autotest.dir/__/examples/autotest-validate/autotest-validate.c.o
[ 90%] Building C object assignment-autotest/CMakeFiles/assignment-autotest.dir/test/unity_runner.c.o
[100%] Linking C executable assignment-autotest
[100%] Built target assignment-autotest
/home/linux-o-phile/assignment-2-jainaneesh/assignment-autotest/test/assignment1/Test_hello.c:6:test_hello:INFO: Hello!  Your unity setup is working!
/home/linux-o-phile/assignment-2-jainaneesh/assignment-autotest/test/assignment1/Test_hello.c:4:test_hello:PASS

-----------------------
1 Tests 0 Failures 0 Ignored 
OK
/home/linux-o-phile/assignment-2-jainaneesh/assignment-autotest/test/assignment1/Test_assignment_validate.c:9:test_assignment_validate:PASS

-----------------------
1 Tests 0 Failures 0 Ignored 
OK
Executing assignment test script
~/assignment-2-jainaneesh/assignment-autotest/test/assignment5 ~/assignment-2-jainaneesh
~/assignment-2-jainaneesh/server ~/assignment-2-jainaneesh/assignment-autotest/test/assignment5 ~/assignment-2-jainaneesh
rm -f aesdsocket aesdsocket.o
gcc -Wall -Wextra -g -o aesdsocket aesdsocket.c
aesdsocket.c: In function ‘main’:
aesdsocket.c:108:4: warning: ‘return’ with no value, in function returning non-void [-Wreturn-type]
  108 |    return;
      |    ^~~~~~
aesdsocket.c:61:5: note: declared here
   61 | int main(int argc, char *argv[])
      |     ^~~~
[0;31mValidation Error:starting aesdocket failed with 1[0m
~/assignment-2-jainaneesh/assignment-autotest/test/assignment5 ~/assignment-2-jainaneesh/server ~/assignment-2-jainaneesh/assignment-autotest/test/assignment5 ~/assignment-2-jainaneesh
~/assignment-2-jainaneesh/assignment-autotest/test/assignment5 ~/assignment-2-jainaneesh/assignment-autotest/test/assignment5 ~/assignment-2-jainaneesh/server ~/assignment-2-jainaneesh/assignment-autotest/test/assignment5 ~/assignment-2-jainaneesh
Testing target localhost on port 9000
sending string abcdefg to localhost on port 9000
Differences found after sending abcdefg to localhost on port 9000
Expected contents to match:
abcdefg
But found contents:
With differences
--- /tmp/tmp.w4oRf9NRdF	2025-02-08 16:07:51.337449518 -0500
+++ /tmp/tmp.cwRa5aATU3	2025-02-08 16:07:51.337449518 -0500
@@ -1 +0,0 @@
-abcdefg
Test complete with failure
[0;31mValidation Error:sockettest.sh returned 1 attempting to run against native compiled aesdsocket instance[0m
kill: usage: kill [-s sigspec | -n signum | -sigspec] pid | jobspec ... or kill -l [sigspec]
~/assignment-2-jainaneesh/server ~/assignment-2-jainaneesh/assignment-autotest/test/assignment5 ~/assignment-2-jainaneesh
~/assignment-2-jainaneesh/assignment-autotest/test/assignment5 ~/assignment-2-jainaneesh
Waiting for aesdsocket application with pid  to terminate
kill: usage: kill [-s sigspec | -n signum | -sigspec] pid | jobspec ... or kill -l [sigspec]
error: List of process IDs must follow -q.

Usage:
 ps [options]

 Try 'ps --help <simple|list|output|threads|misc|all>'
  or 'ps --help <s|l|o|t|m|a>'
 for additional help text.

For more details see ps(1).
aesdsocket still running
kill: usage: kill [-s sigspec | -n signum | -sigspec] pid | jobspec ... or kill -l [sigspec]
error: List of process IDs must follow -q.

Usage:
 ps [options]

 Try 'ps --help <simple|list|output|threads|misc|all>'
  or 'ps --help <s|l|o|t|m|a>'
 for additional help text.

For more details see ps(1).
aesdsocket still running
kill: usage: kill [-s sigspec | -n signum | -sigspec] pid | jobspec ... or kill -l [sigspec]
error: List of process IDs must follow -q.

Usage:
 ps [options]

 Try 'ps --help <simple|list|output|threads|misc|all>'
  or 'ps --help <s|l|o|t|m|a>'
 for additional help text.

For more details see ps(1).
aesdsocket still running
kill: usage: kill [-s sigspec | -n signum | -sigspec] pid | jobspec ... or kill -l [sigspec]
error: List of process IDs must follow -q.

Usage:
 ps [options]

 Try 'ps --help <simple|list|output|threads|misc|all>'
  or 'ps --help <s|l|o|t|m|a>'
 for additional help text.

For more details see ps(1).
aesdsocket still running
kill: usage: kill [-s sigspec | -n signum | -sigspec] pid | jobspec ... or kill -l [sigspec]
error: List of process IDs must follow -q.

Usage:
 ps [options]

 Try 'ps --help <simple|list|output|threads|misc|all>'
  or 'ps --help <s|l|o|t|m|a>'
 for additional help text.

For more details see ps(1).
aesdsocket still running
kill: usage: kill [-s sigspec | -n signum | -sigspec] pid | jobspec ... or kill -l [sigspec]
error: List of process IDs must follow -q.

Usage:
 ps [options]

 Try 'ps --help <simple|list|output|threads|misc|all>'
  or 'ps --help <s|l|o|t|m|a>'
 for additional help text.

For more details see ps(1).
aesdsocket still running
kill: usage: kill [-s sigspec | -n signum | -sigspec] pid | jobspec ... or kill -l [sigspec]
error: List of process IDs must follow -q.

Usage:
 ps [options]

 Try 'ps --help <simple|list|output|threads|misc|all>'
  or 'ps --help <s|l|o|t|m|a>'
 for additional help text.

For more details see ps(1).
aesdsocket still running
kill: usage: kill [-s sigspec | -n signum | -sigspec] pid | jobspec ... or kill -l [sigspec]
error: List of process IDs must follow -q.

Usage:
 ps [options]

 Try 'ps --help <simple|list|output|threads|misc|all>'
  or 'ps --help <s|l|o|t|m|a>'
 for additional help text.

For more details see ps(1).
aesdsocket still running
Running test with user linux-o-phile
-- Generating ;/home/linux-o-phile/assignment-2-jainaneesh/assignment-autotest/test/assignment1/Test_hello_Runner.c;/home/linux-o-phile/assignment-2-jainaneesh/assignment-autotest/test/assignment1/Test_assignment_validate_Runner.c from test/assignment1/Test_hello.c;test/assignment1/Test_assignment_validate.c
-- Building executable including ;/home/linux-o-phile/assignment-2-jainaneesh/assignment-autotest/test/assignment1/Test_hello_Runner.c;/home/linux-o-phile/assignment-2-jainaneesh/assignment-autotest/test/assignment1/Test_assignment_validate_Runner.c test/assignment1/Test_hello.c;test/assignment1/Test_assignment_validate.c and ../examples/autotest-validate/autotest-validate.c
-- Configuring done
-- Generating done
-- Build files have been written to: /home/linux-o-phile/assignment-2-jainaneesh/build
[ 10%] Building C object assignment-autotest/Unity/src/CMakeFiles/unity.dir/unity.c.o
[ 20%] Linking C static library libunity.a
[ 20%] Built target unity
[ 30%] Generating ../../assignment-autotest/test/assignment1/Test_hello_Runner.c, ../../assignment-autotest/test/assignment1/Test_assignment_validate_Runner.c, ../../assignment-autotest/test/unity_runner.c
Test files for auto dependency generation test/assignment1/Test_hello.c test/assignment1/Test_assignment_validate.c
Autogenerating runner for test/assignment1/Test_hello.c
Autogenerating runner for test/assignment1/Test_assignment_validate.c
Autogenerating test/unity_runner.c
Scanning dependencies of target assignment-autotest
[ 40%] Building C object assignment-autotest/CMakeFiles/assignment-autotest.dir/test/assignment1/Test_hello.c.o
[ 50%] Building C object assignment-autotest/CMakeFiles/assignment-autotest.dir/test/assignment1/Test_assignment_validate.c.o
[ 60%] Building C object assignment-autotest/CMakeFiles/assignment-autotest.dir/test/assignment1/Test_hello_Runner.c.o
[ 70%] Building C object assignment-autotest/CMakeFiles/assignment-autotest.dir/test/assignment1/Test_assignment_validate_Runner.c.o
[ 80%] Building C object assignment-autotest/CMakeFiles/assignment-autotest.dir/__/examples/autotest-validate/autotest-validate.c.o
[ 90%] Building C object assignment-autotest/CMakeFiles/assignment-autotest.dir/test/unity_runner.c.o
[100%] Linking C executable assignment-autotest
[100%] Built target assignment-autotest
/home/linux-o-phile/assignment-2-jainaneesh/assignment-autotest/test/assignment1/Test_hello.c:6:test_hello:INFO: Hello!  Your unity setup is working!
/home/linux-o-phile/assignment-2-jainaneesh/assignment-autotest/test/assignment1/Test_hello.c:4:test_hello:PASS

-----------------------
1 Tests 0 Failures 0 Ignored 
OK
/home/linux-o-phile/assignment-2-jainaneesh/assignment-autotest/test/assignment1/Test_assignment_validate.c:9:test_assignment_validate:PASS

-----------------------
1 Tests 0 Failures 0 Ignored 
OK
Executing assignment test script
~/assignment-2-jainaneesh/assignment-autotest/test/assignment5 ~/assignment-2-jainaneesh
~/assignment-2-jainaneesh/server ~/assignment-2-jainaneesh/assignment-autotest/test/assignment5 ~/assignment-2-jainaneesh
rm -f aesdsocket aesdsocket.o
gcc -Wall -Wextra -g -o aesdsocket aesdsocket.c
aesdsocket.c: In function ‘main’:
aesdsocket.c:108:4: warning: ‘return’ with no value, in function returning non-void [-Wreturn-type]
  108 |    return;
      |    ^~~~~~
aesdsocket.c:61:5: note: declared here
   61 | int main(int argc, char *argv[])
      |     ^~~~
[0;31mValidation Error:starting aesdocket failed with 1[0m
~/assignment-2-jainaneesh/assignment-autotest/test/assignment5 ~/assignment-2-jainaneesh/server ~/assignment-2-jainaneesh/assignment-autotest/test/assignment5 ~/assignment-2-jainaneesh
~/assignment-2-jainaneesh/assignment-autotest/test/assignment5 ~/assignment-2-jainaneesh/assignment-autotest/test/assignment5 ~/assignment-2-jainaneesh/server ~/assignment-2-jainaneesh/assignment-autotest/test/assignment5 ~/assignment-2-jainaneesh
Testing target localhost on port 9000
sending string abcdefg to localhost on port 9000
Differences found after sending abcdefg to localhost on port 9000
Expected contents to match:
abcdefg
But found contents:
With differences
--- /tmp/tmp.txDnxvuvAX	2025-02-08 16:08:13.497530977 -0500
+++ /tmp/tmp.hLheeLGPaX	2025-02-08 16:08:13.497530977 -0500
@@ -1 +0,0 @@
-abcdefg
Test complete with failure
[0;31mValidation Error:sockettest.sh returned 1 attempting to run against native compiled aesdsocket instance[0m
kill: usage: kill [-s sigspec | -n signum | -sigspec] pid | jobspec ... or kill -l [sigspec]
~/assignment-2-jainaneesh/server ~/assignment-2-jainaneesh/assignment-autotest/test/assignment5 ~/assignment-2-jainaneesh
~/assignment-2-jainaneesh/assignment-autotest/test/assignment5 ~/assignment-2-jainaneesh
Waiting for aesdsocket application with pid  to terminate
kill: usage: kill [-s sigspec | -n signum | -sigspec] pid | jobspec ... or kill -l [sigspec]
error: List of process IDs must follow -q.

Usage:
 ps [options]

 Try 'ps --help <simple|list|output|threads|misc|all>'
  or 'ps --help <s|l|o|t|m|a>'
 for additional help text.

For more details see ps(1).
aesdsocket still running
kill: usage: kill [-s sigspec | -n signum | -sigspec] pid | jobspec ... or kill -l [sigspec]
error: List of process IDs must follow -q.

Usage:
 ps [options]

 Try 'ps --help <simple|list|output|threads|misc|all>'
  or 'ps --help <s|l|o|t|m|a>'
 for additional help text.

For more details see ps(1).
aesdsocket still running
kill: usage: kill [-s sigspec | -n signum | -sigspec] pid | jobspec ... or kill -l [sigspec]
error: List of process IDs must follow -q.

Usage:
 ps [options]

 Try 'ps --help <simple|list|output|threads|misc|all>'
  or 'ps --help <s|l|o|t|m|a>'
 for additional help text.

For more details see ps(1).
aesdsocket still running
kill: usage: kill [-s sigspec | -n signum | -sigspec] pid | jobspec ... or kill -l [sigspec]
error: List of process IDs must follow -q.

Usage:
 ps [options]

 Try 'ps --help <simple|list|output|threads|misc|all>'
  or 'ps --help <s|l|o|t|m|a>'
 for additional help text.

For more details see ps(1).
aesdsocket still running
Running test with user linux-o-phile
-- Generating ;/home/linux-o-phile/assignment-2-jainaneesh/assignment-autotest/test/assignment1/Test_hello_Runner.c;/home/linux-o-phile/assignment-2-jainaneesh/assignment-autotest/test/assignment1/Test_assignment_validate_Runner.c from test/assignment1/Test_hello.c;test/assignment1/Test_assignment_validate.c
-- Building executable including ;/home/linux-o-phile/assignment-2-jainaneesh/assignment-autotest/test/assignment1/Test_hello_Runner.c;/home/linux-o-phile/assignment-2-jainaneesh/assignment-autotest/test/assignment1/Test_assignment_validate_Runner.c test/assignment1/Test_hello.c;test/assignment1/Test_assignment_validate.c and ../examples/autotest-validate/autotest-validate.c
-- Configuring done
-- Generating done
-- Build files have been written to: /home/linux-o-phile/assignment-2-jainaneesh/build
[ 10%] Building C object assignment-autotest/Unity/src/CMakeFiles/unity.dir/unity.c.o
[ 20%] Linking C static library libunity.a
[ 20%] Built target unity
[ 30%] Generating ../../assignment-autotest/test/assignment1/Test_hello_Runner.c, ../../assignment-autotest/test/assignment1/Test_assignment_validate_Runner.c, ../../assignment-autotest/test/unity_runner.c
Test files for auto dependency generation test/assignment1/Test_hello.c test/assignment1/Test_assignment_validate.c
Autogenerating runner for test/assignment1/Test_hello.c
Autogenerating runner for test/assignment1/Test_assignment_validate.c
Autogenerating test/unity_runner.c
Scanning dependencies of target assignment-autotest
[ 40%] Building C object assignment-autotest/CMakeFiles/assignment-autotest.dir/test/assignment1/Test_hello.c.o
[ 50%] Building C object assignment-autotest/CMakeFiles/assignment-autotest.dir/test/assignment1/Test_assignment_validate.c.o
[ 60%] Building C object assignment-autotest/CMakeFiles/assignment-autotest.dir/test/assignment1/Test_hello_Runner.c.o
[ 70%] Building C object assignment-autotest/CMakeFiles/assignment-autotest.dir/test/assignment1/Test_assignment_validate_Runner.c.o
[ 80%] Building C object assignment-autotest/CMakeFiles/assignment-autotest.dir/__/examples/autotest-validate/autotest-validate.c.o
[ 90%] Building C object assignment-autotest/CMakeFiles/assignment-autotest.dir/test/unity_runner.c.o
[100%] Linking C executable assignment-autotest
[100%] Built target assignment-autotest
/home/linux-o-phile/assignment-2-jainaneesh/assignment-autotest/test/assignment1/Test_hello.c:6:test_hello:INFO: Hello!  Your unity setup is working!
/home/linux-o-phile/assignment-2-jainaneesh/assignment-autotest/test/assignment1/Test_hello.c:4:test_hello:PASS

-----------------------
1 Tests 0 Failures 0 Ignored 
OK
/home/linux-o-phile/assignment-2-jainaneesh/assignment-autotest/test/assignment1/Test_assignment_validate.c:9:test_assignment_validate:PASS

-----------------------
1 Tests 0 Failures 0 Ignored 
OK
Executing assignment test script
~/assignment-2-jainaneesh/assignment-autotest/test/assignment5 ~/assignment-2-jainaneesh
~/assignment-2-jainaneesh/server ~/assignment-2-jainaneesh/assignment-autotest/test/assignment5 ~/assignment-2-jainaneesh
rm -f aesdsocket aesdsocket.o
gcc -Wall -Wextra -g -o aesdsocket aesdsocket.c
aesdsocket.c: In function ‘main’:
aesdsocket.c:108:4: warning: ‘return’ with no value, in function returning non-void [-Wreturn-type]
  108 |    return;
      |    ^~~~~~
aesdsocket.c:61:5: note: declared here
   61 | int main(int argc, char *argv[])
      |     ^~~~
~/assignment-2-jainaneesh/assignment-autotest/test/assignment5 ~/assignment-2-jainaneesh/server ~/assignment-2-jainaneesh/assignment-autotest/test/assignment5 ~/assignment-2-jainaneesh
~/assignment-2-jainaneesh/assignment-autotest/test/assignment5 ~/assignment-2-jainaneesh/assignment-autotest/test/assignment5 ~/assignment-2-jainaneesh/server ~/assignment-2-jainaneesh/assignment-autotest/test/assignment5 ~/assignment-2-jainaneesh
Testing target localhost on port 9000
sending string abcdefg to localhost on port 9000
sending string hijklmnop to localhost on port 9000
sending string 1234567890 to localhost on port 9000
sending string 9876543210 to localhost on port 9000
Sending long string from long_string.txt file
sending string  to localhost on port 9000
Full contents sent:
abcdefg
hijklmnop
1234567890
9876543210

Tests complete with success!
~/assignment-2-jainaneesh/server ~/assignment-2-jainaneesh/assignment-autotest/test/assignment5 ~/assignment-2-jainaneesh
~/assignment-2-jainaneesh/assignment-autotest/test/assignment5 ~/assignment-2-jainaneesh
Waiting for aesdsocket application with pid 2563 to terminate
Re-running sockettest.sh with valgrind
~/assignment-2-jainaneesh/server ~/assignment-2-jainaneesh/assignment-autotest/test/assignment5 ~/assignment-2-jainaneesh
~/assignment-2-jainaneesh/assignment-autotest/test/assignment5 ~/assignment-2-jainaneesh/server ~/assignment-2-jainaneesh/assignment-autotest/test/assignment5 ~/assignment-2-jainaneesh
Waiting for aesdsocket application to start
Starting valgrind
Valgrind and aesdsocket complete
[0;31mValidation Error:Valgrind failed with 1[0m
Valgrind output error log:
==2619== Memcheck, a memory error detector
==2619== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==2619== Using Valgrind-3.15.0-608cb11914-20190413 and LibVEX; rerun with -h for copyright info
==2619== Command: ./aesdsocket
==2619== Parent PID: 2617
==2619== 
--2619-- 
--2619-- Valgrind options:
--2619--    --error-exitcode=1
--2619--    --leak-check=full
--2619--    --show-leak-kinds=all
--2619--    --track-origins=yes
--2619--    --errors-for-leak-kinds=definite
--2619--    --verbose
--2619--    --log-file=valgrind-out.txt
--2619-- Contents of /proc/version:
--2619--   Linux version 5.15.0-131-generic (buildd@lcy02-amd64-072) (gcc (Ubuntu 9.4.0-1ubuntu1~20.04.2) 9.4.0, GNU ld (GNU Binutils for Ubuntu) 2.34) #141~20.04.1-Ubuntu SMP Thu Jan 16 18:38:51 UTC 2025
--2619-- 
--2619-- Arch and hwcaps: AMD64, LittleEndian, amd64-cx16-lzcnt-rdtscp-sse3-ssse3-avx-avx2-bmi-f16c-rdrand
--2619-- Page sizes: currently 4096, max supported 4096
--2619-- Valgrind library directory: /usr/lib/x86_64-linux-gnu/valgrind
--2619-- Reading syms from /home/linux-o-phile/assignment-2-jainaneesh/server/aesdsocket
--2619-- Reading syms from /usr/lib/x86_64-linux-gnu/ld-2.31.so
--2619--   Considering /usr/lib/debug/.build-id/cb/904567e1b2a460b6fc20817776ad590d265686.debug ..
--2619--   .. build-id is valid
--2619-- Reading syms from /usr/lib/x86_64-linux-gnu/valgrind/memcheck-amd64-linux
--2619--    object doesn't have a symbol table
--2619--    object doesn't have a dynamic symbol table
--2619-- Scheduler: using generic scheduler lock implementation.
--2619-- Reading suppressions file: /usr/lib/x86_64-linux-gnu/valgrind/default.supp
==2619== embedded gdbserver: reading from /tmp/vgdb-pipe-from-vgdb-to-2619-by-linux-o-phile-on-???
==2619== embedded gdbserver: writing to   /tmp/vgdb-pipe-to-vgdb-from-2619-by-linux-o-phile-on-???
==2619== embedded gdbserver: shared mem   /tmp/vgdb-pipe-shared-mem-vgdb-2619-by-linux-o-phile-on-???
==2619== 
==2619== TO CONTROL THIS PROCESS USING vgdb (which you probably
==2619== don't want to do, unless you know exactly what you're doing,
==2619== or are doing some strange experiment):
==2619==   /usr/lib/x86_64-linux-gnu/valgrind/../../bin/vgdb --pid=2619 ...command...
==2619== 
==2619== TO DEBUG THIS PROCESS USING GDB: start GDB like this
==2619==   /path/to/gdb ./aesdsocket
==2619== and then give GDB the following command
==2619==   target remote | /usr/lib/x86_64-linux-gnu/valgrind/../../bin/vgdb --pid=2619
==2619== --pid is optional if only one valgrind process is running
==2619== 
--2619-- REDIR: 0x4022e20 (ld-linux-x86-64.so.2:strlen) redirected to 0x580c9ce2 (???)
--2619-- REDIR: 0x4022bf0 (ld-linux-x86-64.so.2:index) redirected to 0x580c9cfc (???)
--2619-- Reading syms from /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_core-amd64-linux.so
--2619--    object doesn't have a symbol table
--2619-- Reading syms from /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so
--2619--    object doesn't have a symbol table
==2619== WARNING: new redirection conflicts with existing -- ignoring it
--2619--     old: 0x04022e20 (strlen              ) R-> (0000.0) 0x580c9ce2 ???
--2619--     new: 0x04022e20 (strlen              ) R-> (2007.0) 0x0483f060 strlen
--2619-- REDIR: 0x401f600 (ld-linux-x86-64.so.2:strcmp) redirected to 0x483ffd0 (strcmp)
--2619-- REDIR: 0x4023380 (ld-linux-x86-64.so.2:mempcpy) redirected to 0x4843a20 (mempcpy)
--2619-- Reading syms from /usr/lib/x86_64-linux-gnu/libc-2.31.so
--2619--   Considering /usr/lib/debug/.build-id/03/23ab4806bee6f846d9ad4bccfc29afdca49a58.debug ..
--2619--   .. build-id is valid
--2619-- REDIR: 0x48fd480 (libc.so.6:memmove) redirected to 0x48311d0 (_vgnU_ifunc_wrapper)
--2619-- REDIR: 0x48fc780 (libc.so.6:strncpy) redirected to 0x48311d0 (_vgnU_ifunc_wrapper)
--2619-- REDIR: 0x48fd7b0 (libc.so.6:strcasecmp) redirected to 0x48311d0 (_vgnU_ifunc_wrapper)
--2619-- REDIR: 0x48fc0a0 (libc.so.6:strcat) redirected to 0x48311d0 (_vgnU_ifunc_wrapper)
--2619-- REDIR: 0x48fc7e0 (libc.so.6:rindex) redirected to 0x48311d0 (_vgnU_ifunc_wrapper)
--2619-- REDIR: 0x48fec50 (libc.so.6:rawmemchr) redirected to 0x48311d0 (_vgnU_ifunc_wrapper)
--2619-- REDIR: 0x4919ce0 (libc.so.6:wmemchr) redirected to 0x48311d0 (_vgnU_ifunc_wrapper)
--2619-- REDIR: 0x4919820 (libc.so.6:wcscmp) redirected to 0x48311d0 (_vgnU_ifunc_wrapper)
--2619-- REDIR: 0x48fd5e0 (libc.so.6:mempcpy) redirected to 0x48311d0 (_vgnU_ifunc_wrapper)
--2619-- REDIR: 0x48fd410 (libc.so.6:bcmp) redirected to 0x48311d0 (_vgnU_ifunc_wrapper)
--2619-- REDIR: 0x48fc710 (libc.so.6:strncmp) redirected to 0x48311d0 (_vgnU_ifunc_wrapper)
--2619-- REDIR: 0x48fc150 (libc.so.6:strcmp) redirected to 0x48311d0 (_vgnU_ifunc_wrapper)
--2619-- REDIR: 0x48fd540 (libc.so.6:memset) redirected to 0x48311d0 (_vgnU_ifunc_wrapper)
--2619-- REDIR: 0x49197e0 (libc.so.6:wcschr) redirected to 0x48311d0 (_vgnU_ifunc_wrapper)
--2619-- REDIR: 0x48fc670 (libc.so.6:strnlen) redirected to 0x48311d0 (_vgnU_ifunc_wrapper)
--2619-- REDIR: 0x48fc230 (libc.so.6:strcspn) redirected to 0x48311d0 (_vgnU_ifunc_wrapper)
--2619-- REDIR: 0x48fd800 (libc.so.6:strncasecmp) redirected to 0x48311d0 (_vgnU_ifunc_wrapper)
--2619-- REDIR: 0x48fc1d0 (libc.so.6:strcpy) redirected to 0x48311d0 (_vgnU_ifunc_wrapper)
--2619-- REDIR: 0x48fd950 (libc.so.6:memcpy@@GLIBC_2.14) redirected to 0x48311d0 (_vgnU_ifunc_wrapper)
--2619-- REDIR: 0x491af50 (libc.so.6:wcsnlen) redirected to 0x48311d0 (_vgnU_ifunc_wrapper)
--2619-- REDIR: 0x4919860 (libc.so.6:wcscpy) redirected to 0x48311d0 (_vgnU_ifunc_wrapper)
--2619-- REDIR: 0x48fc820 (libc.so.6:strpbrk) redirected to 0x48311d0 (_vgnU_ifunc_wrapper)
--2619-- REDIR: 0x48fc100 (libc.so.6:index) redirected to 0x48311d0 (_vgnU_ifunc_wrapper)
--2619-- REDIR: 0x48fc630 (libc.so.6:strlen) redirected to 0x48311d0 (_vgnU_ifunc_wrapper)
--2619-- REDIR: 0x4905bb0 (libc.so.6:memrchr) redirected to 0x48311d0 (_vgnU_ifunc_wrapper)
--2619-- REDIR: 0x48fd850 (libc.so.6:strcasecmp_l) redirected to 0x48311d0 (_vgnU_ifunc_wrapper)
--2619-- REDIR: 0x48fd3d0 (libc.so.6:memchr) redirected to 0x48311d0 (_vgnU_ifunc_wrapper)
--2619-- REDIR: 0x4919930 (libc.so.6:wcslen) redirected to 0x48311d0 (_vgnU_ifunc_wrapper)
--2619-- REDIR: 0x48fcae0 (libc.so.6:strspn) redirected to 0x48311d0 (_vgnU_ifunc_wrapper)
--2619-- REDIR: 0x48fd750 (libc.so.6:stpncpy) redirected to 0x48311d0 (_vgnU_ifunc_wrapper)
--2619-- REDIR: 0x48fd6f0 (libc.so.6:stpcpy) redirected to 0x48311d0 (_vgnU_ifunc_wrapper)
--2619-- REDIR: 0x48fec90 (libc.so.6:strchrnul) redirected to 0x48311d0 (_vgnU_ifunc_wrapper)
--2619-- REDIR: 0x48fd8a0 (libc.so.6:strncasecmp_l) redirected to 0x48311d0 (_vgnU_ifunc_wrapper)
--2619-- REDIR: 0x49e5730 (libc.so.6:__strrchr_avx2) redirected to 0x483ea10 (rindex)
--2619-- REDIR: 0x48f70e0 (libc.so.6:malloc) redirected to 0x483b780 (malloc)
--2619-- REDIR: 0x48f8b10 (libc.so.6:calloc) redirected to 0x483dce0 (calloc)
--2619-- REDIR: 0x49e5540 (libc.so.6:__strchrnul_avx2) redirected to 0x4843540 (strchrnul)
--2619-- REDIR: 0x49e5900 (libc.so.6:__strlen_avx2) redirected to 0x483ef40 (strlen)
--2619-- REDIR: 0x48f76d0 (libc.so.6:free) redirected to 0x483c9d0 (free)
--2619-- REDIR: 0x49e8910 (libc.so.6:__memcpy_avx_unaligned_erms) redirected to 0x48429f0 (memmove)
--2619-- REDIR: 0x48fcfa0 (libc.so.6:__GI_strstr) redirected to 0x4843ca0 (__strstr_sse2)
--2619-- REDIR: 0x49e1ef0 (libc.so.6:__memcmp_avx2_movbe) redirected to 0x48421e0 (bcmp)
--2619-- REDIR: 0x49e0df0 (libc.so.6:__strcmp_avx2) redirected to 0x483fed0 (strcmp)
--2619-- REDIR: 0x49e8d90 (libc.so.6:__memset_avx2_unaligned_erms) redirected to 0x48428e0 (memset)
--2619-- REDIR: 0x48f7e80 (libc.so.6:realloc) redirected to 0x483df30 (realloc)
==2619== 
==2619== HEAP SUMMARY:
==2619==     in use at exit: 0 bytes in 0 blocks
==2619==   total heap usage: 12 allocs, 12 frees, 15,647 bytes allocated
==2619== 
==2619== All heap blocks were freed -- no leaks are possible
==2619== 
==2619== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
deleting marker file /tmp/tmp.GilcapDlCd
~/assignment-2-jainaneesh/assignment-autotest/test/assignment5 ~/assignment-2-jainaneesh/assignment-autotest/test/assignment5 ~/assignment-2-jainaneesh/server ~/assignment-2-jainaneesh/assignment-autotest/test/assignment5 ~/assignment-2-jainaneesh
Testing target localhost on port 9000
sending string abcdefg to localhost on port 9000
Differences found after sending abcdefg to localhost on port 9000
Expected contents to match:
abcdefg
But found contents:
With differences
--- /tmp/tmp.gIZEme6weA	2025-02-08 22:22:56.823560890 -0500
+++ /tmp/tmp.tmke8wTrEL	2025-02-08 22:22:56.815561097 -0500
@@ -1 +0,0 @@
-abcdefg
Test complete with failure
[0;31mValidation Error:sockettest.sh returned 1 attempting to run against native compiled aesdsocket instance running under valgrind[0m
Stopping valgrind and aesdsocket process at pid 
kill: usage: kill [-s sigspec | -n signum | -sigspec] pid | jobspec ... or kill -l [sigspec]
Validation failed with error list :sockettest.sh returned 1 attempting to run against native compiled aesdsocket instance running under valgrind
Test of assignment assignment5 failed with rc=1
Running test with user linux-o-phile
-- Generating ;/home/linux-o-phile/assignment-2-jainaneesh/assignment-autotest/test/assignment1/Test_hello_Runner.c;/home/linux-o-phile/assignment-2-jainaneesh/assignment-autotest/test/assignment1/Test_assignment_validate_Runner.c from test/assignment1/Test_hello.c;test/assignment1/Test_assignment_validate.c
-- Building executable including ;/home/linux-o-phile/assignment-2-jainaneesh/assignment-autotest/test/assignment1/Test_hello_Runner.c;/home/linux-o-phile/assignment-2-jainaneesh/assignment-autotest/test/assignment1/Test_assignment_validate_Runner.c test/assignment1/Test_hello.c;test/assignment1/Test_assignment_validate.c and ../examples/autotest-validate/autotest-validate.c
-- Configuring done
-- Generating done
-- Build files have been written to: /home/linux-o-phile/assignment-2-jainaneesh/build
[ 10%] Building C object assignment-autotest/Unity/src/CMakeFiles/unity.dir/unity.c.o
[ 20%] Linking C static library libunity.a
[ 20%] Built target unity
[ 30%] Generating ../../assignment-autotest/test/assignment1/Test_hello_Runner.c, ../../assignment-autotest/test/assignment1/Test_assignment_validate_Runner.c, ../../assignment-autotest/test/unity_runner.c
Test files for auto dependency generation test/assignment1/Test_hello.c test/assignment1/Test_assignment_validate.c
Autogenerating runner for test/assignment1/Test_hello.c
Autogenerating runner for test/assignment1/Test_assignment_validate.c
Autogenerating test/unity_runner.c
Scanning dependencies of target assignment-autotest
[ 40%] Building C object assignment-autotest/CMakeFiles/assignment-autotest.dir/test/assignment1/Test_hello.c.o
[ 50%] Building C object assignment-autotest/CMakeFiles/assignment-autotest.dir/test/assignment1/Test_assignment_validate.c.o
[ 60%] Building C object assignment-autotest/CMakeFiles/assignment-autotest.dir/test/assignment1/Test_hello_Runner.c.o
[ 70%] Building C object assignment-autotest/CMakeFiles/assignment-autotest.dir/test/assignment1/Test_assignment_validate_Runner.c.o
[ 80%] Building C object assignment-autotest/CMakeFiles/assignment-autotest.dir/__/examples/autotest-validate/autotest-validate.c.o
[ 90%] Building C object assignment-autotest/CMakeFiles/assignment-autotest.dir/test/unity_runner.c.o
[100%] Linking C executable assignment-autotest
[100%] Built target assignment-autotest
/home/linux-o-phile/assignment-2-jainaneesh/assignment-autotest/test/assignment1/Test_hello.c:6:test_hello:INFO: Hello!  Your unity setup is working!
/home/linux-o-phile/assignment-2-jainaneesh/assignment-autotest/test/assignment1/Test_hello.c:4:test_hello:PASS

-----------------------
1 Tests 0 Failures 0 Ignored 
OK
/home/linux-o-phile/assignment-2-jainaneesh/assignment-autotest/test/assignment1/Test_assignment_validate.c:9:test_assignment_validate:PASS

-----------------------
1 Tests 0 Failures 0 Ignored 
OK
Executing assignment test script
~/assignment-2-jainaneesh/assignment-autotest/test/assignment5 ~/assignment-2-jainaneesh
~/assignment-2-jainaneesh/server ~/assignment-2-jainaneesh/assignment-autotest/test/assignment5 ~/assignment-2-jainaneesh
rm -f aesdsocket aesdsocket.o
gcc -Wall -Wextra -g -o aesdsocket aesdsocket.c
aesdsocket.c: In function ‘main’:
aesdsocket.c:108:4: warning: ‘return’ with no value, in function returning non-void [-Wreturn-type]
  108 |    return;
      |    ^~~~~~
aesdsocket.c:61:5: note: declared here
   61 | int main(int argc, char *argv[])
      |     ^~~~
~/assignment-2-jainaneesh/assignment-autotest/test/assignment5 ~/assignment-2-jainaneesh/server ~/assignment-2-jainaneesh/assignment-autotest/test/assignment5 ~/assignment-2-jainaneesh
~/assignment-2-jainaneesh/assignment-autotest/test/assignment5 ~/assignment-2-jainaneesh/assignment-autotest/test/assignment5 ~/assignment-2-jainaneesh/server ~/assignment-2-jainaneesh/assignment-autotest/test/assignment5 ~/assignment-2-jainaneesh
Testing target localhost on port 9000
sending string abcdefg to localhost on port 9000
sending string hijklmnop to localhost on port 9000
sending string 1234567890 to localhost on port 9000
sending string 9876543210 to localhost on port 9000
Sending long string from long_string.txt file
sending string  to localhost on port 9000
Full contents sent:
abcdefg
hijklmnop
1234567890
9876543210

Tests complete with success!
~/assignment-2-jainaneesh/server ~/assignment-2-jainaneesh/assignment-autotest/test/assignment5 ~/assignment-2-jainaneesh
~/assignment-2-jainaneesh/assignment-autotest/test/assignment5 ~/assignment-2-jainaneesh
Waiting for aesdsocket application with pid 2794 to terminate
Re-running sockettest.sh with valgrind
~/assignment-2-jainaneesh/server ~/assignment-2-jainaneesh/assignment-autotest/test/assignment5 ~/assignment-2-jainaneesh
~/assignment-2-jainaneesh/assignment-autotest/test/assignment5 ~/assignment-2-jainaneesh/server ~/assignment-2-jainaneesh/assignment-autotest/test/assignment5 ~/assignment-2-jainaneesh
Waiting for aesdsocket application to start
Starting valgrind
Valgrind and aesdsocket complete
[0;31mValidation Error:Valgrind failed with 1[0m
Valgrind output error log:
==2850== Memcheck, a memory error detector
==2850== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==2850== Using Valgrind-3.15.0-608cb11914-20190413 and LibVEX; rerun with -h for copyright info
==2850== Command: ./aesdsocket
==2850== Parent PID: 2848
==2850== 
--2850-- 
--2850-- Valgrind options:
--2850--    --error-exitcode=1
--2850--    --leak-check=full
--2850--    --show-leak-kinds=all
--2850--    --track-origins=yes
--2850--    --errors-for-leak-kinds=definite
--2850--    --verbose
--2850--    --log-file=valgrind-out.txt
--2850-- Contents of /proc/version:
--2850--   Linux version 5.15.0-131-generic (buildd@lcy02-amd64-072) (gcc (Ubuntu 9.4.0-1ubuntu1~20.04.2) 9.4.0, GNU ld (GNU Binutils for Ubuntu) 2.34) #141~20.04.1-Ubuntu SMP Thu Jan 16 18:38:51 UTC 2025
--2850-- 
--2850-- Arch and hwcaps: AMD64, LittleEndian, amd64-cx16-lzcnt-rdtscp-sse3-ssse3-avx-avx2-bmi-f16c-rdrand
--2850-- Page sizes: currently 4096, max supported 4096
--2850-- Valgrind library directory: /usr/lib/x86_64-linux-gnu/valgrind
--2850-- Reading syms from /home/linux-o-phile/assignment-2-jainaneesh/server/aesdsocket
--2850-- Reading syms from /usr/lib/x86_64-linux-gnu/ld-2.31.so
--2850--   Considering /usr/lib/debug/.build-id/cb/904567e1b2a460b6fc20817776ad590d265686.debug ..
--2850--   .. build-id is valid
--2850-- Reading syms from /usr/lib/x86_64-linux-gnu/valgrind/memcheck-amd64-linux
--2850--    object doesn't have a symbol table
--2850--    object doesn't have a dynamic symbol table
--2850-- Scheduler: using generic scheduler lock implementation.
--2850-- Reading suppressions file: /usr/lib/x86_64-linux-gnu/valgrind/default.supp
==2850== embedded gdbserver: reading from /tmp/vgdb-pipe-from-vgdb-to-2850-by-linux-o-phile-on-???
==2850== embedded gdbserver: writing to   /tmp/vgdb-pipe-to-vgdb-from-2850-by-linux-o-phile-on-???
==2850== embedded gdbserver: shared mem   /tmp/vgdb-pipe-shared-mem-vgdb-2850-by-linux-o-phile-on-???
==2850== 
==2850== TO CONTROL THIS PROCESS USING vgdb (which you probably
==2850== don't want to do, unless you know exactly what you're doing,
==2850== or are doing some strange experiment):
==2850==   /usr/lib/x86_64-linux-gnu/valgrind/../../bin/vgdb --pid=2850 ...command...
==2850== 
==2850== TO DEBUG THIS PROCESS USING GDB: start GDB like this
==2850==   /path/to/gdb ./aesdsocket
==2850== and then give GDB the following command
==2850==   target remote | /usr/lib/x86_64-linux-gnu/valgrind/../../bin/vgdb --pid=2850
==2850== --pid is optional if only one valgrind process is running
==2850== 
--2850-- REDIR: 0x4022e20 (ld-linux-x86-64.so.2:strlen) redirected to 0x580c9ce2 (???)
--2850-- REDIR: 0x4022bf0 (ld-linux-x86-64.so.2:index) redirected to 0x580c9cfc (???)
--2850-- Reading syms from /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_core-amd64-linux.so
--2850--    object doesn't have a symbol table
--2850-- Reading syms from /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so
--2850--    object doesn't have a symbol table
==2850== WARNING: new redirection conflicts with existing -- ignoring it
--2850--     old: 0x04022e20 (strlen              ) R-> (0000.0) 0x580c9ce2 ???
--2850--     new: 0x04022e20 (strlen              ) R-> (2007.0) 0x0483f060 strlen
--2850-- REDIR: 0x401f600 (ld-linux-x86-64.so.2:strcmp) redirected to 0x483ffd0 (strcmp)
--2850-- REDIR: 0x4023380 (ld-linux-x86-64.so.2:mempcpy) redirected to 0x4843a20 (mempcpy)
--2850-- Reading syms from /usr/lib/x86_64-linux-gnu/libc-2.31.so
--2850--   Considering /usr/lib/debug/.build-id/03/23ab4806bee6f846d9ad4bccfc29afdca49a58.debug ..
--2850--   .. build-id is valid
--2850-- REDIR: 0x48fd480 (libc.so.6:memmove) redirected to 0x48311d0 (_vgnU_ifunc_wrapper)
--2850-- REDIR: 0x48fc780 (libc.so.6:strncpy) redirected to 0x48311d0 (_vgnU_ifunc_wrapper)
--2850-- REDIR: 0x48fd7b0 (libc.so.6:strcasecmp) redirected to 0x48311d0 (_vgnU_ifunc_wrapper)
--2850-- REDIR: 0x48fc0a0 (libc.so.6:strcat) redirected to 0x48311d0 (_vgnU_ifunc_wrapper)
--2850-- REDIR: 0x48fc7e0 (libc.so.6:rindex) redirected to 0x48311d0 (_vgnU_ifunc_wrapper)
--2850-- REDIR: 0x48fec50 (libc.so.6:rawmemchr) redirected to 0x48311d0 (_vgnU_ifunc_wrapper)
--2850-- REDIR: 0x4919ce0 (libc.so.6:wmemchr) redirected to 0x48311d0 (_vgnU_ifunc_wrapper)
--2850-- REDIR: 0x4919820 (libc.so.6:wcscmp) redirected to 0x48311d0 (_vgnU_ifunc_wrapper)
--2850-- REDIR: 0x48fd5e0 (libc.so.6:mempcpy) redirected to 0x48311d0 (_vgnU_ifunc_wrapper)
--2850-- REDIR: 0x48fd410 (libc.so.6:bcmp) redirected to 0x48311d0 (_vgnU_ifunc_wrapper)
--2850-- REDIR: 0x48fc710 (libc.so.6:strncmp) redirected to 0x48311d0 (_vgnU_ifunc_wrapper)
--2850-- REDIR: 0x48fc150 (libc.so.6:strcmp) redirected to 0x48311d0 (_vgnU_ifunc_wrapper)
--2850-- REDIR: 0x48fd540 (libc.so.6:memset) redirected to 0x48311d0 (_vgnU_ifunc_wrapper)
--2850-- REDIR: 0x49197e0 (libc.so.6:wcschr) redirected to 0x48311d0 (_vgnU_ifunc_wrapper)
--2850-- REDIR: 0x48fc670 (libc.so.6:strnlen) redirected to 0x48311d0 (_vgnU_ifunc_wrapper)
--2850-- REDIR: 0x48fc230 (libc.so.6:strcspn) redirected to 0x48311d0 (_vgnU_ifunc_wrapper)
--2850-- REDIR: 0x48fd800 (libc.so.6:strncasecmp) redirected to 0x48311d0 (_vgnU_ifunc_wrapper)
--2850-- REDIR: 0x48fc1d0 (libc.so.6:strcpy) redirected to 0x48311d0 (_vgnU_ifunc_wrapper)
--2850-- REDIR: 0x48fd950 (libc.so.6:memcpy@@GLIBC_2.14) redirected to 0x48311d0 (_vgnU_ifunc_wrapper)
--2850-- REDIR: 0x491af50 (libc.so.6:wcsnlen) redirected to 0x48311d0 (_vgnU_ifunc_wrapper)
--2850-- REDIR: 0x4919860 (libc.so.6:wcscpy) redirected to 0x48311d0 (_vgnU_ifunc_wrapper)
--2850-- REDIR: 0x48fc820 (libc.so.6:strpbrk) redirected to 0x48311d0 (_vgnU_ifunc_wrapper)
--2850-- REDIR: 0x48fc100 (libc.so.6:index) redirected to 0x48311d0 (_vgnU_ifunc_wrapper)
--2850-- REDIR: 0x48fc630 (libc.so.6:strlen) redirected to 0x48311d0 (_vgnU_ifunc_wrapper)
--2850-- REDIR: 0x4905bb0 (libc.so.6:memrchr) redirected to 0x48311d0 (_vgnU_ifunc_wrapper)
--2850-- REDIR: 0x48fd850 (libc.so.6:strcasecmp_l) redirected to 0x48311d0 (_vgnU_ifunc_wrapper)
--2850-- REDIR: 0x48fd3d0 (libc.so.6:memchr) redirected to 0x48311d0 (_vgnU_ifunc_wrapper)
--2850-- REDIR: 0x4919930 (libc.so.6:wcslen) redirected to 0x48311d0 (_vgnU_ifunc_wrapper)
--2850-- REDIR: 0x48fcae0 (libc.so.6:strspn) redirected to 0x48311d0 (_vgnU_ifunc_wrapper)
--2850-- REDIR: 0x48fd750 (libc.so.6:stpncpy) redirected to 0x48311d0 (_vgnU_ifunc_wrapper)
--2850-- REDIR: 0x48fd6f0 (libc.so.6:stpcpy) redirected to 0x48311d0 (_vgnU_ifunc_wrapper)
--2850-- REDIR: 0x48fec90 (libc.so.6:strchrnul) redirected to 0x48311d0 (_vgnU_ifunc_wrapper)
--2850-- REDIR: 0x48fd8a0 (libc.so.6:strncasecmp_l) redirected to 0x48311d0 (_vgnU_ifunc_wrapper)
--2850-- REDIR: 0x49e5730 (libc.so.6:__strrchr_avx2) redirected to 0x483ea10 (rindex)
--2850-- REDIR: 0x48f70e0 (libc.so.6:malloc) redirected to 0x483b780 (malloc)
--2850-- REDIR: 0x48f8b10 (libc.so.6:calloc) redirected to 0x483dce0 (calloc)
--2850-- REDIR: 0x49e5540 (libc.so.6:__strchrnul_avx2) redirected to 0x4843540 (strchrnul)
--2850-- REDIR: 0x49e5900 (libc.so.6:__strlen_avx2) redirected to 0x483ef40 (strlen)
--2850-- REDIR: 0x48f76d0 (libc.so.6:free) redirected to 0x483c9d0 (free)
--2850-- REDIR: 0x49e8910 (libc.so.6:__memcpy_avx_unaligned_erms) redirected to 0x48429f0 (memmove)
--2850-- REDIR: 0x48fcfa0 (libc.so.6:__GI_strstr) redirected to 0x4843ca0 (__strstr_sse2)
--2850-- REDIR: 0x49e1ef0 (libc.so.6:__memcmp_avx2_movbe) redirected to 0x48421e0 (bcmp)
--2850-- REDIR: 0x49e0df0 (libc.so.6:__strcmp_avx2) redirected to 0x483fed0 (strcmp)
--2850-- REDIR: 0x49e8d90 (libc.so.6:__memset_avx2_unaligned_erms) redirected to 0x48428e0 (memset)
--2850-- REDIR: 0x48f7e80 (libc.so.6:realloc) redirected to 0x483df30 (realloc)
==2850== 
==2850== HEAP SUMMARY:
==2850==     in use at exit: 0 bytes in 0 blocks
==2850==   total heap usage: 12 allocs, 12 frees, 15,647 bytes allocated
==2850== 
==2850== All heap blocks were freed -- no leaks are possible
==2850== 
==2850== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
deleting marker file /tmp/tmp.COuBu98rJx
~/assignment-2-jainaneesh/assignment-autotest/test/assignment5 ~/assignment-2-jainaneesh/assignment-autotest/test/assignment5 ~/assignment-2-jainaneesh/server ~/assignment-2-jainaneesh/assignment-autotest/test/assignment5 ~/assignment-2-jainaneesh
Testing target localhost on port 9000
sending string abcdefg to localhost on port 9000
Differences found after sending abcdefg to localhost on port 9000
Expected contents to match:
abcdefg
But found contents:
With differences
--- /tmp/tmp.PI1jyYDwdp	2025-02-08 22:31:59.446741951 -0500
+++ /tmp/tmp.yKNsP2cSui	2025-02-08 22:31:59.438741904 -0500
@@ -1 +0,0 @@
-abcdefg
Test complete with failure
[0;31mValidation Error:sockettest.sh returned 1 attempting to run against native compiled aesdsocket instance running under valgrind[0m
Stopping valgrind and aesdsocket process at pid 
kill: usage: kill [-s sigspec | -n signum | -sigspec] pid | jobspec ... or kill -l [sigspec]
Validation failed with error list :sockettest.sh returned 1 attempting to run against native compiled aesdsocket instance running under valgrind
Test of assignment assignment5 failed with rc=1
Running test with user linux-o-phile
-- Generating ;/home/linux-o-phile/assignment-2-jainaneesh/assignment-autotest/test/assignment1/Test_hello_Runner.c;/home/linux-o-phile/assignment-2-jainaneesh/assignment-autotest/test/assignment1/Test_assignment_validate_Runner.c from test/assignment1/Test_hello.c;test/assignment1/Test_assignment_validate.c
-- Building executable including ;/home/linux-o-phile/assignment-2-jainaneesh/assignment-autotest/test/assignment1/Test_hello_Runner.c;/home/linux-o-phile/assignment-2-jainaneesh/assignment-autotest/test/assignment1/Test_assignment_validate_Runner.c test/assignment1/Test_hello.c;test/assignment1/Test_assignment_validate.c and ../examples/autotest-validate/autotest-validate.c
-- Configuring done
-- Generating done
-- Build files have been written to: /home/linux-o-phile/assignment-2-jainaneesh/build
[ 10%] Building C object assignment-autotest/Unity/src/CMakeFiles/unity.dir/unity.c.o
[ 20%] Linking C static library libunity.a
[ 20%] Built target unity
[ 30%] Generating ../../assignment-autotest/test/assignment1/Test_hello_Runner.c, ../../assignment-autotest/test/assignment1/Test_assignment_validate_Runner.c, ../../assignment-autotest/test/unity_runner.c
Test files for auto dependency generation test/assignment1/Test_hello.c test/assignment1/Test_assignment_validate.c
Autogenerating runner for test/assignment1/Test_hello.c
Autogenerating runner for test/assignment1/Test_assignment_validate.c
Autogenerating test/unity_runner.c
Scanning dependencies of target assignment-autotest
[ 40%] Building C object assignment-autotest/CMakeFiles/assignment-autotest.dir/test/assignment1/Test_hello.c.o
[ 50%] Building C object assignment-autotest/CMakeFiles/assignment-autotest.dir/test/assignment1/Test_assignment_validate.c.o
[ 60%] Building C object assignment-autotest/CMakeFiles/assignment-autotest.dir/test/assignment1/Test_hello_Runner.c.o
[ 70%] Building C object assignment-autotest/CMakeFiles/assignment-autotest.dir/test/assignment1/Test_assignment_validate_Runner.c.o
[ 80%] Building C object assignment-autotest/CMakeFiles/assignment-autotest.dir/__/examples/autotest-validate/autotest-validate.c.o
[ 90%] Building C object assignment-autotest/CMakeFiles/assignment-autotest.dir/test/unity_runner.c.o
[100%] Linking C executable assignment-autotest
[100%] Built target assignment-autotest
/home/linux-o-phile/assignment-2-jainaneesh/assignment-autotest/test/assignment1/Test_hello.c:6:test_hello:INFO: Hello!  Your unity setup is working!
/home/linux-o-phile/assignment-2-jainaneesh/assignment-autotest/test/assignment1/Test_hello.c:4:test_hello:PASS

-----------------------
1 Tests 0 Failures 0 Ignored 
OK
/home/linux-o-phile/assignment-2-jainaneesh/assignment-autotest/test/assignment1/Test_assignment_validate.c:9:test_assignment_validate:PASS

-----------------------
1 Tests 0 Failures 0 Ignored 
OK
Executing assignment test script
~/assignment-2-jainaneesh/assignment-autotest/test/assignment5 ~/assignment-2-jainaneesh
~/assignment-2-jainaneesh/server ~/assignment-2-jainaneesh/assignment-autotest/test/assignment5 ~/assignment-2-jainaneesh
rm -f aesdsocket aesdsocket.o
gcc -Wall -Wextra -g -o aesdsocket aesdsocket.c
aesdsocket.c: In function ‘main’:
aesdsocket.c:79:6: warning: implicit declaration of function ‘setsocketopt’; did you mean ‘setsockopt’? [-Wimplicit-function-declaration]
   79 |  if (setsocketopt(server_socket, SOL_SOCKET, SO_REUSEADDR, &opt, sizeof(opt)) < 0) {
      |      ^~~~~~~~~~~~
      |      setsockopt
aesdsocket.c:115:4: warning: ‘return’ with no value, in function returning non-void [-Wreturn-type]
  115 |    return;
      |    ^~~~~~
aesdsocket.c:61:5: note: declared here
   61 | int main(int argc, char *argv[])
      |     ^~~~
/usr/bin/ld: /tmp/ccrYeB6s.o: in function `main':
/home/linux-o-phile/assignment-2-jainaneesh/server/aesdsocket.c:79: undefined reference to `setsocketopt'
collect2: error: ld returned 1 exit status
make: *** [Makefile:17: aesdsocket] Error 1
[0;31mValidation Error:make returned 2 attempting to build native application[0m
script-helpers: line 555: ./aesdsocket: No such file or directory
[0;31mValidation Error:starting aesdocket failed with 127[0m
~/assignment-2-jainaneesh/assignment-autotest/test/assignment5 ~/assignment-2-jainaneesh/server ~/assignment-2-jainaneesh/assignment-autotest/test/assignment5 ~/assignment-2-jainaneesh
~/assignment-2-jainaneesh/assignment-autotest/test/assignment5 ~/assignment-2-jainaneesh/assignment-autotest/test/assignment5 ~/assignment-2-jainaneesh/server ~/assignment-2-jainaneesh/assignment-autotest/test/assignment5 ~/assignment-2-jainaneesh
Testing target localhost on port 9000
sending string abcdefg to localhost on port 9000
Differences found after sending abcdefg to localhost on port 9000
Expected contents to match:
abcdefg
But found contents:
With differences
--- /tmp/tmp.V9138VKgUJ	2025-02-08 22:40:01.280397701 -0500
+++ /tmp/tmp.420cadEpQY	2025-02-08 22:40:01.272397140 -0500
@@ -1 +0,0 @@
-abcdefg
Test complete with failure
[0;31mValidation Error:sockettest.sh returned 1 attempting to run against native compiled aesdsocket instance[0m
kill: usage: kill [-s sigspec | -n signum | -sigspec] pid | jobspec ... or kill -l [sigspec]
~/assignment-2-jainaneesh/server ~/assignment-2-jainaneesh/assignment-autotest/test/assignment5 ~/assignment-2-jainaneesh
~/assignment-2-jainaneesh/assignment-autotest/test/assignment5 ~/assignment-2-jainaneesh
Waiting for aesdsocket application with pid  to terminate
kill: usage: kill [-s sigspec | -n signum | -sigspec] pid | jobspec ... or kill -l [sigspec]
error: List of process IDs must follow -q.

Usage:
 ps [options]

 Try 'ps --help <simple|list|output|threads|misc|all>'
  or 'ps --help <s|l|o|t|m|a>'
 for additional help text.

For more details see ps(1).
aesdsocket still running
kill: usage: kill [-s sigspec | -n signum | -sigspec] pid | jobspec ... or kill -l [sigspec]
error: List of process IDs must follow -q.

Usage:
 ps [options]

 Try 'ps --help <simple|list|output|threads|misc|all>'
  or 'ps --help <s|l|o|t|m|a>'
 for additional help text.

For more details see ps(1).
aesdsocket still running
kill: usage: kill [-s sigspec | -n signum | -sigspec] pid | jobspec ... or kill -l [sigspec]
error: List of process IDs must follow -q.

Usage:
 ps [options]

 Try 'ps --help <simple|list|output|threads|misc|all>'
  or 'ps --help <s|l|o|t|m|a>'
 for additional help text.

For more details see ps(1).
aesdsocket still running
kill: usage: kill [-s sigspec | -n signum | -sigspec] pid | jobspec ... or kill -l [sigspec]
error: List of process IDs must follow -q.

Usage:
 ps [options]

 Try 'ps --help <simple|list|output|threads|misc|all>'
  or 'ps --help <s|l|o|t|m|a>'
 for additional help text.

For more details see ps(1).
aesdsocket still running
kill: usage: kill [-s sigspec | -n signum | -sigspec] pid | jobspec ... or kill -l [sigspec]
error: List of process IDs must follow -q.

Usage:
 ps [options]

 Try 'ps --help <simple|list|output|threads|misc|all>'
  or 'ps --help <s|l|o|t|m|a>'
 for additional help text.

For more details see ps(1).
aesdsocket still running
kill: usage: kill [-s sigspec | -n signum | -sigspec] pid | jobspec ... or kill -l [sigspec]
error: List of process IDs must follow -q.

Usage:
 ps [options]

 Try 'ps --help <simple|list|output|threads|misc|all>'
  or 'ps --help <s|l|o|t|m|a>'
 for additional help text.

For more details see ps(1).
aesdsocket still running
kill: usage: kill [-s sigspec | -n signum | -sigspec] pid | jobspec ... or kill -l [sigspec]
error: List of process IDs must follow -q.

Usage:
 ps [options]

 Try 'ps --help <simple|list|output|threads|misc|all>'
  or 'ps --help <s|l|o|t|m|a>'
 for additional help text.

For more details see ps(1).
aesdsocket still running
kill: usage: kill [-s sigspec | -n signum | -sigspec] pid | jobspec ... or kill -l [sigspec]
error: List of process IDs must follow -q.

Usage:
 ps [options]

 Try 'ps --help <simple|list|output|threads|misc|all>'
  or 'ps --help <s|l|o|t|m|a>'
 for additional help text.

For more details see ps(1).
aesdsocket still running
kill: usage: kill [-s sigspec | -n signum | -sigspec] pid | jobspec ... or kill -l [sigspec]
error: List of process IDs must follow -q.

Usage:
 ps [options]

 Try 'ps --help <simple|list|output|threads|misc|all>'
  or 'ps --help <s|l|o|t|m|a>'
 for additional help text.

For more details see ps(1).
aesdsocket still running
kill: usage: kill [-s sigspec | -n signum | -sigspec] pid | jobspec ... or kill -l [sigspec]
error: List of process IDs must follow -q.

Usage:
 ps [options]

 Try 'ps --help <simple|list|output|threads|misc|all>'
  or 'ps --help <s|l|o|t|m|a>'
 for additional help text.

For more details see ps(1).
aesdsocket still running
kill: usage: kill [-s sigspec | -n signum | -sigspec] pid | jobspec ... or kill -l [sigspec]
error: List of process IDs must follow -q.

Usage:
 ps [options]

 Try 'ps --help <simple|list|output|threads|misc|all>'
  or 'ps --help <s|l|o|t|m|a>'
 for additional help text.

For more details see ps(1).
aesdsocket still running
kill: usage: kill [-s sigspec | -n signum | -sigspec] pid | jobspec ... or kill -l [sigspec]
error: List of process IDs must follow -q.

Usage:
 ps [options]

 Try 'ps --help <simple|list|output|threads|misc|all>'
  or 'ps --help <s|l|o|t|m|a>'
 for additional help text.

For more details see ps(1).
aesdsocket still running
kill: usage: kill [-s sigspec | -n signum | -sigspec] pid | jobspec ... or kill -l [sigspec]
error: List of process IDs must follow -q.

Usage:
 ps [options]

 Try 'ps --help <simple|list|output|threads|misc|all>'
  or 'ps --help <s|l|o|t|m|a>'
 for additional help text.

For more details see ps(1).
aesdsocket still running
kill: usage: kill [-s sigspec | -n signum | -sigspec] pid | jobspec ... or kill -l [sigspec]
error: List of process IDs must follow -q.

Usage:
 ps [options]

 Try 'ps --help <simple|list|output|threads|misc|all>'
  or 'ps --help <s|l|o|t|m|a>'
 for additional help text.

For more details see ps(1).
aesdsocket still running
kill: usage: kill [-s sigspec | -n signum | -sigspec] pid | jobspec ... or kill -l [sigspec]
error: List of process IDs must follow -q.

Usage:
 ps [options]

 Try 'ps --help <simple|list|output|threads|misc|all>'
  or 'ps --help <s|l|o|t|m|a>'
 for additional help text.

For more details see ps(1).
aesdsocket still running
Running test with user linux-o-phile
-- Generating ;/home/linux-o-phile/assignment-2-jainaneesh/assignment-autotest/test/assignment1/Test_hello_Runner.c;/home/linux-o-phile/assignment-2-jainaneesh/assignment-autotest/test/assignment1/Test_assignment_validate_Runner.c from test/assignment1/Test_hello.c;test/assignment1/Test_assignment_validate.c
-- Building executable including ;/home/linux-o-phile/assignment-2-jainaneesh/assignment-autotest/test/assignment1/Test_hello_Runner.c;/home/linux-o-phile/assignment-2-jainaneesh/assignment-autotest/test/assignment1/Test_assignment_validate_Runner.c test/assignment1/Test_hello.c;test/assignment1/Test_assignment_validate.c and ../examples/autotest-validate/autotest-validate.c
-- Configuring done
-- Generating done
-- Build files have been written to: /home/linux-o-phile/assignment-2-jainaneesh/build
[ 10%] Building C object assignment-autotest/Unity/src/CMakeFiles/unity.dir/unity.c.o
[ 20%] Linking C static library libunity.a
[ 20%] Built target unity
[ 30%] Generating ../../assignment-autotest/test/assignment1/Test_hello_Runner.c, ../../assignment-autotest/test/assignment1/Test_assignment_validate_Runner.c, ../../assignment-autotest/test/unity_runner.c
Test files for auto dependency generation test/assignment1/Test_hello.c test/assignment1/Test_assignment_validate.c
Autogenerating runner for test/assignment1/Test_hello.c
Autogenerating runner for test/assignment1/Test_assignment_validate.c
Autogenerating test/unity_runner.c
Scanning dependencies of target assignment-autotest
[ 40%] Building C object assignment-autotest/CMakeFiles/assignment-autotest.dir/test/assignment1/Test_hello.c.o
[ 50%] Building C object assignment-autotest/CMakeFiles/assignment-autotest.dir/test/assignment1/Test_assignment_validate.c.o
[ 60%] Building C object assignment-autotest/CMakeFiles/assignment-autotest.dir/test/assignment1/Test_hello_Runner.c.o
[ 70%] Building C object assignment-autotest/CMakeFiles/assignment-autotest.dir/test/assignment1/Test_assignment_validate_Runner.c.o
[ 80%] Building C object assignment-autotest/CMakeFiles/assignment-autotest.dir/__/examples/autotest-validate/autotest-validate.c.o
[ 90%] Building C object assignment-autotest/CMakeFiles/assignment-autotest.dir/test/unity_runner.c.o
[100%] Linking C executable assignment-autotest
[100%] Built target assignment-autotest
/home/linux-o-phile/assignment-2-jainaneesh/assignment-autotest/test/assignment1/Test_hello.c:6:test_hello:INFO: Hello!  Your unity setup is working!
/home/linux-o-phile/assignment-2-jainaneesh/assignment-autotest/test/assignment1/Test_hello.c:4:test_hello:PASS

-----------------------
1 Tests 0 Failures 0 Ignored 
OK
/home/linux-o-phile/assignment-2-jainaneesh/assignment-autotest/test/assignment1/Test_assignment_validate.c:9:test_assignment_validate:PASS

-----------------------
1 Tests 0 Failures 0 Ignored 
OK
Executing assignment test script
~/assignment-2-jainaneesh/assignment-autotest/test/assignment5 ~/assignment-2-jainaneesh
~/assignment-2-jainaneesh/server ~/assignment-2-jainaneesh/assignment-autotest/test/assignment5 ~/assignment-2-jainaneesh
rm -f aesdsocket aesdsocket.o
gcc -Wall -Wextra -g -o aesdsocket aesdsocket.c
aesdsocket.c: In function ‘main’:
aesdsocket.c:115:4: warning: ‘return’ with no value, in function returning non-void [-Wreturn-type]
  115 |    return;
      |    ^~~~~~
aesdsocket.c:61:5: note: declared here
   61 | int main(int argc, char *argv[])
      |     ^~~~
~/assignment-2-jainaneesh/assignment-autotest/test/assignment5 ~/assignment-2-jainaneesh/server ~/assignment-2-jainaneesh/assignment-autotest/test/assignment5 ~/assignment-2-jainaneesh
~/assignment-2-jainaneesh/assignment-autotest/test/assignment5 ~/assignment-2-jainaneesh/assignment-autotest/test/assignment5 ~/assignment-2-jainaneesh/server ~/assignment-2-jainaneesh/assignment-autotest/test/assignment5 ~/assignment-2-jainaneesh
Testing target localhost on port 9000
sending string abcdefg to localhost on port 9000
sending string hijklmnop to localhost on port 9000
sending string 1234567890 to localhost on port 9000
sending string 9876543210 to localhost on port 9000
Sending long string from long_string.txt file
sending string  to localhost on port 9000
Full contents sent:
abcdefg
hijklmnop
1234567890
9876543210

Tests complete with success!
~/assignment-2-jainaneesh/server ~/assignment-2-jainaneesh/assignment-autotest/test/assignment5 ~/assignment-2-jainaneesh
~/assignment-2-jainaneesh/assignment-autotest/test/assignment5 ~/assignment-2-jainaneesh
Waiting for aesdsocket application with pid 3253 to terminate
Re-running sockettest.sh with valgrind
~/assignment-2-jainaneesh/server ~/assignment-2-jainaneesh/assignment-autotest/test/assignment5 ~/assignment-2-jainaneesh
~/assignment-2-jainaneesh/assignment-autotest/test/assignment5 ~/assignment-2-jainaneesh/server ~/assignment-2-jainaneesh/assignment-autotest/test/assignment5 ~/assignment-2-jainaneesh
Waiting for aesdsocket application to start
Starting valgrind
~/assignment-2-jainaneesh/assignment-autotest/test/assignment5 ~/assignment-2-jainaneesh/assignment-autotest/test/assignment5 ~/assignment-2-jainaneesh/server ~/assignment-2-jainaneesh/assignment-autotest/test/assignment5 ~/assignment-2-jainaneesh
Testing target localhost on port 9000
sending string abcdefg to localhost on port 9000
sending string hijklmnop to localhost on port 9000
sending string 1234567890 to localhost on port 9000
sending string 9876543210 to localhost on port 9000
Sending long string from long_string.txt file
sending string  to localhost on port 9000
Full contents sent:
abcdefg
hijklmnop
1234567890
9876543210

Tests complete with success!
Stopping valgrind and aesdsocket process at pid 3309
Waiting for aesdsocket and valgrind to exit
Valgrind and aesdsocket complete
deleting marker file /tmp/tmp.Unzfsokv2l
Test of assignment assignment5 complete with success
